<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[😏]]></title><description><![CDATA[👤博客]]></description><link>https://github.com/thoamsy/blogs.git</link><generator>RSS for Node</generator><lastBuildDate>Mon, 29 Jul 2019 17:23:14 GMT</lastBuildDate><item><title><![CDATA[Shuffle 算法]]></title><description><![CDATA[这篇文章其实在大学的时候就写好了, 不过今天突然忘记怎么写, 就重新看了一遍, 然后调整了一下. 虽然以前一直知道如何写一个随机数算法，但是从来不知道从理论上为什么能证明这个.
直到看了  WiKi 的介绍 ，终于明白了原因。 算法起源 这个算法的刚开始的起源是在 193…]]></description><link>https://github.com/thoamsy/blogs.git/shuffle/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/shuffle/</guid><pubDate>Mon, 29 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;这篇文章其实在大学的时候就写好了, 不过今天突然忘记怎么写, 就重新看了一遍, 然后调整了一下.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然以前一直知道如何写一个随机数算法，但是从来不知道从理论上为什么能证明这个.
直到看了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&quot;&gt;WiKi 的介绍&lt;/a&gt;，终于明白了原因。&lt;/p&gt;
&lt;h2 id=&quot;算法起源&quot;&gt;&lt;a href=&quot;#%E7%AE%97%E6%B3%95%E8%B5%B7%E6%BA%90&quot; aria-label=&quot;算法起源 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;算法起源&lt;/h2&gt;
&lt;p&gt;这个算法的刚开始的起源是在 1938 年，也就是说早于&lt;strong&gt;第一台计算机&lt;/strong&gt;问世的时间。而它的思路是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;刚开始整个数组都是未标记状态，记未标记的个数为 k&lt;/li&gt;
&lt;li&gt;随机选一个在 1…k 的范围的数 n，从左往右找到第 n 为未标记的数。&lt;/li&gt;
&lt;li&gt;将这个数标记，放入随机序列中。k -= 1&lt;/li&gt;
&lt;li&gt;重复第二步，直到全部被标记为止&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这段代码的描述我们可以确定，肯定不会生成重复的随机数。因为一个数只被使用一次。但是为了减少对 k 的计算，于是我们平时常见的算法都是，&lt;strong&gt;通过交换将标记的数放在尾部&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;现代方法&quot;&gt;&lt;a href=&quot;#%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95&quot; aria-label=&quot;现代方法 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;现代方法&lt;/h2&gt;
&lt;p&gt;一个常见的算法是下面这个样子.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;for i in n - 1 down to 1:
	j = rand(i)
	swap(arr[i], arr[j])
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以这样看这个算法。j 的值就是相当于上面算法的第二步，而显然 arr[j] 就是将要找到的那个数。因为 i 也是从尾部开始递减的，所以说，可以通过交换将这个被选取出来的数字和尾部交换，这样相当于将被标记的数字放到了尾部。之后 i 的递减直接帮我们完成了第三步的过程。所以这个算法不会产生重复的。
值得注意的是, 我们不是从 n - 1 到 0 而是 1, 因为最后最后一个数不需要再调整了.&lt;/p&gt;
&lt;p&gt;这里还有另外一种形式的，只不过 i 是递增的.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let arr
for i in 0 to n - 2:
	j = rand(i, n)
	swap(arr[i], arr[j])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这个算法是 mutate 的，也就说会直接修改数组。虽然&lt;strong&gt;immutable&lt;/strong&gt;的算法也能直接通过上面的方法实现，但是可以通过一点小小的优化来将 swap 的三次赋值改成两次, 这种优化和插入排序的优化非常类似(其实我个人觉得没啥必要啦, 用解构赋值就行 🌚)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;let suffled = arr
for i from n - 1 down to 1:
	j = rand(i)
	if i != j
		suffled[i] = suffled[j]
  	suffled[j] = arr[i]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;js-实现&quot;&gt;&lt;a href=&quot;#js-%E5%AE%9E%E7%8E%B0&quot; aria-label=&quot;js 实现 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JS 实现&lt;/h2&gt;
&lt;p&gt;我们可以调一个简单的例子来实现最终的 JS 版本代码&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; copy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lower &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; copy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; upper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 加 1 是因为, 要能取到 upper - lower&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;upper &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; lower &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; lower&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;copy&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; copy&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;copy&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; copy&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; copy&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;值得一提的是, 大学的时候好像看过上面的随机数方法不能在让 &lt;code class=&quot;language-text&quot;&gt;[lower,upper]&lt;/code&gt; 在概率上的分布是一样的, 但是具体的做法我忘记了. &lt;a href=&quot;http://www.ituring.com.cn/book/987&quot;&gt;计算机程序设计艺术 卷 2：半数值算法&lt;/a&gt; 可能描述了更为正确的方式&lt;/p&gt;</content:encoded></item><item><title><![CDATA[对于 SwiftUI 的一些认识]]></title><description><![CDATA[一个月前，WWDC19 上推出的 SwiftUI，震惊了我和一众 iOS 开发者。这种类似 jQuery 向 React 推进的革命，也终于在 iOS 开发中刮起浪潮。据说这个项目开发了三年，和它配套的 Data Flow 框架 Combine…]]></description><link>https://github.com/thoamsy/blogs.git/first-look-of-swiftui/first look of swiftui/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/first-look-of-swiftui/first look of swiftui/</guid><pubDate>Sun, 07 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;一个月前，WWDC19 上推出的 SwiftUI，震惊了我和一众 iOS 开发者。这种类似 jQuery 向 React 推进的革命，也终于在 iOS 开发中刮起浪潮。据说这个项目开发了三年，和它配套的 Data Flow 框架 Combine 可能是更长时间。&lt;/p&gt;
&lt;p&gt;个人认为 SwiftUI 带来的改变有以下几点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明式编程。对比 React 就知道，SwiftUI 也是类型的方式。有 &lt;code class=&quot;language-text&quot;&gt;@State&lt;/code&gt;，有类似 &lt;code class=&quot;language-text&quot;&gt;redux&lt;/code&gt; 的全局变量，也能实现 &lt;code class=&quot;language-text&quot;&gt;HOC&lt;/code&gt;。声明式编程给我们带来的思考方式的转变，让我在 UI 上更加关注全局而不是细节。如果说 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 带来的 props 修改是 React re-render 的推进器，那么 SwiftUI 中 @State 或者其他遵循了 &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/dynamicviewproperty&quot;&gt;Dynamic View Property&lt;/a&gt; 属性，都具有一旦更新，就运行协议中的 &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; 函数来 re-render 的能力.&lt;/li&gt;
&lt;li&gt;数据流的管理。社区中都提到 Combine 是一个和 RxSwift 非常类似的数据流管理工具。但是相比 RxSwift，官方制造肯定会更符合语言的使用习惯，并且在性能上有会有更多底层的优化（事实确实如此）。最重要的是，之前为了担心团队成员不懂 RxSwift 而无法推行优雅的代码的理由也不再成立, 因为 Combine 让它成为了 iOS 开发者的标配&lt;/li&gt;
&lt;li&gt;全平台统一。相比之前不同的 os，一个不同的命名前缀。UI，NS，WK 啥的，会让代码很分裂。而现在，SwiftUI 已经将 4 个平台的差异都在尽量抹平了。比如 Image 而不是 UIImage or NSImage。虽然说难免会有继续和一些 os 专属 SDK 交互的情况，但是它也可能让我们的心智消耗降到了最小。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过关于 body 的渲染的机制到底是和 React 那样，自顶向下开始渲染，还是和 Vue 那样，动态地检查呢？如果是 React 这样，又没有类似 &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt; 这种机制，这样就会导致 x 组件更新后，让 sibling 组件白白更新一次。目前根据 iOS 13 的 beta 来看确实会有这种问题：比如我在 App Store 的时候，有一个编辑推荐的轮播图。我在切换轮播图的时候，底下的热门 App 图片会出现闪烁的效果。如果网络不好的话，之前加载好的 app icon 又会出现短暂的白屏。不过这很可能只是 UIKit 的 bug 而已&lt;/p&gt;
&lt;p&gt;虽然我目前是一个 Web 开发者，但我还是很有兴趣加入这个 iOS 的浪潮。就像刚基础 html 的时候一样， SwiftUI 也提供了几十个基本的“组件”来作为最小单元供开发者使用，所以接下来要做的第一件事就是尽量将每一个提到的组件都是用一遍，了解 API 才能做到自己不慌，看其他人的教程的时候也不会蒙蔽这是啥。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[一些 Emoji 的有趣事情]]></title><description><![CDATA[想要正常的阅读本文，要求系统版本大于 iOS 12.1，或者 Android O。 101 大多数 Emoji 的 code 是大于 0xFFFF 的，也就说他们不位于 Unicode 的基本零平面上。在我看来，这主要的是差别是 首先 Emoji 是字体不是图片，在 Apple…]]></description><link>https://github.com/thoamsy/blogs.git/emoji/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/emoji/</guid><pubDate>Sun, 19 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;想要正常的阅读本文，要求系统版本大于 iOS 12.1，或者 Android O。&lt;/p&gt;
&lt;h2 id=&quot;101&quot;&gt;&lt;a href=&quot;#101&quot; aria-label=&quot;101 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;101&lt;/h2&gt;
&lt;p&gt;大多数 Emoji 的 code 是大于 0xFFFF 的，也就说他们不位于 Unicode 的基本零平面上。在我看来，这主要的是差别是&lt;/p&gt;
&lt;p&gt;首先 Emoji 是字体不是图片，在 Apple 的系统里由 Apple Color Emoji 字体支持。虽然内部很可能是一种位图格式（不是矢量），但是在它呈现出来的时候我们会认为它是字体。&lt;/p&gt;
&lt;p&gt;世界 Emoji 日是每年的 &lt;strong&gt;7⃣️🈷️🔟7⃣️&lt;/strong&gt;，这是因为苹果在 2001 年发布 iCal 的日子就是这一天，而相对应的就是 日历 📅 上的日期。&lt;/p&gt;
&lt;p&gt;最初的 471 个 Emoji 是专门为了日本用户提供的，因为日本早期的手机里就内置了 emoji，而 Apple 的目标也是兼容软银的。但是不同的厂商的 emoji 不一样，也可能不相互兼容。这样就导致不同手机在短信沟通的时候可能无法显示对方的 emoji。这样看来，Apple 也算是统一了 emoji 的市场。&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/e47dc09f4088796db2c421b2b6262014/81c33/emoji-comparison-2006-2018-softbank-emojipedia.jpg&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 62.695924764890286%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;251\&apos;%3e%3cpath d=\&apos;M222 53c0 2-2 3-4 3-2 1-2 3-1 3v5c1 2 2 2 6 2 5 0 7-2 6-6v-2c2-2 1-3-1-3s-3 0-3-2c-2-2-3-3-3 0m39 1c-6 6-8 9-4 14 5 5 19 5 22-1 3-4 2-7-3-11-6-5-10-5-15-2m-87 33c-3 2-4 4-4 8l-3 5c-7 5 7 10 19 7 6-2 7-4 3-7-2-2-3-3-3-6 0-6-6-9-12-7m45 0c-3 2-5 6-5 8 1 2 0 3-2 5-4 3-4 4 1 6 5 3 15 3 18 0l3-1c2 0 2-3-1-5l-3-6c0-6-6-9-11-7m45 0c-3 2-5 6-3 9l-2 3c-4 2-5 4-2 6s6 3 6 1l3-1v2c-2 1-1 1 3 1 5 0 11-2 12-4s-1-5-3-5c-1-1-2-2-1-4 0-2 0-4-3-6-3-3-5-4-10-2m-134 3l-1 4-1 2-2 2c0 2 8 5 9 3h2c3 0 5-3 3-4l-2-4c0-3-5-5-8-3m222 4c0 1 0 2-2 1-4-1-7 11-3 12h17c0 1 5 1 6-1 2-1 2-2 1-4-2-5-5-9-6-7h-5c0 2-3 1-6-1-2-2-2-2-2 0m-38 2l1 2 2 1 1 1h-9l1-1c3-2 2-3-1-3l-3 1-3 2c-4 3-4 4 0 6 3 2 4 2 5 1h15c5-2 5-4 0-6l-3-4-4-1c-2 0-3 0-2 1m-4 27l-2 4c-2 1-3 3-3 6 0 4 1 6 2 3 2-3 10 1 10 5 0 2-7 2-9-1-1-2-5 0-7 3-2 4 1 5 13 5 10 0 12-1 12-2 0-3-4-7-6-7-1 1-2 0-2-1l1-2c4 2 4-6 1-9-2-2-4-2-7-2l-2-2c-1-2-1-2-1 0m41 2v3c-1 2-2 7-1 9v3c-3 1-5 6-4 7 1 2 14 2 16 0l2 1h4c4-1 4-5-1-7-3-3-4-4-1-3l1-4c0-6-3-9-9-9h-7m-223 9c-3 6-2 7 6 7 7 0 8-1 5-7-2-4-3-4-5-4-3 0-4 0-6 4m224 28c-3 2-4 5-1 7v2l-1 3-3 5c-4 4-5 5-3 8 1 2 2 2 14 2 13 0 14 0 15-4 1-2 0-3-2-6l-5-5-1-4 1-2 3-2-3-2c-2-3-9-3-14-2m-42 4l-3 2-2 4v2c2 0 1 2-1 2l-3 6c0 1 1 2 3 2 3 0 3 0 2-1s-1-1 1-2c2-2 5-2 5-1h3c3-1 3-1 3 1v1l4 1 1 1c3 0 3-4 0-7l-3-5c0-5-5-8-10-6m-138 38c-5 6-7 17-5 19 3 2 8 3 8 1l1-1h4l3 1c2 2 6-1 7-4s-3-15-6-18c-4-2-10-1-12 2m45-1c-3 3-7 15-6 18 0 2 3 4 6 3h9c1 2 6 0 8-3s-1-13-5-18c-3-3-9-3-12 0m47-1c-3 1-4 4-4 8s1 6 2 4l5-1 5-1h2c4 6-6 12-11 7-3-3-4-4-6-2-2 3 0 7 3 7l4 2c2 0 2 0 1-2l1-1 1 2 2 1 1-1 1-2 1 1 3 1c2 0 6-3 6-5l-2-3-2-6c0-8-5-12-13-9m45 1c-3 2-6 9-4 12h2c1-1 1-1 1 1l1 2 1-2c-1-2 0-2 3-2h5c3-1 2 4-1 6-3 3-5 3-8-1-4-2-7-2-8 1-1 4 7 9 9 6 0-1 1-2 2-1v1c-1 1 0 1 4 1 8 0 13-6 8-9-2-1-3-3-3-6 0-7-6-12-12-9m46 0c-3 0-6 5-6 10l-2 6c-1 3-1 3 1 6 3 2 7 3 7 1 0-1 1-2 2-1v1c-1 1-1 1 1 1s3 0 2-1l1-2 2 2c0 2 2 1 5-1 4-3 4-6 1-7-2-1-3-2-2-5 1-7-4-11-12-10m-225 6c-2 2-3 6-3 9 1 1 2 2 6 2 6-1 8-2 6-7-2-6-6-7-9-4\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/e47dc09f4088796db2c421b2b6262014/f2fbe/emoji-comparison-2006-2018-softbank-emojipedia.webp 200w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/e227a/emoji-comparison-2006-2018-softbank-emojipedia.webp 400w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/0cbce/emoji-comparison-2006-2018-softbank-emojipedia.webp 800w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/6bc95/emoji-comparison-2006-2018-softbank-emojipedia.webp 1200w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/ded3f/emoji-comparison-2006-2018-softbank-emojipedia.webp 1600w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/95ebb/emoji-comparison-2006-2018-softbank-emojipedia.webp 1914w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/e47dc09f4088796db2c421b2b6262014/f544b/emoji-comparison-2006-2018-softbank-emojipedia.jpg 200w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/41689/emoji-comparison-2006-2018-softbank-emojipedia.jpg 400w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/a296c/emoji-comparison-2006-2018-softbank-emojipedia.jpg 800w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/c35de/emoji-comparison-2006-2018-softbank-emojipedia.jpg 1200w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/8179c/emoji-comparison-2006-2018-softbank-emojipedia.jpg 1600w,
/blogs/static/e47dc09f4088796db2c421b2b6262014/81c33/emoji-comparison-2006-2018-softbank-emojipedia.jpg 1914w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/jpeg&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/e47dc09f4088796db2c421b2b6262014/a296c/emoji-comparison-2006-2018-softbank-emojipedia.jpg&quot;
          alt=&quot;emoji comparison 2006 2018 softbank emojipedia&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一篇文章，介绍了&lt;a href=&quot;https://blog.emojipedia.org/apple-emoji-turns-10/&quot;&gt;Emoji 十年的变化&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;肤色&quot;&gt;&lt;a href=&quot;#%E8%82%A4%E8%89%B2&quot; aria-label=&quot;肤色 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;肤色&lt;/h2&gt;
&lt;p&gt;Emoji 或者说 Unicode 其实是支持合成的，比如几个字符连起来就能成为一个新的字符，最为常见的就是肤色了。&lt;/p&gt;
&lt;p&gt;🏻🏼🏽🏾🏿 在 Unicode 7 中引入了五种肤色字符，越后面的越黑。
这五个 emoji 的 code 分别对应 &lt;em&gt;0x1f3fb, 0x1f3fc, 0x1f3fd, 0x1f3fe, 0x1f3ff&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;支持肤色的 emoji 和 肤色的 emoji 放在一起，就能形成一个有色人种的 emoji 。
就比如一个黄皮肤男人 👨 &lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 和白色的 🏻 组合在一起，就变成了白人 👨🏻。值得一提的是，这里的默认颜色并不代表是&lt;strong&gt;黄种人&lt;/strong&gt;，而是特意使用一种不像任何人种的颜色，其实就是普通 emoji 小黄脸的颜色。&lt;/p&gt;
&lt;p&gt;在 JS 中可以这样合成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;\u{1f468}&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;\u{1f3fb}&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着除了肤色之外，emoji 还能组合 👩‍👩‍👧‍👧&lt;/p&gt;
&lt;h2 id=&quot;组合&quot;&gt;&lt;a href=&quot;#%E7%BB%84%E5%90%88&quot; aria-label=&quot;组合 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;组合&lt;/h2&gt;
&lt;p&gt;要想让 emoji 能够组合，需要在想组合的字符之间插入 &lt;em&gt;0x200d&lt;/em&gt;。这是一个不可见的控制字符，打印出来就类似空字符串，可以把它理解成一种神奇的胶水字符。&lt;/p&gt;
&lt;p&gt;👨👩👧 这三个可以合成 👨‍👩‍👧，也就是一个男人，一个女人，一个小孩组成的家庭。&lt;/p&gt;
&lt;p&gt;但是这里一个有意思的点是，它不仅仅支持黄皮肤的 emoji 合成，如果你尝试把 👨 改成 👨🏻 的话，也是可以得到 👨‍👩‍👧。&lt;/p&gt;
&lt;p&gt;再举个例子，🏳️‍🌈 你猜是由哪些 emoji 组成的？🏳️ + 🌈&lt;/p&gt;
&lt;p&gt;那么 🏴‍☠️ 呢？🏴 + ☠️&lt;/p&gt;
&lt;p&gt;接着，在 unicode 11 中又支持了发型，目前对应 iOS 12.1 的版本。它可以在肤色的基础上，赋予人发型。举个例子，这个 emoji：👩🏻‍🦳
就是由一个 👩 + 🏼 + 🦳 组成。
发型一共有几种，分别是：
Red Hair 🦰, Curly Hair 🦱, Bald 🦲,White Hair 🦳
对应到 &lt;code class=&quot;language-text&quot;&gt;0x1f9b0—0x1f9b3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以你希望一个秃头黑人的话，就可以这样。这里指的说明会的一点：&lt;strong&gt;肤色和生物之间并不需要 0x200d&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;\u{1f468}\u{1f3ff}\u{200d}\u{1f9b2}&apos;&lt;/span&gt; 👨🏿‍🦲&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;放上一张全家福&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/99e705c81de4f4b392716c383b62ae53/4aca8/apple-new-emoji-hair-options-2018-emojipedia.jpg&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 100.05%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;400\&apos;%3e%3cpath d=\&apos;M231 19c-6 2-11 14-10 20 1 4 9 12 13 12 5 1 11-3 14-9l3-4-2-8c-1-7-2-9-9-12-4-1-5-1-9 1m52-1c-4 1-9 7-9 12l-1 5c-2 0 0 6 2 8 7 8 9 9 14 8 7-1 16-13 13-16l-1-5c0-5-3-9-8-11-4-2-5-2-10-1m51 0c-5 2-8 7-9 14s-1 7 2 11c7 11 17 11 24 0 3-4 3-4 2-11-2-12-10-18-19-14m-156 2c-3 1-6 5-7 9l-1 6c-2 3-1 5 5 11 4 4 6 5 9 5s3 0 2-1c-2-1-2-1 0-2 4-1 5-1 3 1l-1 1c2 0 6-3 9-8 2-3 2-9-1-16-1-3-1-3-3-1-1 1-1 1-1-1 1-4-3-7-5-4l-2 1h-2l-2 1v-2h-3m6 5l-2 1c-2 0-5 3-3 4 2 0 1 2-1 2s-2 0 1 2l4 3h-3c-2 2-5 1-5-1v3c0 6 2 7 8 7 3 0 3 0 2-1-3 0-5-2-3-2v-2l2 1 2 1 2 1c-1 1 0 1 2 1 3 0 6-4 4-5v-1c1 0 2-3 0-3l-1 2c-1 2-3 1-4-2v-5c3-2 3-2-1-5-2-1-3-2-4-1m45 36v1h-1c-3 0-6 3-6 9l-2 7c-2 6 5 17 12 19 6 2 16-4 16-10l1-1c1 0 2-7 1-8l-1-5c0-4-2-10-5-11h-2c1 1 1 2-2 2l-1-1c1-1 0-1-3-1l-5-1h-2m54 0c-7 1-10 6-11 18-2 9 6 20 14 20 6 0 9-2 13-9 3-4 5-11 3-11l-1-5c-1-7-2-10-8-12-4-2-6-2-10-1m48 1c-5 3-7 7-7 13l-1 4c-4 0 4 15 9 18 6 4 17 0 19-6l2-4V76c-2-10-4-13-11-15-5-1-6-1-11 1M170 77c-1 5-1 10 1 10l1 2c1 4 6 8 11 9 6 0 11-2 13-8l3-4c2 0 1-7-2-8-2 0-5 9-3 10v2h-2c1 2-1 3-4 3l1-1c1-2 1-2-1-3-1 0-2-1-1-2h-1l-2-1c-2-2-3-1-3 1v2c-2 0-1 2 1 3s2 1 0 1-2 0-1 1l1 2-5-3 1-1 1-1-2-1h-2l-1-4v-4c-2 0-2-1-2-5 0-6 0-6-2 0m-43 30c-4 1-11 9-11 11l-1 3-1 11c0 13-1 13 19 13l16-1c2 0 3-8 3-15 0-9-3-16-9-19l-3-2c-1-1-11-2-13-1m103 0c-4 2-8 6-11 11-3 6-3 20-1 24l2 3h16l17-2c1-1 3-10 2-16-1-14-15-25-25-20m52 0c-9 3-15 15-14 28 1 10 0 10 19 10 20-1 19 0 19-14 0-8 0-10-2-13-4-8-15-13-22-11m52 0c-3 0-12 9-12 11l-1 3c-2 2-2 18 0 21l2 3h16l17-2c2-1 3-10 2-17-1-9-4-14-11-17-5-3-7-3-13-2m-281 2l1 1 1 1-2 2-2-2v-2l-8 9-2 3v2c2 0 2 0 1 2l-2 6c0 4 0 5 1 3l1-1 1 3v4c-2 0-2 1-1 3 2 2 27 2 29-1l2-4 1-1v4c-2 3 0 4 2 2a41 41 0 0 0 1-20c-1-4-1-4-3-3v-3c0-2 0-2-1-1s-1 1-1-1c0-3 0-4-5-1h-5l1-1c4 0 4-1 1-3l-1-1c2 0 0-2-2-2l-2 1-2 1-2-1-1-1-1 2m125 0l2 2v2c-1 1-5 0-4-1l-1-1c-1 0-2 1-1 3s1 2-1 4c-1 1-2 2-2 0l-2-1-1 2c1 1 0 2-1 3v1c2 0 3 2 1 2l-2 2 1 2 1 1-1 1h-2l2 1c2-1 3 3 1 4l-2 1h1l2 3v3c-2 1 3 1 17 1l10-1h2c3 2 4-1 4-8 0-5 0-6-2-6l-3-1 3-1h3l-3-2-2-2h1l2-1-1-1-3-3c0-3 1-4 2-1 1 2 1 2 1 0l-1-2-1-1-1-2-2 1-1 1-2 1-2 1c-3-1-3-2 0-2s4-3 1-4c-1-1-12-2-13-1m-127 9l-2 4h4c1 1 1 1-1 1h-2l2 1c2 1 3 2 2 4l-2 2-2-2c-1-2-1-2-2-1l-1 1-1 1 1 2c1 0 2 1 1 2 0 4 5 9 10 9 8 0 15-9 12-14-2-2-2-2-2 0-1 2-4 3-4 1-1-3 0-5 2-5h2l-2-1c-2 0-2 0-1-1 1-2-3-5-8-6-3 0-4 0-6 2m77 0h-1c0-1-1-1-2 1-3 2-3 3 0 2l2 1c1 1 0 1-1 1-2 0-2 0 0 1 2 0 3 2 2 4s-4 3-4 1l-2-2c-2 0-2 1-2 3l2 4 2 3c0 2 6 5 10 5 5-1 8-3 6-4v-1h2l1-3c2-2 2-4 1-6-1-1-2-1-3 1-1 1-1 1-3-1s-1-4 2-4c2 0 2 0 0-1-3-1-3-1-1-2 2 0 2 0-1-3-5-2-10-3-10 0m53 0c-2 1-3 4-1 4v2l-1 1c2 0 2 0 1 3-2 2-3 3-5 0v3c0 6 2 7 5 6 2 0 3-2 3-2-1-2 3-2 4 0l-2 1c-1 1-1 1 1 1 3 0 4 1 1 3v1c2 0 5-3 4-4l1-1c1 1 1 1 1-1v-2c1 0 2-4 1-5h-1c-2 3-4 2-4 0s0-2-1-1h-1l1-2 1-2 1-2c2 0-1-3-4-3v1c1 1 1 1-1 1s-2 0-1-1c1-2 1-2-3-1m-53 36c-8 3-13 8-11 14l1 9 2-4c2-8 3-9 13-9l10 1c1 2 3 11 2 14l1 2c1-2 3-14 2-17-1-7-13-12-20-10m103 0c-6 2-11 7-11 11a1985 1985 0 0 1 1 16l2 4c2 4 7 8 12 8 6 0 9-2 13-8 2-5 4-16 3-22s-12-11-20-9m-170 1l2 2 2 1c1-1 2 0 3 1 1 2 1 2-1 2l-2-1h-4c0-3-2-2-2 0-1 2-1 2-3 1s-2-1-1-3c2-2 2-3-1-3l-1 3-1 3-1-2c0-3-1-4-3-1v1l-2 2c-3 3-4 15-1 15l1-2 2-6 1-4h19l1 4 2 3 1 1c-2 2-2 9-1 9l1-4 1-2 1-6-1-6c-2 0-3-2-2-3 2-1 0-3-4-4l-3-1-3-1c-2 0-2 0 0 1m221 0l-5 1c-2 1-6 9-5 10v8c0 4 1 6 2 7l1 3c0 2 6 8 9 9 11 2 19-7 19-23l1-9-5-3c-5-4-12-5-17-3m-94 1l1 2c1 1 0 4-1 4l-1-2c0-2 0-2-1 0s-2 3-4 2-2-1-1-2c1-2 1-4-1-4-1 0-2 1-2 3l-1 3-1-2v-3c-1 0-4 3-4 5l-1 1c-1 0-2 3-1 5v1l-1 5c0 5 4 14 6 14l1 1c0 4 13 4 17 1 4-4 7-12 7-20l-1-9-1 1-1 1-1-2c1-1 0-2-1-3-3-1-3-1-2 1v3c-1 0-2-1-2-3 0-3-3-6-3-3m145 1c-3 0-8 4-9 6-2 5-1 18 1 23l3 4 3 3c4 2 13 3 13 1l3-2c1 0 3-2 3-4l3-4c2-3 2-19 0-22-5-5-11-7-20-5m-156 10h-2c-1 2 0 2 3 2s3 0 2 3c0 4-1 5-4 5v-3c0-2 0-2-2-2-2 1-2 3-1 7l2 2 1 2 1 2 1-1h2l7 1c4-1 5-1 5 1v1l1-1 2-10-1-4c-1 0-2 1-1 2 0 2-3 5-4 3l-1-3v-3c-2-1-1-2 2-2s3 0 2-1c-2-1-2-1 0-1h3l-3-1h-5c-1-2-10-1-10 1m1 36c-4 0-5 2-4 3 1 2 0 4-2 4-2-1-2 0-3 2l-2 4c-2 3-2 22-1 22 2 2 23 2 30 2 6-1 7-1 7-3 1-4-1-19-3-23-2-5-8-11-10-11l2 3c3 2 3 3 2 4h-3l-4-1h-3l-1-1-2-1-1-1c-2 0-2-1 0-3h-2m-129 3c0 3-3 6-5 5l-5 13v8l1 5 5 1h30c2 0 3-1 3-6 0-7-3-21-5-21l-1-2c-1-2-1-2-1 0s0 2-4 1l-7-2c-6-1-8-2-8-4-1-2-3-1-3 2m72-2l-1 7-1-1c-3-4-8 13-7 25v4l9 1c8 0 26 0 28-2 2 0 1-14 0-19-3-8-10-18-13-16l2 3c4 2 4 4 0 4l-6-2c-3 0-4-1-4-2h-2l-2-1c1-1 0-2-1-2l-2 1m105 0v2l-1 2-1 1c-4-2-9 16-7 25 0 5 1 5 19 5 20 0 19 0 19-8 0-9-2-17-5-21l-6-6 1 2v2c-3 2-14-1-13-3h-1l-2-1h-3m51 1c-2 2-2 2-1 3l1 2-2-1c-2-3-7 13-7 23 0 8 0 8 21 8 13 0 16-1 17-2 2-2 0-16-2-23-2-5-6-10-6-7 0 2-1 2-3 1h-7l-2-1-1-1h-1l-3-2c-2-2-2-2-4 0m53 0l-1 3c0 3-3 6-3 3l-3 4c-2 3-2 7-3 15v10h38v-8l-2-13c-2-8-6-14-6-9l-3 1-3-1h-3l-4-1-3-1-2-2c0-2-1-3-2-1m-278 8v5c2 1 2 3 2 4-1 2-5 3-5 0h-1c-2 2-1 8 1 8l1 1c0 2 6 5 9 5 5 0 12-8 10-13 0-2 0-2-2 0-3 2-5 0-3-3 1-3 1-3-2-3l-3-1c-1-2-7-4-7-3m71 2c-1 1 0 1 1 2 2 0 2 0-1 1l-3 1h2c4 0 5 1 4 4s-4 3-4 0c0-2 0-2-2-1s-2 3 1 9c2 3 9 6 12 5 4 0 9-6 9-10 0-3-1-5-2-2l-2 1c-2 0-3-4-2-6 1-1 0-2-2-1l-2-2-3-1-2-1c-2-1-3 0-4 1m57 2l-2 1h-2l2 1c2 1 3 3 0 5h-2l-2-1v3l1 2 1 2 1 1 1 2h1c0-1 1-2 2-1l2-1c-1-2 0-2 2-2s2 0 1 2c-1 1-1 1 1 1h2l1 1 1-1 1-2v-3c2 0 4-2 2-4h-1c-1 3-4 2-4 0l-1-2-2-2-2-2c0 2-2 3-2 1l-2-2v1M67 251c-1 1-18 2-19 1h-1v3h-1c-2-4-3 14-1 18l1 3 1-3 1-4c2-2 1-3-1-2v-1c2-3 4-2 3 1 0 4 2 5 4 2 2-2 2-3 0-4l-1-1 3-1-4-1c-3 1-4 0-4-1l1-3h3l10 2c8 1 8 1 9 5s0 8-1 11c-2 4 0 3 2-1 5-10 1-29-5-24m66 0h-5l-5 1h-2c-3-2-5 4-5 13 0 10 3 13 3 4l1-12a613 613 0 0 1 17 2c4-1 7 3 6 10 0 6 0 6 1 4 3-5 2-16 0-20-2-2-2-3-6-3l-5 1m47 0l-4 1c-6 0-9 15-4 24 3 5 3 5 6 4s5-1 3 1l-3 1h-1c2 2 8 4 11 3 3 0 10-7 10-10l1-1 1-10c0-12-1-13-11-13h-9m47 0l-1 1-2 2-1 2c-2-1-3 12-2 15 2 8 9 15 15 15 5 0 12-5 12-9l2-3c2-2 2-16-1-21l-1-3h-11l-10 1m70 0h-9l-9 1h-2c-1-3-4 4-5 11 0 14 6 23 16 23 6 0 8-2 13-10 3-6 3-18 0-23-2-3-4-4-4-2m38 0c-9 1-10 2-11 13-1 7-1 7 3 13 7 12 18 12 25 0 3-6 3-7 2-13 0-7-2-13-3-13h-16m-161 10v4c1 1 1 1 1-1s4-4 6-2l-1 8c-1 1-4 0-4-3h-2l-1 1 1 3h1l1 1c-1 1 0 1 1 1v1c-3 2-2 3 8 3h8c1 1 1 0 1-1 0-2 0-2 1-1h1l-1-3v-2c2-2 0-6-4-6l-3-1 2-1 2-1-4-1c-4 0-4 0-2 1h-6l-4-1c-1-1-1 0-2 1m2 40c-1 5-1 6-5 10-5 4-6 10-2 9 1-1 2 0 2 1l3 5 2 3 1 2c3 2 15 2 15-1 0-2 4-5 6-4l1-1h1l1-2 1 1c2 3 2 1 2-4-1-6-3-8-10-10-8-3-12-6-15-10l-3-4v5m51-1c0 5-4 11-7 11-1 0-3 6-2 9 0 1 0 2 1 1s5 2 5 4l3 3c2 1 2 1 1 2l3 1c8 2 13 1 13-2 1-2 5-6 7-5l1-1h1v-7c-1-3-2-4-6-6-10-4-14-6-17-10l-3-4v4m-107 1c0 4-1 5-4 9-4 3-5 5-5 8-1 3 0 6 1 3 1-2 4-1 4 2l3 4 2 3 5 1c9 1 10 1 10-1l1-2 3-2 3-2 1-2 1-2 1 1 1 3c2 1 0-8-2-11-4-5-13-4-11 2 1 2 3 3 4 0h2c3 4-3 13-8 14-6 1-13-4-13-8l-1-3c-1 0-1-2 1-4h1c0 3 2 3 4 2 2-3 1-5-3-5-2 1-3 0 0-2l1-3 6 2c3 1 6 2 7 1l-3-2-7-6c-5-5-5-5-5 0m159 0c0 5-5 13-7 11l-2 3v8c1-1 1-1 1 1h2c2-1 2-1 3 1l3 4 1 2 9 2c5 0 7-1 7-4l2-1 3-2 4-1c3 1 3-3 0-8l-1-4-2-1c-6 0-18-7-21-12l-2-3v4m51 0c0 5-2 9-6 11-3 2-5 7-2 9l1 3c0 2 2 1 2-1l2 2 3 3 1 2c-1 2 0 2 4 3 7 0 12 0 11-2l2-1v-2c2 0 4-3 4-5 0-3 1-2 2 1 0 4 0 5 1 3l2-2 1-3-1-4-1-3-2-3-4-1-4-1c-2 0-12-6-12-7l-2-4-2-2v4m-279 1c0 3-1 5-4 9-6 5-6 6-3 9l6 7c4 5 5 5 10 5 4 0 5 0 6-3l4-4 2-4 2-2c1-2 1-2-1-5l-3-3c-4 0-17-8-18-11-1-2-1-2-1 2m1 7c-2 3-2 3 1 3l3 2-1 1-1 1c-1 2-4 2-4-1s-1 0-2 4c0 5 7 11 12 11 2 0 3-1 3-2l1-1c3 0 7-8 6-10 0-2-2-3-2 0-1 2-3 1-4-1s-1-2 1-4v-1l-4-2c-7-3-8-3-9 0m128 0c-3 0-4 2-2 2 3 0 3 3 1 6l-2 2-1-3c0-2-1-2-1-1-1 1 0 3 1 3v2l1 4 3 1 2-1c2 0 2 0 1-1-1-2-1-2 2-2s4 2 2 2l2 1c3 1 3 1 5-1 1-2 2-7 1-8h-1c0 3-4 2-4 0-1-3-7-7-10-6m-5 40c0 3 2 4 11 4 11 1 11 1 10 5s-1 4 1 4c1-1 1 0 1 2s0 2-1 1c-1-2-1-2-3-1v2c2 1 2 5 1 5h-2l-5 1h-7c-4 1-6 0-3-2v-1h-3l-1-7v-8c-1 0-2 2-2 5l-1 2c-2-1-2 4 0 7l3 4 3 4 2 1 3 2c5 2 14-3 15-9l2-2 1-4-1-4-1-1v-4l-1-4-7 1-11-2-4-1m49 5l-3 6c-2 0-1 6 1 9l2 2 3 5c7 6 16 4 20-4l3-4c2-1 3-8 1-8-2 1-4-5-3-8l-5-1c-5 1-10 0-16-2-1-1-2 0-3 5m52-1l-2 7c0 2 0 2-1 1s-1-1-1 2c0 8 10 18 18 16 3 0 10-6 10-8l1-3c3-2 4-8 2-8-2 1-2 0-3-4v-5h-8l-11-1-4-2-1 5m52-4l-2 6-3 5c-2 0-1 7 2 9l1 2c0 2 5 6 8 8 5 3 14-1 16-7l3-5c1-1 2-7 0-7l-2-4-1-5h-8l-11-1-3-1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/99e705c81de4f4b392716c383b62ae53/f2fbe/apple-new-emoji-hair-options-2018-emojipedia.webp 200w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/e227a/apple-new-emoji-hair-options-2018-emojipedia.webp 400w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/0cbce/apple-new-emoji-hair-options-2018-emojipedia.webp 800w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/6bc95/apple-new-emoji-hair-options-2018-emojipedia.webp 1200w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/ded3f/apple-new-emoji-hair-options-2018-emojipedia.webp 1600w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/b7abf/apple-new-emoji-hair-options-2018-emojipedia.webp 2000w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/99e705c81de4f4b392716c383b62ae53/f544b/apple-new-emoji-hair-options-2018-emojipedia.jpg 200w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/41689/apple-new-emoji-hair-options-2018-emojipedia.jpg 400w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/a296c/apple-new-emoji-hair-options-2018-emojipedia.jpg 800w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/c35de/apple-new-emoji-hair-options-2018-emojipedia.jpg 1200w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/8179c/apple-new-emoji-hair-options-2018-emojipedia.jpg 1600w,
/blogs/static/99e705c81de4f4b392716c383b62ae53/4aca8/apple-new-emoji-hair-options-2018-emojipedia.jpg 2000w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/jpeg&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/99e705c81de4f4b392716c383b62ae53/a296c/apple-new-emoji-hair-options-2018-emojipedia.jpg&quot;
          alt=&quot;apple new emoji hair options 2018 emojipedia&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而让我觉得骚的是，除了人支持肤色外，还有一些器官也支持了。🦵&lt;em&gt;0x1f9b5&lt;/em&gt;🦶&lt;em&gt;0x1f9b6&lt;/em&gt; 都能加上肤色。
另外还有新的 emoji：🦸‍♀️ 🦸‍♂️，它是由基本的超级英雄 🦸(0x1f9b8) 加上性别符号 ♂️ &lt;em&gt;\u{2642}\u{fe0f}&lt;/em&gt; ♀ ️&lt;em&gt;\u{2641}\u{fe0f}&lt;/em&gt;。另外，除了超级英雄外，还有很多支持性别区分的 emoji，比如超级坏蛋 🦹。&lt;/p&gt;
&lt;p&gt;还有 🧙🧚🧛🧜🧝🧞🧟🧗🧘 这些都支持和性别组合。
真的丧心病狂啊！&lt;/p&gt;
&lt;h2 id=&quot;unicode-120&quot;&gt;&lt;a href=&quot;#unicode-120&quot; aria-label=&quot;unicode 120 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unicode 12.0&lt;/h2&gt;
&lt;p&gt;在明年的 12.0 里面还会包括很多更有意思的内容。它偏向于 accessibility，所以多了很多和这方面有关的元素。比如&lt;strong&gt;坐着轮椅的白色男人&lt;/strong&gt;，助听器等等。也多出了手牵着手的 emoji，像这种白色的女人和黑色的男人握手 &lt;a href=&quot;https://emojipedia.org/woman-and-man-holding-hands-light-skin-tone-dark-skin-tone/&quot;&gt;👩🏻‍🤝‍👨🏿&lt;/a&gt;。除了异性之外，同性也有对应的 emoji，为 🌈 们提供骄傲。&lt;/p&gt;
&lt;p&gt;需要注意的是，握手如果是异性的话，左边的是女性右边的是男性，却没有左边是男性右边是女性的，这可能是出于对女性的尊重吧。然后再加上不同肤色的排列组合的话，就会多出 (!@#¥ 自己算吧 🌚）个看上去没上卵用的 emoji。&lt;/p&gt;
&lt;p&gt;关于更多 Emoji 12 的介绍，可以查看&lt;a href=&quot;https://blog.emojipedia.org/230-new-emojis-in-final-list-for-2019/&quot;&gt;这篇文章&lt;/a&gt;，这里面也出现了我提到的手拉手 emoji 的集合，让世界充满爱。&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt; 0x1f468&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[头条的对与错]]></title><description><![CDATA[今天在听最新一期 疯投圈 ，了解关于信息过载的问题，以及如何提升信息获取的效率。 URL…]]></description><link>https://github.com/thoamsy/blogs.git/toutiao/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/toutiao/</guid><pubDate>Sun, 12 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今天在听最新一期&lt;a href=&quot;https://castro.fm/episode/SpvCWf&quot;&gt;疯投圈&lt;/a&gt;，了解关于信息过载的问题，以及如何提升信息获取的效率。&lt;/p&gt;
&lt;p&gt;URL 在国内越来越罕见，今日头条，微信公众号这种中心化内容分发平台接管了大多数人获取知识的途径。&lt;/p&gt;
&lt;p&gt;不过我们会倾向于一种认识，微信公众号属于用户主动选择，在质量上会有一定的保证，而头条则是&lt;strong&gt;被动选择&lt;/strong&gt;，它推什么用户就看什么。&lt;/p&gt;
&lt;p&gt;久而久之，我会认为头条的用户群体属于较为低端的人群，他们没有能力去找自己想看的东西，愿意花大把时间刷刷一些低质量内容。当时我甚至认为头条是一个邪恶的公司，浪费了大量人群的时间，没有社会责任。&lt;/p&gt;
&lt;p&gt;不会这期播客分享了张一鸣一些有趣的故事，说到他其实从来就不是头条和抖音的受众人群。他甚至表达过这样一个观点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人可以分为两类，一类是追求效率的少数精英，他们在现实生活中实现自我认知。另一类则是需要围绕一个东西打转的人，不管他们是爱情，小说，宗教还是今日头条，他们都会沉迷其中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以说，他其实一直都知道自己做的东西的性质，只不过前者对于大多数人来说太难入手，太难掌握了。商业也从来不是站在少数人一边。他其实是创造了一个为这些人获取信息的方式，因为如相比什么都不做，头条至少还提供了一些满足感和知识给他们。而那些抱怨头条质量低的人，完全可以不关注它，远离它，自己去构建内容获取体系。&lt;/p&gt;
&lt;p&gt;但是，需要赞叹的是，张一鸣能把一个自己并不“爱用”的 app 做到如今&lt;strong&gt;宇宙条&lt;/strong&gt;的地位，确实伟大。 这是一种多么理性而非感性的行为。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React 的变革者—Suspense]]></title><description><![CDATA[在 16.6 发布的时候，React 为我们带来了  。虽然目前的作用仅仅是用于  Code Splitting ，和 Dan 所 演示 的还有些差别，但这依然是个让人兴奋的开始。这意味着，在不远的将来，那些我们曾经习以为常的代码，将会随然 React…]]></description><link>https://github.com/thoamsy/blogs.git/suspense-so-cool/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/suspense-so-cool/</guid><pubDate>Fri, 05 Apr 2019 20:50:00 GMT</pubDate><content:encoded>&lt;p&gt;在 16.6 发布的时候，React 为我们带来了 &lt;code class=&quot;language-text&quot;&gt;Suspense 和 lazy&lt;/code&gt;。虽然目前的作用仅仅是用于 &lt;a href=&quot;https://reactjs.org/docs/code-splitting.html&quot;&gt;Code Splitting&lt;/a&gt;，和 Dan 所&lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;演示&lt;/a&gt;的还有些差别，但这依然是个让人兴奋的开始。这意味着，在不远的将来，那些我们曾经习以为常的代码，将会随然 React 的大步迈进，而被人遗忘。&lt;/p&gt;
&lt;p&gt;在现实场景中，开发一个具有异步调用功能的组件可以说是家常便方。我们已经习惯了先定义好 &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;，并在 &lt;code class=&quot;language-text&quot;&gt;componentDidMount&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 中写好调用异步的逻辑。比如下面的例子就是一个非常常见的例子：&lt;/p&gt;
&lt;h2 id=&quot;class-的方式&quot;&gt;&lt;a href=&quot;#class-%E7%9A%84%E6%96%B9%E5%BC%8F&quot; aria-label=&quot;class 的方式 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class 的方式&lt;/h2&gt;
&lt;p&gt;这个组件的功能很明显，就是在组件第一次挂载的时候，调用异步的逻辑：显示 loading，发送请求，请求成功返回就对数据进行处理并渲染，请求失败就告知用户失败的原因。并将 loading 展示。并且在 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt; 更新的时候继续调用。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AwesomeComponent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;derivedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;derivedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;componentDidUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;prevProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetchData &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; prevProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;derivedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; loading &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Loading…&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Error: &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Data: &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;fetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prefixUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;?query=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AwesomeComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，如何仔细思考的话，我们会发现那个 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 的分支其实永远不会被调用，因为 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt; 并不会被改变。接着我们会尝试将 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt; 由之前的 instance method 改为直接在 render 中声明。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;fetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prefixUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;?query=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AwesomeComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种就能保证每次 render 的时候，我们都能拿到最新的 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt;，然后 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 就能更新了对吧？
这没错，但是如果这个组件还存在其他 props，存在其他 state，并因为这些变量的变化导致 Parent re-render 的话，fetchData 也还是更新了。并带来无用的调用。&lt;/p&gt;
&lt;p&gt;所以为了解决这个问题，我们还需要改找我们的写法，将 &lt;code class=&quot;language-text&quot;&gt;this.state.query&lt;/code&gt; 也作为一个 props 传递给子组件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AwesomeComponent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;derivedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;derivedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;componentDidUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;prevProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; prevProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;derivedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;fetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prefixUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;?query=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AwesomeComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而我们将这个 query 传递给子组件，仅仅是为了让 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 能够没有 bug 的运行。&lt;/p&gt;
&lt;p&gt;通过艰难的 class 使用之旅，我们发现了下面几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;👎 重复的模板代码—影响开发体验
我们写大量的模版代码来处理各种状态：请求之前开 loading，接着触发请求。在请求成功后做什么，在失败后做什么。同时还要关闭 loading。如果每一个组件都要这么写的话，会让人崩溃的。&lt;/li&gt;
&lt;li&gt;👎 对生命周期的强依赖—影响开发体验
为了保证 props 更新后，我们能及时的重新发送请求，获取最新的数据，我们需要在 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 中写 &lt;code class=&quot;language-text&quot;&gt;componentDidMount&lt;/code&gt; 类似的逻辑。如果还存在其他场景的话，会让 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 中包括越来越多的 if 分支，变得非常复杂&lt;/li&gt;
&lt;li&gt;👎 传递“无用” props—破坏封装
相信你已经发现了，我们将 query 作为 props，仅仅是为了 “diff”，而不是我们期望它作为数据流的初心。随着组件功能越来越强，我们就需要传递更多的 props 仅仅用来 “diff”&lt;/li&gt;
&lt;li&gt;👎 闪烁的 loading—影响交互体验
如果用户的网络足够快，让 loading 展示几十毫秒就消失比不展示的体验还要糟糕，还会让人觉得你的 app 很慢很卡顿。（思考一个场景，每次你和 Siri 互动，它都要先说“请稍后”）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很显然，传统的 class 带来的问题已经非常明显，如果一个新手想要接触 React 的话，他很可能会因为这些而远离 React。
接下来我们将尝试解决这些问题。&lt;/p&gt;
&lt;h2 id=&quot;context&quot;&gt;&lt;a href=&quot;#context&quot; aria-label=&quot;context permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Context&lt;/h2&gt;
&lt;p&gt;第一个问题，我们很容易想到用 Context 或者说 redux 来解决这个问题。我们可以将这些逻辑用 Context 包装好，或者是通过 redux 的中间件，可以将发送请求，请求成功和请求失败的逻辑做一定程度上的复用。这里有一篇&lt;a href=&quot;https://blog.logrocket.com/data-fetching-in-redux-apps-a-100-correct-approach-4d26e21750fc&quot;&gt;文章&lt;/a&gt;就提到了类似的方法。确实，Context 和 redux 可能能帮助我们解决代码复用的问题，但是它也可能带来更多问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更高的学习门槛&lt;/li&gt;
&lt;li&gt;redux 还是存在很多模板代码的&lt;/li&gt;
&lt;li&gt;滥用 context 可能会让代码维护起来更加困难&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;hooks&quot;&gt;&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h2&gt;
&lt;p&gt;我们再看看 hooks，它是 React 的一个巨大迭代，那么它能否改进我们的开发体验呢？我们看看效果：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setQuery&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prefixUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;?query=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;query&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AwesomeComponent fetchData&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;AwesomeComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fetchData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setLoading&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setError&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;startFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;startFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; loading &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Loading…&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Error&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hooks 的出现成功解决了两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;useEffect 让干掉了 &lt;code class=&quot;language-text&quot;&gt;componentDidMount&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 冗余的逻辑。&lt;/li&gt;
&lt;li&gt;我们不再需要往 AwesomeComponent 中传递 query，维持了组件的封装行性，减少无用的 props&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而只要我们愿意的话，还能将第一个问题：复用问题也一并解决。 Custom Hooks 可以轻易做到。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 在我们的场景中，因为 api 是会改变的参数，所以我们只需要将它加入依赖数组中。&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 如果是其他的形式，比如要求 id 改变而改变的话，可以自行调整。&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useFetch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setLoading&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setError&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;startFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;startFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这么一来，我们已经把 class 模式中，前三个问题全部解决了。可以看到 hooks 的优势很明显。
但其实，class 还有一个问题我在上面没有提到。回顾一下代码：我们会在 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 中检测 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt; 是否改变了，并重新调用。但这里就引入了一个&lt;strong&gt;竞态问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt; 在第一次更新的时候，&lt;code class=&quot;language-text&quot;&gt;query = redux&lt;/code&gt;，然后请求发了出去。接着 &lt;code class=&quot;language-text&quot;&gt;query = vue&lt;/code&gt;，请求继续发出去。但是在上一个请求回来之前，vue 的请求抢先了一步返回，接着 redux 的请求才回来。这样就会导致数据变成了上一次的结果。&lt;/p&gt;
&lt;p&gt;而通过在传给&lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 的函数中的返回值，做一个&lt;strong&gt;状态调整&lt;/strong&gt;，我们就能做到这个。上面的代码可以改成：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useFetch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setLoading&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setError&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isMount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;startFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        isMount &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        isMount &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      isMount &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;startFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isMount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这种方式，如果 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt; 改变了话，就不会继续运行前一个 &lt;code class=&quot;language-text&quot;&gt;fetchData&lt;/code&gt; 带来的副作用，而仅仅关注最后的结果，也就解决了这个竞态问题 😄。&lt;/p&gt;
&lt;p&gt;另外，在 SPA 中，我们也会碰到发出一个请求后，用户又从这个 route 退出了，而对一个已经 unmount 的组件进行 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;，也存在一定的&lt;a href=&quot;https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html&quot;&gt;隐患&lt;/a&gt;。这在 class 的模式下，比较难解决，会让代码变得过于复杂，这里有一个 &lt;a href=&quot;https://gist.github.com/bvaughn/982ab689a41097237f6e9860db7ca8d6&quot;&gt;gist&lt;/a&gt; 描述了不可被取消的 promise 场景该怎么处理。而通过 Hooks，也很好地规避了这个问题的出现。&lt;/p&gt;
&lt;p&gt;使用 hooks 处理异步更具体的教程，可以&lt;a href=&quot;https://www.robinwieruch.de/react-hooks-fetch-data/&quot;&gt;看这里&lt;/a&gt;。值得一提的是，最近 dan 有了一个新的 &lt;a href=&quot;https://github.com/facebook/react/pull/15104/files&quot; title=&quot;PR&quot;&gt;pr&lt;/a&gt;，将 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 的 warnning 信息调整了一下，并在文档上专门有一块来介绍这个。&lt;/p&gt;
&lt;p&gt;虽然 hooks 看上去已经完美解决了，我们上面提到的三个问题，但它其实并不是 React 用来解决异步问题的终极方案，仅仅是一个过渡的选择。所以上面的代码还是有点小别扭：我们不能直接在 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 中写一个 &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; 函数，而是需要提前写好 &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; 函数的内容，并在 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 中间接调用它。&lt;/p&gt;
&lt;p&gt;这里的原因是 React 会去查看 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 里函数的返回值，以做一些 &lt;em&gt;cleanup&lt;/em&gt; 的操作。如果我们直接传递 &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; 函数的话，无论我们是否明确地写了 return，都会隐式的返回一个 &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;。这样会干扰 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 的 &lt;em&gt;cleanup&lt;/em&gt;。我们可以看看类似的截图&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/c1478/hooks-warning.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 25.23961661341853%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;101\&apos;%3e%3cpath d=\&apos;M0 51v50h399V0H0v51\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/f2fbe/hooks-warning.webp 200w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/e227a/hooks-warning.webp 400w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/0cbce/hooks-warning.webp 800w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/6bc95/hooks-warning.webp 1200w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/ded3f/hooks-warning.webp 1600w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/af5cf/hooks-warning.webp 1878w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/9ec3c/hooks-warning.png 200w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/c7805/hooks-warning.png 400w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/8ff1e/hooks-warning.png 800w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/6ff5e/hooks-warning.png 1200w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/2f950/hooks-warning.png 1600w,
/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/c1478/hooks-warning.png 1878w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/0d1016a45b249a8ed113b37b0f9d961d/8ff1e/hooks-warning.png&quot;
          alt=&quot;hooks warning&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么通过 Hooks 我们解决了哪些问题呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑复用轻松，提升开发体验 😉 — Hooks 本身就是函数，函数和函数之间传递是十分方便的。这和传统的 &lt;code class=&quot;language-text&quot;&gt;HOC，render props&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt; 比起来，直观了很多&lt;/li&gt;
&lt;li&gt;不再强依赖 React 生命周期，提升开发体验 👍 — &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 十分完美的解决了这个问题&lt;/li&gt;
&lt;li&gt;不再传递仅仅用来 “diff” 的 props，组件更加小巧好用&lt;/li&gt;
&lt;li&gt;闪烁 loading 的体验问题 😣—还是存在&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;suspense&quot;&gt;&lt;a href=&quot;#suspense&quot; aria-label=&quot;suspense permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Suspense&lt;/h2&gt;
&lt;p&gt;最后，我们需要看一下 Suspense 是如何救世的。在这之前先一起熟悉下，它目前最常见的用途就是：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Home &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;loading…&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*低版本 Route 这里可能会有一个 warning*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Home&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Suspense&lt;/code&gt; 的本质就是将异步资源对应的 &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt; 给 &lt;code class=&quot;language-text&quot;&gt;throw&lt;/code&gt; 出去。然后 React 会通过 &lt;em&gt;ErrorBoundary&lt;/em&gt; 一直往上找，找到最近的 &lt;code class=&quot;language-text&quot;&gt;Suspnse&lt;/code&gt; 为止。这个时候会用 &lt;code class=&quot;language-text&quot;&gt;Suspense&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;fallback&lt;/code&gt; 来作为它的 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 渲染。在这个 Promise 被 &lt;code class=&quot;language-text&quot;&gt;settled&lt;/code&gt; 后，React 就会用 &lt;code class=&quot;language-text&quot;&gt;settled&lt;/code&gt; 的数据，来作为 Promise 表达式的返回值，并重新渲染。在上面的例子上，就是 &lt;code class=&quot;language-text&quot;&gt;import(‘./home’).default&lt;/code&gt;。具体的例子可以看看&lt;a href=&quot;https://codesandbox.io/s/pk79xvxq20&quot;&gt;这个&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从目前看来比较鸡肋的 &lt;code class=&quot;language-text&quot;&gt;Suspense&lt;/code&gt;，应该会在 &lt;a href=&quot;https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-16x-mid-2019-the-one-with-suspense-for-data-fetching&quot;&gt;2019 年中&lt;/a&gt;呈现完全版。
官方的 roadmap 中有一段非常诱人的代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// React Cache for simple data fetching (not final API)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; unstable_createResource &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-cache&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Tell React Cache how to fetch your data&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; TodoResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unstable_createResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetchTodo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Suspends until the data is in the cache&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; todo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; TodoResource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Same Suspense component you already use for code splitting&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// would be able to handle data fetching too.&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;React.Suspense&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Spinner&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* Siblings fetch in parallel */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Todo&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Todo&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;React.Suspense&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以如果要使用 Suspense 来改下之前的代码的话：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; unstable_createResource &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-cache&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unstable_createResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeApi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setQuery&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;prefixUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;?query=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;query&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fetchResource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Suspense fallback&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;loading…&quot;&lt;/span&gt; maxDuration&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
     &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AwesomeComponent fetchData&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Suspense&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;AwesomeComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fetchData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这里为了突出 &lt;code class=&quot;language-text&quot;&gt;createResource&lt;/code&gt; 这一步，我必须把 &lt;code class=&quot;language-text&quot;&gt;fetchResource.read&lt;/code&gt; 这里写出来。&lt;/p&gt;
&lt;p&gt;它相比 Hooks 的版本，进一步解决了几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不再需要关注竞态和 state 的问题 👍—连 state 都没有了，每次函数组件都会重新运行，自然没问题&lt;/li&gt;
&lt;li&gt;没有 loading 闪烁的问题 👍—基于 &lt;code class=&quot;language-text&quot;&gt;ConcurrentMode&lt;/code&gt;，可以非常优雅的解决这个难题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但它也不是完美的，目前 &lt;code class=&quot;language-text&quot;&gt;react-cache&lt;/code&gt; 存在个问题，它没有一个优雅方式来处理 resource 中错误的情况（至少我们发现 - -）。如果直接将 Error 从 &lt;code class=&quot;language-text&quot;&gt;fakeApi&lt;/code&gt; 中抛出来的话，&lt;code class=&quot;language-text&quot;&gt;AwesomeComponent&lt;/code&gt; 是会直接挂掉的。如果试图用 &lt;code class=&quot;language-text&quot;&gt;try catch&lt;/code&gt; 来包装 &lt;code class=&quot;language-text&quot;&gt;read&lt;/code&gt; 这的逻辑，也不行。目前我想到的一个可行的方案是修改 &lt;code class=&quot;language-text&quot;&gt;fakeApi&lt;/code&gt;，但是这种方式很不优雅。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fakeApi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchDataResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unstable_createResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeApi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;AwesomeComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fetchData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchDataResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Symbol.prototype.description 要求浏览器版本非常高，可以自己基于 toString 写 polyfill&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Symbol &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; : &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Data: &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是我相信，随着&lt;code class=&quot;language-text&quot;&gt;react-cache&lt;/code&gt; 正式版的发布，这个问题官方一定能给出一个合理的解决方案。&lt;/p&gt;
&lt;p&gt;PS：如果你想去体验的话，可能会失望。现在 react-cache 和 16.8.x 放在一起，根本跑不起来 🌚&lt;/p&gt;
&lt;h3 id=&quot;新的调整&quot;&gt;&lt;a href=&quot;#%E6%96%B0%E7%9A%84%E8%B0%83%E6%95%B4&quot; aria-label=&quot;新的调整 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;新的调整&lt;/h3&gt;
&lt;p&gt;就在我们认为随着 &lt;code class=&quot;language-text&quot;&gt;ConcurrentMode&lt;/code&gt; 的到来，&lt;code class=&quot;language-text&quot;&gt;maxDuration&lt;/code&gt; 就能改变我们的幸福感的时候，React core team 又临时把它&lt;a href=&quot;https://github.com/facebook/react/pull/15272&quot;&gt;移除了&lt;/a&gt;，将来会用更加启发式的方法来实现。至于移除的原因还是因为&lt;strong&gt;太难 😔&lt;/strong&gt;。这也让我想到了 AirPower🥺&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot; aria-label=&quot;总结 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;通过上面三种逐渐改进的开发模式 Class -&gt; Hooks -&gt; Suspense，我们认识到了 Hooks 的潜力。它让之前 Class 的逻辑更加清晰，能让组件设计更为合理，并且在代码复用性上也直接终结了 &lt;em&gt;HOC&lt;/em&gt; 和 &lt;em&gt;render props&lt;/em&gt;这两种经典模式。但是它在处理异步任务的时候，并不是最具有表现力的方案，并且也没有解决 Class 遗留下来的问题。而 Suspense 最终通过简洁又富有声明式的代码，漂亮地解决了这些问题。很显然，未来是 Hooks 的，但是 Suspense 会让异步逻辑更加容易。&lt;/p&gt;
&lt;h2 id=&quot;值得一提&quot;&gt;&lt;a href=&quot;#%E5%80%BC%E5%BE%97%E4%B8%80%E6%8F%90&quot; aria-label=&quot;值得一提 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;值得一提&lt;/h2&gt;
&lt;p&gt;另外，如果你想知道如何在没有 &lt;code class=&quot;language-text&quot;&gt;ConcurrentMode&lt;/code&gt; 的情况下，如何解决 loading 闪烁的问题，可以看&lt;a href=&quot;../solve-fresh-of-loading&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[解决 loading 闪烁的问题]]></title><description><![CDATA[背景 从开始接触异步请求和 Promise 后，就会发现这些操作很 「套路化」 。绝大多数的异步操作似乎都可以类似下面 👇 的代码： 这种套路话的方式，和   的引入，确实让我们在处理异步问题的时候简单了很多。但是这也带来了一些体验上的缺陷。在请求返回足够快（910…]]></description><link>https://github.com/thoamsy/blogs.git/solve-fresh-of-loading/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/solve-fresh-of-loading/</guid><pubDate>Sat, 23 Feb 2019 19:30:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#%E8%83%8C%E6%99%AF&quot; aria-label=&quot;背景 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;从开始接触异步请求和 Promise 后，就会发现这些操作很&lt;strong&gt;「套路化」&lt;/strong&gt;。绝大多数的异步操作似乎都可以类似下面 👇 的代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;rep&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种套路话的方式，和 &lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt; 的引入，确实让我们在处理异步问题的时候简单了很多。但是这也带来了一些体验上的缺陷。在请求返回足够快（9102 年了，网速不是问题）的情况下，会给 loading 带来一种转瞬即逝的效果 🌚。&lt;/p&gt;
&lt;p&gt;如果 loading UI 侵入性比较小的话，可能不是那么让人讨厌，但想象一个全屏幕的 loading：它唰地出现了一下子又消失了。你这个时候就不会觉得这是很好的用户体验了，反而觉得很蠢。&lt;/p&gt;
&lt;p&gt;所以总结两点，不分青红皂白就 loading，在高速网络下带来的问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;频繁出现 loading，会让用户觉得变卡了&lt;/li&gt;
&lt;li&gt;闪烁的体验让人很分裂&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;promise-的解决方案&quot;&gt;&lt;a href=&quot;#promise-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&quot; aria-label=&quot;promise 的解决方案 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promise 的解决方案&lt;/h2&gt;
&lt;p&gt;你可以不用读完，直接看&lt;a href=&quot;https://codesandbox.io/s/kxzxnnj8vr&quot;&gt;完成代码&lt;/a&gt;就行了&lt;/p&gt;
&lt;p&gt;主要的实现思路就是通过在&lt;strong&gt;请求和超时&lt;/strong&gt;中竞争出优先被 &lt;code class=&quot;language-text&quot;&gt;settled&lt;/code&gt; 的那个 &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;，作出相应的逻辑。
为了实现的简单，超时的函数可以写成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reject&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;timeout&lt;/code&gt; 的实现使用 &lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt; 而不是 &lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt; 可以让代码更加简洁。因为进入 &lt;em&gt;fulfilled&lt;/em&gt; 的情况只有一种，就是在 ms 之内请服务器响应并返回了。而在 &lt;code class=&quot;language-text&quot;&gt;rejected&lt;/code&gt; 状态下，就是超时的逻辑（&lt;strong&gt;注意 ⚠️，这里不考虑请求异常的情况&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;根据上面的说法，很容易写出一个 &lt;em&gt;naive&lt;/em&gt; 的实现&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这不符合我们的要求。如果没有进入 &lt;code class=&quot;language-text&quot;&gt;catch&lt;/code&gt; 里，世界和平，但是如果进入 &lt;code class=&quot;language-text&quot;&gt;catch&lt;/code&gt; 里，谁帮我们继续处理返回的数据呢？换句话说，它只把一个 loading 丢给你，其他就不管了！&lt;/p&gt;
&lt;p&gt;接着，我们改进一下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方式和上面的差别是在 &lt;code class=&quot;language-text&quot;&gt;catch&lt;/code&gt; 中做了显示 loading 之后的所需操作的。遗憾的是，它通过继续调用一次 &lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; 来想当然的认为能处理问题。但其实，我们只需要将 &lt;code class=&quot;language-text&quot;&gt;fetch(url)&lt;/code&gt; 的结果保存下来，就可以做到了。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fetchPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  fetchPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fetchPromise&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fetchPromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s Done 😎.&lt;/p&gt;
&lt;h2 id=&quot;让它更加通用&quot;&gt;&lt;a href=&quot;#%E8%AE%A9%E5%AE%83%E6%9B%B4%E5%8A%A0%E9%80%9A%E7%94%A8&quot; aria-label=&quot;让它更加通用 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;让它更加通用&lt;/h2&gt;
&lt;p&gt;接下来的任务就是让这个场景更加通用，可以通过一个&lt;strong&gt;高阶函数&lt;/strong&gt;，把普通的异步函数作为参数传入，并返回一个支持该特性的函数。&lt;/p&gt;
&lt;p&gt;我们先写一个最符合直觉的函数，它需要哪些参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;异步函数&lt;/li&gt;
&lt;li&gt;超时时间&lt;/li&gt;
&lt;li&gt;接口返回后的回调&lt;/li&gt;
&lt;li&gt;超时的回调&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面使用 Promise 而不是 &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; 来实现，因为这样会让代码更简单。实现如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;rq&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;api&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; request &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样已经能拿到我们需要的效果了，但是一个函数介绍四个参数的话，未免有点多，让人觉得不太自然。
通过观察第 5 行和第 7 行，我们发现 &lt;code class=&quot;language-text&quot;&gt;request&lt;/code&gt; 后下一个 fulfilled 回调是 &lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;timeout&lt;/code&gt; 在解决完 &lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt; 后下一个 &lt;code class=&quot;language-text&quot;&gt;fulfilled&lt;/code&gt; 回调也是 &lt;code class=&quot;language-text&quot;&gt;resolve&lt;/code&gt;。也就是说，其实我们可以将代码改成这样 &lt;code class=&quot;language-text&quot;&gt;ajax(api, ms, reject).then(resolve)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;看下改进后的代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;rq&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;api&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; request &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里代码和 👆 的区别主要是第五行中的 then，不再是 resolve，而是 undefined。为什么呢？
看下 MDN 中，关于 &lt;code class=&quot;language-text&quot;&gt;Promise.then&lt;/code&gt; 的一个特别的定义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If one or both arguments are omitted or are provided non-functions, then then will be missing the handler(s), but will not generate any errors. If the Promise that then is called on adopts a state (fulfillment or rejection) for which then has no handler, a new Promise is created with no additional handlers, simply adopting the final state of the original Promise on which then was called.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译过来其实就是，如果 then 里的两个参数有一个函数没有声明的话，就会直接返回一个新的 Promise，并抛出去。虽然看上去很难理解，其实，我们常用的 &lt;code class=&quot;language-text&quot;&gt;catch&lt;/code&gt; 不就是 &lt;code class=&quot;language-text&quot;&gt;then(undefined, reject)&lt;/code&gt; 的语法糖？最后可以改成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const rq = (api, ms, reject) =&amp;gt; (...args) =&amp;gt; {
  const request = api(...args);
  return Promise.race([request, timeout(ms)]).catch(err =&amp;gt; {
    reject(err);
    return request;
  });
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;未解决问题&quot;&gt;&lt;a href=&quot;#%E6%9C%AA%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98&quot; aria-label=&quot;未解决问题 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;未解决问题&lt;/h2&gt;
&lt;p&gt;在整个实现中，我们忽略了一个问题，那就是 request 也有 &lt;strong&gt;throw 异常&lt;/strong&gt; 的情况，一个关键的问题就需要在 catch 中区分到底是超时还是服务器异常导致的问题。而为了区分这个，最好的方式就是 Symbol。&lt;/p&gt;
&lt;p&gt;因为它是&lt;strong&gt;唯一&lt;/strong&gt;的。下面为了代码的清晰，我改成了 &lt;code class=&quot;language-text&quot;&gt;Symbol.for&lt;/code&gt;。
可以将 &lt;code class=&quot;language-text&quot;&gt;timeout&lt;/code&gt; 改为：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;timeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着我们在 catch 的时候做一个判断，将服务端异常的造成的问题抛出去&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;timeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;使用实例&quot;&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B&quot; aria-label=&quot;使用实例 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;使用实例&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setLoading&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setList&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; powerfulFetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;powerfulFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; loading &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Loading&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ………&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;美好的未来-&quot;&gt;&lt;a href=&quot;#%E7%BE%8E%E5%A5%BD%E7%9A%84%E6%9C%AA%E6%9D%A5-&quot; aria-label=&quot;美好的未来  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;美好的未来 ✨&lt;/h2&gt;
&lt;p&gt;React 用户应该都知道 &lt;code class=&quot;language-text&quot;&gt;Suspense&lt;/code&gt;，可惜的是它目前的用处仅仅是&lt;strong&gt;Code Splitting&lt;/strong&gt;。似乎因为一些稳定性问题，React 还没有将它最强大的一面公布出来。当然这是后话，但是如果你看过
&lt;a href=&quot;https://www.youtube.com/watch?v=ByBPyMBTzM0&amp;#x26;t=1368s&quot;&gt;Concurrent Rendering in React - Andrew Clark and Brian Vaughn - React Conf 2018&lt;/a&gt; 或者这个 &lt;a href=&quot;https://github.com/facebook/react/tree/master/fixtures/unstable-async/suspense&quot;&gt;Demo&lt;/a&gt; ，就知道 &lt;code class=&quot;language-text&quot;&gt;ConcurrentMode&lt;/code&gt; 配合 &lt;code class=&quot;language-text&quot;&gt;Suspense&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;maxDuration&lt;/code&gt; 就能解决上面的问题。比如这样一个场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;懒加载路由 A 的组件，500ms 内没有加载成功则显示 loading&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个通过未来的 React 可以轻松做到&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; LazyHome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConcurrentMode&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      // 省去一些 Route 相关代码
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;maxDuration&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BeautifulLoading&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LazyHome&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConcurrentMode&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子其实和我们要讨论的不一样，上面的例子是关于 Code Splitting，我们主要讨论的是 Ajax 请求的。&lt;/p&gt;
&lt;p&gt;不过强大的 React 也有方式做到后者，通过 &lt;code class=&quot;language-text&quot;&gt;react-cache&lt;/code&gt; 配合 &lt;code class=&quot;language-text&quot;&gt;Suspense&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createResource &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-cache&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fakeResource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeAPI&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fakeResource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConcurrentMode&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;maxDuration&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BeautifulLoading&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Suspense&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConcurrentMode&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它可以在 500ms 之内没有接受到服务器响应的话，显示 loading，否则直接渲染 list。&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#tldr&quot;&gt;官方的说法&lt;/a&gt;，等到 &lt;code class=&quot;language-text&quot;&gt;ConcurrentMode&lt;/code&gt; 的稳定，至少也要到 2019 年的 Q2，而客户端级别的 &lt;code class=&quot;language-text&quot;&gt;Suspense&lt;/code&gt; 要到 Q3。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot; aria-label=&quot;总结 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;本文主要介绍了使用 &lt;code class=&quot;language-text&quot;&gt;Promise.race&lt;/code&gt; 来解决 loading 闪烁的问题。同时也揭露了未来 React 可以带来的声明式的写法，以及如何在 &lt;code class=&quot;language-text&quot;&gt;Code Splitting&lt;/code&gt; 中解决同样的问题。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[为什么要除以 100?]]></title><description><![CDATA[背景 现公司是做电商的，电商就免不了和价格打交道。为了防止进度丢失，方便加减运行的问题，业界通用的方式是使用整数来表示。最小单位为分，123 就表示 “1 元 2 毛 3 分” 或者 ”1.23” 元，这个不需要过多介绍。 但是它们返回给前端用来展示的价格，也是这个 12…]]></description><link>https://github.com/thoamsy/blogs.git/division100/division100/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/division100/division100/</guid><pubDate>Wed, 20 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#%E8%83%8C%E6%99%AF&quot; aria-label=&quot;背景 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;现公司是做电商的，电商就免不了和价格打交道。为了防止进度丢失，方便加减运行的问题，业界通用的方式是使用整数来表示。最小单位为分，123 就表示 “1 元 2 毛 3 分” 或者 ”1.23” 元，这个不需要过多介绍。&lt;/p&gt;
&lt;p&gt;但是它们返回给前端用来展示的价格，也是这个 123，而不是转化成 1.23。需要前端再自己做一个转化逻辑。说要前端做这个的原因是防止进度丢失&lt;/p&gt;
&lt;p&gt;所以矛盾就出在这里。如果进度会丢失的话，那么 Java 和 JS 是没差别的。它们都采用 IEEE 754 来表示浮点数，价格的 Int 类型和 JS 的 SIM 也类似。那么这个无非就是把转化价格的逻辑从后端交给前端。然后前端又要下载一个类似 BigNumber 的库来处理这些问题。&lt;/p&gt;
&lt;h2 id=&quot;真相&quot;&gt;&lt;a href=&quot;#%E7%9C%9F%E7%9B%B8&quot; aria-label=&quot;真相 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;真相&lt;/h2&gt;
&lt;p&gt;这就是历史原因。那么有没有考虑过，整数除以 100 真的会丢失精度吗？我测试了十几个数不会。所以我打算写一个程序来证明一下。&lt;/p&gt;
&lt;p&gt;如果我将 &lt;code class=&quot;language-text&quot;&gt;double(a / 100)&lt;/code&gt; 的过程转化成 &lt;code class=&quot;language-text&quot;&gt;int(a / 100) + int(a % 100) / 100&lt;/code&gt;，接着判断这两个数是否相等是不是就可以了？(这里不考虑 JS，而是考虑 C 语言的情况。a / 100 得到的是整数）&lt;/p&gt;
&lt;p&gt;这里看上去有点脱裤子放屁，因为 &lt;code class=&quot;language-text&quot;&gt;a / 100&lt;/code&gt; 是整数，一个整数模 100，也还是整数。而我们又不能证明 &lt;code class=&quot;language-text&quot;&gt;int(a % 100) / 100&lt;/code&gt; 不会丢失精度，回到了最开始的问题上。&lt;/p&gt;
&lt;p&gt;不过换个角度想，JS 中支持将 “1.23” 这种字符串转化成数字。所以上面的式子改成 &lt;code class=&quot;language-text&quot;&gt;Number(a / 100 + &amp;quot;.&amp;quot; + String(a % 100))&lt;/code&gt; 是不是就能达到类似的效果了？&lt;/p&gt;
&lt;p&gt;所以我写出下面代码。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//生成 00 01 02 03 04 一直到 99&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; points &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 2 ** 31 - 1 我的计算机算不动，不过 2 ** 25 意思也到了。&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;points&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;foobar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后 &lt;code class=&quot;language-text&quot;&gt;foobar&lt;/code&gt; 从来没有被打印出来过。&lt;/p&gt;
&lt;p&gt;不过在第 7 行还是要解释下，我们在等式左右两边都用到了 &lt;code class=&quot;language-text&quot;&gt;i / 100&lt;/code&gt;，看上去很迷惑。当你要知道，确实它的意义是不同的。左边是直接得到浮点数，右边在 ~~ 的作用下会转化成整数。我们肯定不会出现 &lt;code class=&quot;language-text&quot;&gt;int(101.0 / 100) == 0&lt;/code&gt; 的情况，也不会出现 &lt;code class=&quot;language-text&quot;&gt;int(199.0 / 100) == 2&lt;/code&gt; 的情况。&lt;/p&gt;
&lt;p&gt;所以这是否可以证明一个整数除以一个 100，永远不会丢失精度呢？我相信是的。
那如果这个数不再是 100，而是其他的呢，比如 123？这个时候精度很有可能丢失，因为类似于循环小数这种肯定是无法正确表示的。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React as a UI Runtime]]></title><description><![CDATA[翻译自 Dan 的 博客 。文章很长:) 许多教程中提到 React 是一个 UI 库，这说得没什么问题。就像字面上一样，它确实是一个 UI 库！
 我之前写过关于创建  UI  所遇到的挑战，但是这篇博客将采用一个不同的方式的来讨论 React—更接近  programming…]]></description><link>https://github.com/thoamsy/blogs.git/react-as-a-runtime/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/react-as-a-runtime/</guid><pubDate>Sat, 02 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;翻译自 Dan 的&lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/&quot;&gt;博客&lt;/a&gt;。文章很长:)&lt;/p&gt;
&lt;p&gt;许多教程中提到 React 是一个 UI 库，这说得没什么问题。就像字面上一样，它确实是一个 UI 库！
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/0429fcb4a2f2022852afc698ff8968f1/d19c0/react.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 500px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 29.2%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;117\&apos;%3e%3cpath d=\&apos;M0 59v58h401V0H0v59m150-21v13h3c2 0 3-1 3-5 0-7 3-7 6 0 2 3 3 5 5 5 4 0 4-1 1-6l-2-4 2-3c3-3 3-8 0-11-3-2-4-2-10-2h-8v13m86-9l-1 2c-2 1-2 4 0 5l1 6c0 6 2 9 7 9 2 0 3-4 1-5-2 0-2-2-2-5s0-5 2-5l1-3-1-2-2-2c0-2-1-2-3-2s-3 0-3 2m-60 5c-3 3-4 10-2 13 4 5 11 5 15 1 3-3 2-4-4-2h-5c-4-3-2-4 5-4 6 0 6 0 6-3s-5-8-9-8l-6 3m20 0c-2 2-2 2 0 3l4-1h4c3 2 2 3-2 3-7 0-11 7-6 11h10l3 1c2 0 2 0 2-8 0-7 0-8-3-10-3-3-8-3-12 1m21 0c-6 6-2 17 6 17 4 0 9-4 9-6 0-3-4-2-6 0-3 4-9-1-6-7 1-3 4-4 6-1 2 2 6 3 6 0l-2-4c-4-3-9-3-13 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/0429fcb4a2f2022852afc698ff8968f1/f2fbe/react.webp 200w,
/blogs/static/0429fcb4a2f2022852afc698ff8968f1/e227a/react.webp 400w,
/blogs/static/0429fcb4a2f2022852afc698ff8968f1/0ca0c/react.webp 500w&quot;
          sizes=&quot;(max-width: 500px) 100vw, 500px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/0429fcb4a2f2022852afc698ff8968f1/9ec3c/react.png 200w,
/blogs/static/0429fcb4a2f2022852afc698ff8968f1/c7805/react.png 400w,
/blogs/static/0429fcb4a2f2022852afc698ff8968f1/d19c0/react.png 500w&quot;
          sizes=&quot;(max-width: 500px) 100vw, 500px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/0429fcb4a2f2022852afc698ff8968f1/d19c0/react.png&quot;
          alt=&quot;React homepage screenshot: &quot;A JavaScript library for building user interfaces&quot;&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前写过关于创建 &lt;a href=&quot;/blogs/the-elements-of-ui-engineering/&quot;&gt;UI&lt;/a&gt; 所遇到的挑战，但是这篇博客将采用一个不同的方式的来讨论 React—更接近 &lt;a href=&quot;https://en.wikipedia.org/wiki/Runtime_system&quot;&gt;programming runtime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章不会教你怎么使用 React 来创建 UI，&lt;/strong&gt;如果你对 React 的编程方式有了更为深入的理解后，这篇文章可能帮到你。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注意：如果你正在学习 React，最好先看&lt;a href=&quot;https://reactjs.org/docs/getting-started.html#learn-react&quot;&gt;文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;60&quot;&gt;⚠️&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这是一篇深度文章，而不是一篇新人向教程！&lt;/em&gt;在这里，我会从首要原则来描述大部分的 React 细节。我不会解释怎么使用它们—只说明它们是如何工作的。&lt;/p&gt;
&lt;p&gt;这文章面向有经验的开发和那些还在权衡是否使用 React 的其他 UI 库的使用者。我希望它能帮助到你们！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多开发者即使没有考虑过这方面的问题，也舒舒服服地使用了 React 很长一段时间，&lt;/strong&gt; This is definitely a programmer-centric view of React rather than, say, a &lt;a href=&quot;http://mrmrs.cc/writing/2016/04/21/developing-ui/&quot;&gt;designer-centric one&lt;/a&gt;. But I don’t think it hurts to have resources for both.&lt;/p&gt;
&lt;p&gt;看完了免责声明，起飞 🛫️ 吧！&lt;/p&gt;
&lt;p&gt;「译者注」：现在开始进入正题，标题和一些通用术语不翻译。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;host-tree&quot;&gt;&lt;a href=&quot;#host-tree&quot; aria-label=&quot;host tree permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Host Tree&lt;/h2&gt;
&lt;p&gt;一部分程序吐出(output)数字，一些程序会写诗。不同的语言和它们的 runtimes 通常会针对一些特定的用例进行优化，React 也一样。&lt;/p&gt;
&lt;p&gt;React 程序通常会得到&lt;strong&gt;一颗随时会改变的树&lt;/strong&gt;。它可能是 &lt;a href=&quot;https://www.npmjs.com/package/react-dom&quot;&gt;DOM 树&lt;/a&gt;、&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/Devpedia-CocoaApp/View%20Hierarchy.html&quot;&gt;iOS 层级图(iOS hierarchy)&lt;/a&gt;，&lt;a href=&quot;https://react-pdf.org/&quot;&gt;PDF primitives&lt;/a&gt;，甚至一个 &lt;a href=&quot;https://reactjs.org/docs/test-renderer.html&quot;&gt;JSON&lt;/a&gt; 对象。大多是时候我们都希望它为我们展示 UI。我们之所以称它为 ”&lt;em&gt;host&lt;/em&gt; tree”是因为它属于 &lt;strong&gt;宿主环境（host environment）&lt;/strong&gt; 的一部分—就像 DOM 和 iOS。Host tree 通常会有它们&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild&quot;&gt;自身&lt;/a&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622616-addsubview&quot;&gt;特有&lt;/a&gt;的命令式（imperative） API。React is a layer on top of it.&lt;/p&gt;
&lt;p&gt;所以 React 是用来做什么的？抽象地说，它帮助你在响应一些类似于交互，网络响应，计时器等外部事件时，也能够可预测地管理这复杂的 Host tree。&lt;/p&gt;
&lt;p&gt;当一个专用工具可以通过施加特定的约束并从中获益的时候，它表现得会比通用的工具要好。React 在两个原则上做了一个赌注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性。&lt;/strong&gt; Host tree 相对稳定，大多数的更新都不会从根本上改变它的整体结构。一个 app 每秒都会重新排列它所有的交互元素的工具显然很难使用，我的 button 去哪了？为什么我的显示屏在乱动？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规律性。&lt;/strong&gt; Host tree 可以分解成外观和行为一致的 UI 模式（比如按钮 🔘，列表，头像 👤）而不是随机的形状。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对于大多数 UI 来说这些行为是正确的。&lt;/strong&gt;但是如果你需要的 UI 没有稳定的输出模式时，React 就不适合了。比如，React 可以帮助你写一个类似 Twitter 客户端的玩意，但是写不了 &lt;a href=&quot;https://www.youtube.com/watch?v=Uzx9ArZ7MUU&quot;&gt;3D pipes screensaver&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;host-instances&quot;&gt;&lt;a href=&quot;#host-instances&quot; aria-label=&quot;host instances permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Host Instances&lt;/h2&gt;
&lt;p&gt;Host tree 由大量的 “host instances” 构成。&lt;/p&gt;
&lt;p&gt;在 DOM 环境中，host instances 可以认为是普通的 DOM 节点—就是你平时调用 &lt;code class=&quot;language-text&quot;&gt;document.createElement(&amp;#39;div&amp;#39;)&lt;/code&gt; 得到的对象。在 iOS 中，host instances 就是通过 JS 来唯一标示的 native view。&lt;/p&gt;
&lt;p&gt;Host instances 拥有自己的属性（&lt;code class=&quot;language-text&quot;&gt;domNode.className&lt;/code&gt; 或者 iOS 中的 &lt;code class=&quot;language-text&quot;&gt;view.tintColor&lt;/code&gt;)。它们同样也包含了其他 host instances 作为自己的子节点。&lt;/p&gt;
&lt;p&gt;（这里和 React 没有任何关心，我仅仅在描述 Host environment）&lt;/p&gt;
&lt;p&gt;通常会有一系列 API 用来操作 host instances。DOM 就提供了如同 &lt;code class=&quot;language-text&quot;&gt;appendChild&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;removeChild&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;setAttribute&lt;/code&gt; 等等方法。而在 React 中，你一般不会直接去掉用这些方法。React 会帮你做好它。&lt;/p&gt;
&lt;h2 id=&quot;renderers&quot;&gt;&lt;a href=&quot;#renderers&quot; aria-label=&quot;renderers permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Renderers&lt;/h2&gt;
&lt;p&gt;一个 &lt;em&gt;渲染器（renderer）&lt;/em&gt; 会告诉 React 如何去和 host environment（宿主环境）沟通，并管理它的 host instances。React DOM, React Native, 甚至 &lt;a href=&quot;https://mobile.twitter.com/vadimdemedes/status/1089344289102942211&quot;&gt;Ink&lt;/a&gt; 都属于 React 的 renderers。其实你也可以&lt;a href=&quot;https://github.com/facebook/react/tree/master/packages/react-reconciler&quot;&gt;写自己的 renderer&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;React renderers 可以拥有两种工作方式。&lt;/p&gt;
&lt;p&gt;绝大多数 renderers 都是采用 “mutating” 的模式来编写的。这种模式正是 DOM 的工作方式：可以生成一个节点，设置其属性，并且给它们添加子节点或者移除这些子节点。这些 host instances 是完全可变（mutable）的。&lt;/p&gt;
&lt;p&gt;React 也可以在 ”persistent” 下工作。该模式适用于不提供诸如 &lt;code class=&quot;language-text&quot;&gt;appendChild()&lt;/code&gt; 这种 API，而是通过替换 top-level child 并复制父节点树的宿主环境。&lt;/p&gt;
&lt;p&gt;采用 immutability（不可变）的 host tree 让多线程的实现变得很简单。&lt;a href=&quot;https://facebook.github.io/react-native/blog/2018/06/14/state-of-react-native-2018&quot;&gt;React Fabric&lt;/a&gt; 就充分利用了这一点。&lt;/p&gt;
&lt;p&gt;作为一个 React 用户，你从来都不需要去考虑这些模式。我只想强调 React 不只是一个将 A 转化成 B 的适配器（adapter）。如果你能了解一些底层 API 的设计范式还是会很有用的(orthogonal)。&lt;/p&gt;
&lt;h2 id=&quot;react-elements&quot;&gt;&lt;a href=&quot;#react-elements&quot; aria-label=&quot;react elements permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React Elements&lt;/h2&gt;
&lt;p&gt;在 host environment，一个 host instance（比如 DOM 节点）是最小的可构建单元(smallest building block)。在 React 中，最小的可构建单元就是 &lt;em&gt;React Element&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;React Element 其实是纯 JS 对象，它用来描述 host instance。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// JSX is a syntax sugar for these objects.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &amp;lt;button className=&quot;blue&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React element 很轻量，没有和 host instance 捆绑在一起。它仅仅是你在屏幕上所看到的效果的&lt;em&gt;描述&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;和 host instances 一样，React elements 也可以组成树。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 如你所见，JSX 就是这些对象的语法糖，也就是 createElement&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &amp;lt;dialog&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//   &amp;lt;button className=&quot;blue&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//   &amp;lt;button className=&quot;red&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &amp;lt;/dialog&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dialog&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;注意：我在这里删除了一些和下面解释&lt;a href=&quot;/blogs/why-do-react-elements-have-typeof-property/&quot;&gt;没有太多联系&lt;/a&gt;的属性。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;然而要记住，&lt;strong&gt;React elements 没有所谓的 persistent identity&lt;/strong&gt;。这意味着，它们在任何时候发生更新只能丢弃当前的 element，并重新创建（译者注：注意这里指的 React Elements 会重新生成，而不是对应的 DOM Elements，这在后文会继续解释）。&lt;/p&gt;
&lt;p&gt;React elements 是不可变得（immutable）。比如你们不能仅仅只修改某个 React element 的 property 或者 children。如果你希望之后渲染不一样的东西，你需要描述一个全新的 React element tree 是怎么样的。&lt;/p&gt;
&lt;p&gt;我喜欢把 React elements 比喻成电影中的帧。它们&lt;strong&gt;刻画&lt;/strong&gt;了在某一个特殊时间点的 UI 是如何展现的。&lt;/p&gt;
&lt;h2 id=&quot;entry-point&quot;&gt;&lt;a href=&quot;#entry-point&quot; aria-label=&quot;entry point permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Entry Point&lt;/h2&gt;
&lt;p&gt;每一个 React renderer 都有一个 “入口（entry point）”，它是一个用来告诉 React 在指定的 container host instance 中渲染 React Element 的 API。
React DOM 的入口就是 &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// { type: &apos;button&apos;, props: { className: &apos;blue&apos; } }&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们提到 &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render(reactElement, domContainer)&lt;/code&gt; 它就意味着，&lt;strong&gt;亲爱的 React，在这个 &lt;code class=&quot;language-text&quot;&gt;domContainer&lt;/code&gt;下生成我的 &lt;code class=&quot;language-text&quot;&gt;reactElement&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;React 将会查找 &lt;code class=&quot;language-text&quot;&gt;reactElement.type&lt;/code&gt;（在我们的例子中，是 &lt;code class=&quot;language-text&quot;&gt;button&lt;/code&gt;），让 React DOM 为它生成对应的的 host instance，并设置好 properties。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Somewhere in the ReactDOM renderer (simplified)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createHostInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;reactElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; domNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在我们的例子中，React 实际上会这样做：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果 &lt;code class=&quot;language-text&quot;&gt;reactElements.props.children&lt;/code&gt; 存在的话，React 在第一次渲染的时候，也会对它们递归地做同样的事情。&lt;/p&gt;
&lt;h2 id=&quot;reconciliation&quot;&gt;&lt;a href=&quot;#reconciliation&quot; aria-label=&quot;reconciliation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reconciliation&lt;/h2&gt;
&lt;p&gt;如果我们对同一个 container 调用两次 &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render&lt;/code&gt; 会发生什么？&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ... later ...&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 是替换这个 button 的 host instance&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 还仅仅只是在现有 instance 的技术上，更新 property&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样，React 的工作是使 host tree 和提供的 React element tree 匹配。而确定在响应新的数据时需要做什么的过程被称为 &lt;a href=&quot;https://reactjs.org/docs/reconciliation.html&quot;&gt;reconciliation&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;有两种方式可以做到这个，一个简化的 React 可以通过清空现有的树并重新创建一个来达到效果。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Clear the tree&lt;/span&gt;
domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Create the new host instance tree&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;domNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在 DOM 中，这种方式不仅慢，还会丢失类似于 &lt;strong&gt;focus，selection，scroll state&lt;/strong&gt;等等信息。相反，我们希望 React 可以做到这样。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; domNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; domContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Update existing host instance&lt;/span&gt;
domNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;换句话说，React 需要决定什么时候去更新现有的 host instance 来匹配新的 React element，以及何时创建新的。&lt;/p&gt;
&lt;p&gt;这就抛出了一个有关 &lt;em&gt;identity&lt;/em&gt; 的问题。React element 每次都会是完全不同的，但是什么时候它们在概念上表示的是同一个 instance 呢？&lt;/p&gt;
&lt;p&gt;This raises a question of &lt;em&gt;identity&lt;/em&gt;. The React element may be different every time, but when does it refer to the same host instance conceptually?&lt;/p&gt;
&lt;p&gt;我们的例子很简单。我们第一次仅仅只渲染一个 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt;，我们想在同样的地方再渲染一次 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt;。我们已经有了一个 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; instance，为什么需要重新创建一个呢？重用它！&lt;/p&gt;
&lt;p&gt;这已经非常接近 React 思考的方式了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果树中同样地方的 element type 在一次更新后，和上一个 element 的 type 匹配，那么 React 就会重用先有的 host instance。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是一个带了注释的粗糙的例子，来解释 React 怎么做：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// let domNode = document.createElement(&apos;button&apos;);&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// domNode.className = &apos;blue&apos;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// domContainer.appendChild(domNode);&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Can reuse host instance? Yes! (button → button)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// domNode.className = &apos;red&apos;;&lt;/span&gt;&lt;/span&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Can reuse host instance? No! (button → p)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// domContainer.removeChild(domNode);&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// domNode = document.createElement(&apos;p&apos;);&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// domNode.textContent = &apos;Hello&apos;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// domContainer.appendChild(domNode);&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Can reuse host instance? Yes! (p → p)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// domNode.textContent = &apos;Goodbye&apos;;&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Goodbye&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子节点们使用同样的启发式方法. 当我们更新一个 拥有两个 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; 的时候，React 首先会决定是否要复用 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt;，并对每一个子节点重复这个决策过程。&lt;/p&gt;
&lt;h2 id=&quot;conditions&quot;&gt;&lt;a href=&quot;#conditions&quot; aria-label=&quot;conditions permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conditions&lt;/h2&gt;
&lt;p&gt;如果 React 仅仅每次更新的时候， element type 匹配才复用 host instance 的话，它们如何渲染条件语句里的内容？&lt;/p&gt;
&lt;p&gt;假设我们第一次渲染的时候只有一个 input，接着在 input 之前渲染一个 message：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// First render&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  domContainer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Next render&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I was just added here!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  domContainer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中，&lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 的 host instance 将会重新创建一个。React 将会遍历 element tree，将其与之前的版本比较：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;dialog → dialog&lt;/code&gt;: 我们能重用 host instance 么？&lt;strong&gt;可以，type 对上了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;input → p&lt;/code&gt;: 我们能重用 host instance 么？ &lt;strong&gt;不行，type 改变了！&lt;/strong&gt; 需要移除现有的 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 并重新创建一个全新的 &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt; host instance。&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;(nothing → input&lt;/code&gt;: 需要新建一个 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; host instance。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以实际上，React 的更新代码就这样执行：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; oldInputNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldInputNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;p&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I was just added here!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newInputNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;input&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newInputNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这其实不是很酷因为从概念上来说，&lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 并不应该被 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 替换—它仅仅只是移动了一下位置。我们不希望因为重新创建了一个而失去它的 selection，focus state，content&lt;/p&gt;
&lt;p&gt;然而这个问题其实很容易被修复，在实际使用 React 的场景中，它不会发生。&lt;/p&gt;
&lt;p&gt;在实际中，你很少会直接调用 &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render&lt;/code&gt;，相反地，你会把代码拆解成下面这样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;showMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I was just added here!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子就不会碰到上面提到的问题了。我们用 object 字面量的形式来取代 JSX 可能会更容易解释为什么。看下 &lt;code class=&quot;language-text&quot;&gt;dialog&lt;/code&gt; 所对应的 element tree：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;showMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;p&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I was just added here!&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dialog&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;input&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;不管 &lt;code class=&quot;language-text&quot;&gt;showMessage&lt;/code&gt; 是 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 还是 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;，&lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 都是第二个子节点，因此在每次 render 的时候，它在树中还是在同一个位置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;code class=&quot;language-text&quot;&gt;showMessage&lt;/code&gt; 从 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt; 变为 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;，React 就会遍历 element 树，和它上一个版本比较：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dialog → dialog&lt;/code&gt;: 我可以重用 host instance 吗? &lt;strong&gt;可以，type 是一样的。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;(null) → p&lt;/code&gt;: 需要插入一个新的 &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt; host instance。&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;input → input&lt;/code&gt;: 我可以重用 host instance 吗? &lt;strong&gt;当然，type 没有变！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接着 React 会执行类似的代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; inputNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;p&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I was just added here!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
dialogNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pNode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; inputNode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再也没有 input state 会丢失了。&lt;/p&gt;
&lt;h2 id=&quot;lists&quot;&gt;&lt;a href=&quot;#lists&quot; aria-label=&quot;lists permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lists&lt;/h2&gt;
&lt;p&gt;通过比较 element type 在同一位置是否改变的方式，在大多数时候都可以确定是重用还是重新创建一个新的 host instance。&lt;/p&gt;
&lt;p&gt;但是这只有在子节点是固定并且不需要重排的情况下。在我们上面的例子，即使 &lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt; 变量可以是一个 “hole”，我们还是可以确定 input 在 message 之后，并且没有其他子节点了。&lt;/p&gt;
&lt;p&gt;在动态列表中，我们不能保证它们的顺序是否永远不变。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShoppingList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          You bought &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          Enter how many do you want: &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们的 Shopping List 里的 items 发生了重排，React 则会认为所有的 &lt;code class=&quot;language-text&quot;&gt;p&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 都和之前是一样的 type，而不会去移动它们。从 React 的角度来看，是&lt;em&gt;items 自身&lt;/em&gt;变了，而不是它们的顺序。&lt;/p&gt;
&lt;p&gt;React 在重排 10 个 items 时会执行这段代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; formNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childNodes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; textNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstChild&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  textNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;You bought &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以 React 实际上会更新每个 DOM 节点而不是重排它们。这会造成性能问题和 bug 🐛。比如我们的在第一行输入的内容 &lt;code class=&quot;language-text&quot;&gt;how many you want&lt;/code&gt;，会在重排后依然显示在第一行。但其实对应的那个 items 已经不是第一行了！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这就是为什么 React 每次都会在你需要渲染一个 array 的时候不停地唠叨，老铁你的 key 丢了！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShoppingList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; list &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;productId&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;          You bought &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;          Enter how many do you want: &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 告诉 React，这些 item 即使在两次渲染之间对于它们的父元素来说位于不同的位置，在概念上也应该认为它们是同一个。&lt;/p&gt;
&lt;p&gt;当 React 发现 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p key=&amp;quot;42&amp;quot;&amp;gt;&lt;/code&gt; 在 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 里的时候，它会检测上一次 render 是否也包含了 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p key=&amp;quot;42&amp;quot;&amp;gt;&lt;/code&gt; 在同一个 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 中。即使 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 的子节点的顺序改变了也能生效。如果存在，React 将会重用这个 key 之前的 host instance，并响应地重拍它的同胞节点。&lt;/p&gt;
&lt;p&gt;注意 &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 仅仅和它最近的父节点有关，对于 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 它就是 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt;。React 不会尝试在不同的 parents 中匹配同一个 key，React 也没有原生支持如何在不重新创建 host instance 的情况下，将它移动到另外一个父元素中。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 应该取什么值才好呢？可以问自己一个简单的问题：&lt;strong&gt;哪些项在重排之后依然可以保持不变？&lt;/strong&gt;比如，在购物车中，product Id 就唯一标示了一个商品。&lt;/p&gt;
&lt;h2 id=&quot;components&quot;&gt;&lt;a href=&quot;#components&quot; aria-label=&quot;components permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Components&lt;/h2&gt;
&lt;p&gt;我们已经学习到那些会返回 React element 的函数了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;showMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I was just added here!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它们被称为 &lt;em&gt;components&lt;/em&gt;。它们让我们可以创建自己的 buttons，avatars，comments 等等百宝箱 🧰。可以说 Component 是 React 的面包 🍞 和黄油。&lt;/p&gt;
&lt;p&gt;Components 接受一个参数—一个对象。它包含了 “props”（”properties” 的简写）。上面的 &lt;code class=&quot;language-text&quot;&gt;showMessage&lt;/code&gt; 就是一个 prop，它们就像命名的参数一样。（译者注，其实就是 JS 不支持给函数的参数加上别名，而接受一个 Object 可以起到类似的效果）&lt;/p&gt;
&lt;h2 id=&quot;purity&quot;&gt;&lt;a href=&quot;#purity&quot; aria-label=&quot;purity permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Purity&lt;/h2&gt;
&lt;p&gt;React components 的 props 会被假设为纯（pure）的。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 🔴 Doesn&apos;t work&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isActive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般来说，mutation 是不符合 React 的最佳实践的。不过，&lt;em&gt;local mutation&lt;/em&gt; 是没有任何问题的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FriendList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; friends &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; friend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; friends&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Friend&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;friend&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;friend&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在渲染的时候创建了 &lt;code class=&quot;language-text&quot;&gt;items&lt;/code&gt;，在这之前没有其他组件“见过”它。所以我们可以在将它作为渲染结果之前，按自己喜欢的方式修改它，而不需要为了保存&lt;strong&gt;纯粹性&lt;/strong&gt;而扭曲你的代码。&lt;/p&gt;
&lt;p&gt;同样的，延迟初始化(lazy initialization) 虽然不是纯，但依旧很棒。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExpenseForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Fine if it doesn&apos;t affect other components:&lt;/span&gt;
  SuperCalculator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initializeIfNotReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Continue rendering...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要多次调用一个组件是安全的，并且不会影响其他组件的渲染效果，React 并不关心你的代码是否在 FP 的世界中是百分之百纯的。&lt;/p&gt;
&lt;p&gt;也就是说，会带来副作用从而影响显示效果的 Component 在 React 中是不被接受的。换句话说，仅仅调用 Component 的方法本身，不应该在屏幕上产生任何变化。（译者注，也就是 Component 本身，不应该有类似于去修改 &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt;，或者里面有一个 &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render&lt;/code&gt;)&lt;/p&gt;
&lt;h2 id=&quot;recursion&quot;&gt;&lt;a href=&quot;#recursion&quot; aria-label=&quot;recursion permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recursion&lt;/h2&gt;
&lt;p&gt;我们该如何在一个 component 中使用其他的 components？Components 其实都是函数所以我们可以直接调用它们：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; reactElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showMessage&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; domContainer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，这种方式并不对 React runtime 的胃口。&lt;/p&gt;
&lt;p&gt;相反，React 正统地使用 components 的方式与我们之前看到得一样—React elements。&lt;strong&gt;这就意味着，你不是直接调用 component 这个函数，而是让 React 来帮你做。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// { type: Form, props: { showMessage: true } }&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; reactElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Form&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;showMessage&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; domContainer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 React 的某处，你的 component 将会被调用：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Somewhere inside React&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; type &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Form&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reactElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { showMessage: true }&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Whatever Form returns&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Component function 命名采用的是首字母大写的方式，当 JSX 转译的时候碰到 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; 而不是 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 的时候，它会将 type 赋值为 Form 本身而不是字符串 “form”。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;form&apos; string&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Form&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Form function&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React 中并没有全局注册的机制—当你输入 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Form /&amp;gt;&lt;/code&gt; 的时候它会按字面上声明的 &lt;code class=&quot;language-text&quot;&gt;Form&lt;/code&gt; 来引用。如果 &lt;code class=&quot;language-text&quot;&gt;Form&lt;/code&gt; 在本地作用域中不存在的话，你就会看到 JS 报一个和你平时使用了错误的变量名一样的错误。&lt;/p&gt;
&lt;p&gt;**Okay，所以当 element 的 type 是一个 function 的时候 React 到底做了什么？它调用你的 component，并询问该 component 想要渲染的 element。&lt;/p&gt;
&lt;p&gt;这个过程会不停的递归下去，更多的细节可以在&lt;a href=&quot;https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html&quot;&gt;这里&lt;/a&gt;看到。简单的形式如下面这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;你：&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render(&amp;lt;App /&amp;gt;, domContainer)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;， 你想渲染什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;: 我渲染一个包含了 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Content&amp;gt;&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Layout&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;Layout&lt;/code&gt;, 你想渲染什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Layout&lt;/code&gt;: 我在一个 &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt; 中渲染我的 children。我的子节点有一个 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Content&amp;gt;&lt;/code&gt; 说你猜这会进入 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Content&amp;gt;&lt;/code&gt;, 你想渲染什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Content&lt;/code&gt;: 我渲染一个拥有一些 text 的 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;article&amp;gt;&lt;/code&gt;，它还包含了个 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Footer&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;/strong&gt; Hey &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Footer&amp;gt;&lt;/code&gt;, 你想渲染什么？&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Footer&lt;/code&gt;: 我渲染一个拥有很多 text 的 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;/strong&gt; Okay, 起飞吧:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Resulting DOM structure&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    Some text
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;some more text&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是我们为什么说 reconciliation 是递归的了。当 React 遍历 element tree 的时候，它会碰到那些 &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; 为 component 的 element，接着会调用它并保持 component 返回的 element 的顺序继续执行。最终我们将会遍历所有的 components，React 也就知道了如何改变 host tree。&lt;/p&gt;
&lt;p&gt;我们上面提到的 reconciliation 的规则在这里依然适用。如果相同位置(由 index 和可选的 &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 共同决定）的 &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; 发生了改变，React 将会移除当前 element 中所有的 host instance 并重新创建它们。&lt;/p&gt;
&lt;h2 id=&quot;inversion-of-control&quot;&gt;&lt;a href=&quot;#inversion-of-control&quot; aria-label=&quot;inversion of control permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inversion of Control&lt;/h2&gt;
&lt;p&gt;你可以想知道：为什么我们不知道调用 component 呢？为什么要写成 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Form /&amp;gt;&lt;/code&gt; 而不是 &lt;code class=&quot;language-text&quot;&gt;Form()&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果 React 能提前 “了解” 到你的 component 定义，而不是只有在递归调用它后才看到返回的 element 的话，React 就可以更好的工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;React can do its job better if it “knows” about your components rather than if it only sees the React element tree after recursively calling them.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 🔴 React has no idea Layout and Article exist.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// You&apos;re calling them.&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; domContainer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ✅ React knows Layout and Article exist.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// React calls them.&lt;/span&gt;
ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Layout&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Article&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Layout&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  domContainer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个简单的&lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;控制反转&lt;/a&gt;的例子。通过让 React 来控制如何调用组件的话，可以得到一些有趣的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Components become more than functions.&lt;/strong&gt; React can augment component functions with features like &lt;em&gt;local state&lt;/em&gt; that are tied to the component identity in the tree. A good runtime provides fundamental abstractions that match the problem at hand. As we already mentioned, React is oriented specifically at programs that render UI trees and respond to interactions. If you called components directly, you’d have to build these features yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Component types participate in the reconciliation.&lt;/strong&gt; By letting React call your components, you also tell it more about the conceptual structure of your tree. For example, when you move from rendering &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Feed&amp;gt;&lt;/code&gt; to the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Profile&amp;gt;&lt;/code&gt; page, React won’t attempt to re-use host instances inside them — just like when you replace &lt;code class=&quot;language-text&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. All state will be gone — which is usually good when you render a conceptually different view. You wouldn’t want to preserve input state between &lt;code class=&quot;language-text&quot;&gt;&amp;lt;PasswordForm&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;&amp;lt;MessengerChat&amp;gt;&lt;/code&gt; even if the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; position in the tree accidentally “lines up” between them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React can delay the reconciliation.&lt;/strong&gt; If React takes control over calling our components, it can do many interesting things. For example, it can let the browser do some work between the component calls so that re-rendering a large component tree &lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;doesn’t block the main thread&lt;/a&gt;. Orchestrating this manually without reimplementing a large part of React is difficult.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A better debugging story.&lt;/strong&gt; If components are first-class citizens that the library is aware of, we can build &lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;rich developer tools&lt;/a&gt; for introspection in development.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一个优势是 &lt;em&gt;lazy evaluation（惰性求值）&lt;/em&gt;，一起看看这意味着什么。&lt;/p&gt;
&lt;h2 id=&quot;lazy-evaluation&quot;&gt;&lt;a href=&quot;#lazy-evaluation&quot; aria-label=&quot;lazy evaluation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazy Evaluation&lt;/h2&gt;
&lt;p&gt;当我们在 JS 中调用一个函数时，实参会在调用之前就被求值：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// (2) This gets computed second&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// (1) This gets computed first&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;prepareMeal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种行为通常是我们所期望的，因为这些函数能带来隐含的副作用。而如果我们调用一个函数，它直到我们以某种方式使用的时候才会被执行的话，这会让我们感到很诧异。&lt;/p&gt;
&lt;p&gt;不过，React components 相对纯的，所以我们如果知道它的结果不会在屏幕上呈现的话，就完全没有必要执行它的。&lt;/p&gt;
&lt;p&gt;考虑这个 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Comments&amp;gt;&lt;/code&gt; 插入到 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Page&amp;gt;&lt;/code&gt; 中的组件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Story&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currentUser &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// return {&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//   type: Page,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//   props: {&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//     user: currentUser,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//     children: { type: Comments, props: {} }&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//   }&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// }&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Comments&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Page&lt;/code&gt; 会将它的 children 在 &lt;code class=&quot;language-text&quot;&gt;Layout&lt;/code&gt; 中渲染。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Layout&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Layout&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(在 JSX 中 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;A&amp;gt;&amp;lt;B /&amp;gt;&amp;lt;/A&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;A children={&amp;lt;B /&amp;gt;} /&amp;gt;&lt;/code&gt; 等价。)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;但是如果有提前提出的条件呢？&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isLoggedIn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Please login&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Layout&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Layout&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们像函数一样调用这个 &lt;code class=&quot;language-text&quot;&gt;Comments()&lt;/code&gt;，它都会立刻执行。无论 &lt;code class=&quot;language-text&quot;&gt;Page&lt;/code&gt; 是否需要它：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//   type: Page,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//   props: {&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//     children: Comments() // Always runs!&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//   }&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// }&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Comments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是如果我们传递一个 React element 进去的话，就不会立刻执行 &lt;code class=&quot;language-text&quot;&gt;Comments&lt;/code&gt; 了。
But if we pass a React element, we don’t execute &lt;code class=&quot;language-text&quot;&gt;Comments&lt;/code&gt; ourselves at all:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//   type: Page,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//   props: {&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//     children: { type: Comments }&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//   }&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// }&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Comments&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就让 React 决定何时，是否调用 component 函数。如果 &lt;code class=&quot;language-text&quot;&gt;Page&lt;/code&gt; component 实际上忽略 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; prop 而仅仅渲染 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;Please login&amp;lt;/h1&amp;gt;&lt;/code&gt; 的话，React 根本就不会尝试去调用 &lt;code class=&quot;language-text&quot;&gt;Comments&lt;/code&gt; 函数。挺酷的吧 😎？&lt;/p&gt;
&lt;p&gt;这让我们省去了不必要的渲染工作，并让我们的代码更加健壮。（在用户注销后，我们不需要关心&lt;code class=&quot;language-text&quot;&gt;Comments&lt;/code&gt; 是否会被 thrown away，它不会被调用的。)&lt;/p&gt;
&lt;h2 id=&quot;state&quot;&gt;&lt;a href=&quot;#state&quot; aria-label=&quot;state permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State&lt;/h2&gt;
&lt;p&gt;我们&lt;a href=&quot;#reconciliation&quot;&gt;之前&lt;/a&gt;讨论了 identity，以及 element 在树中的概念“位置”如何告诉 React 是否应该重用当前 host instance 还是创建新的。Host instances 拥有所有的本地状态：focus, selection, input 等等。我们希望在那些在概念上渲染的是相同 UI 的时候，能够保留这些状态。我们还希望在渲染概念上不同的东西时，能够预测到组件会被销毁（比如从 &lt;code class=&quot;language-text&quot;&gt;SignupForm&amp;gt;&lt;/code&gt; 移动到 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;MessengerChat&amp;gt;&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地状态（Local state）是如此有用以至于 React 让 &lt;em&gt;你自己&lt;/em&gt; 的组件也能拥有它。&lt;/strong&gt; Components 依然是函数，但 React 为它们扩充了一些对 UI 有用的特性，绑定到树中特定位置的本地状态就是一个这样的特性之一。&lt;/p&gt;
&lt;p&gt;我们称这个特性为 &lt;em&gt;Hooks&lt;/em&gt;。&lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; 就是一个 Hook 。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;You clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Click me&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它返回一对值：当前的状态和一个更新这个状态的函数。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring&quot;&gt;array destructuring&lt;/a&gt; 语法让你能够自己为状态取一个潇洒的名字。比如上面我们取名为 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;setCount&lt;/code&gt;，当其实我们也可以叫它 &lt;code class=&quot;language-text&quot;&gt;banana&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;setBanana&lt;/code&gt;。在后文，我将会使用 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 来取代 &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; 返回的第二个参数。
&lt;em&gt;(你可以在&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;这里&lt;/a&gt; 学到关于 &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; 和 React 提供的其他 hooks)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;consistency&quot;&gt;&lt;a href=&quot;#consistency&quot; aria-label=&quot;consistency permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Consistency&lt;/h2&gt;
&lt;p&gt;即使我们想要将 reconciliation 过程拆分为&lt;a href=&quot;https://www.youtube.com/watch?v=mDdgfyRB5kg&quot;&gt;非堵塞&lt;/a&gt;的工作块，我们还是需要 perform the actual host tree operations in a single synchronous swoop。这样我们能确定用户不会看到更新到一半的 UI，浏览器也不会为了用户不应该看到的中间状态而执行不必要的 style recalculation 和 layout（译者注：或者叫 reflow，回流）。&lt;/p&gt;
&lt;p&gt;这就是为什么 React 将工作分为 &lt;code class=&quot;language-text&quot;&gt;render 阶段&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;commit 阶段&lt;/code&gt;。&lt;strong&gt;Render 阶段* 是 React 调用组件和执行 reconciliation 的时机，在这个阶段你可以安全的中断它（译者注：也就要求 component 必须是纯的，并且 will 类生命周期也是存的），并且在可以期待的&lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;未来&lt;/a&gt;将支持异步渲染。&lt;/strong&gt;Commit 阶段** 则是 React 接触到 host tree 的时机。它总是同步的.&lt;/p&gt;
&lt;h2 id=&quot;memoization&quot;&gt;&lt;a href=&quot;#memoization&quot; aria-label=&quot;memoization permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Memoization&lt;/h2&gt;
&lt;p&gt;当父组件通过 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 调度一个更新时，React 默认会 reconciles 它整个子树。这是因为 React 不知道这个来自父组件的更新是否会影响到它的 child，React 选择保持一致。这看上去会让每次更新的代价很高，不过在实际情况下，针对中小型规模的子树来说这不是问题。&lt;/p&gt;
&lt;p&gt;不过如果 tree 实在太深或者太广（译者注：兄弟节点太多）的话，你可以告诉 React 去 &lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;memoize&lt;/a&gt; 它的子树，并在每次 props 改变的时候，通过浅比较来决定是否重用之前的渲染结果。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; item &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在在 &lt;code class=&quot;language-text&quot;&gt;Table&lt;/code&gt; 中 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 时，将会跳过 reconciliation 那些 &lt;code class=&quot;language-text&quot;&gt;items&lt;/code&gt; 的引用和上次渲染的 &lt;code class=&quot;language-text&quot;&gt;items&lt;/code&gt; 相同的 &lt;code class=&quot;language-text&quot;&gt;Row&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你可以通过 &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usememo&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useMemo()&lt;/code&gt; Hook&lt;/a&gt; 得到细粒度的 memoization。The cache is local to component tree position 并且将会和本地状态一同被销毁。它只保留上一个结果。&lt;/p&gt;
&lt;p&gt;React 内部默认不会 memoize 组件，因为许多组件每次更新都会接受到不同的 props，这样的话去 memoize 就是一种浪费。（译者注：很多组件设计成某个 props 接受一个对象，但是在传递的时候 ，如果这个对象是字面量的话，那就等于每次 props 都和上次不同了。）&lt;/p&gt;
&lt;h2 id=&quot;raw-models&quot;&gt;&lt;a href=&quot;#raw-models&quot; aria-label=&quot;raw models permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Raw Models&lt;/h2&gt;
&lt;p&gt;讽刺的是，React 并没有使用 “响应式” 系统进行细粒度更新。换句话说，顶部的任何更新都会触发 reconciliation，而不是仅更新受影响的 component。&lt;/p&gt;
&lt;p&gt;这其实是一个内部设计的抉择。&lt;a href=&quot;https://calibreapp.com/blog/time-to-interactive/&quot;&gt;Time to Interactive&lt;/a&gt; 在 C 端 Web App 性能基准中，扮演了一个及其关键的角色，遍历整个模型并设置细粒度的更新将会花费宝贵的时间。另外，在许多应用中，交互往往会导致小型（button hover）或者大型（page transition）的更新，在这种情况下，细粒度订阅往往会消耗更多内存。&lt;/p&gt;
&lt;p&gt;React 核心设计原则之一是它可以处理原始数据（raw data）。如果你从网络中接受到了大量的 JS 对象，你可以直接将它们塞进 component 中而不需要做任何预处理。你可以随意读取任何属性，也不会在结构轻微变动的时候出现意想不到的性能抖动。React 渲染时间复杂度是 O(&lt;em&gt;view size&lt;/em&gt;) 而不是 O(&lt;em&gt;model size&lt;/em&gt;)，你可以通过 &lt;a href=&quot;https://react-window.now.sh/#/examples/list/fixed-size&quot;&gt;windowing&lt;/a&gt; 来显著地降低 &lt;em&gt;view size&lt;/em&gt; 的值。&lt;/p&gt;
&lt;p&gt;一些特定类型的 app 采用细粒度的更新会有更好的效果—比如股票跟踪软件。这是少有的 “everything constantly updating at the same time” 的例子。尽管自己写一些命令式的代码能够优化，React 在这种使用场景上并不是最适合的。当然，你可以在 React 的上层实现一套自己的细粒度订阅系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，有一些通用的性能问题，即使是细粒度订阅和“响应式”系统也不能解决。&lt;/strong&gt; 举个例子，渲染一个新的 deep tree（每次 page transition 的时候发生）而不堵塞浏览器。改变 tracking 并不会让它更快—因为它需要在订阅上做更多工作从而变慢了。另一个问题是我们在渲染视图之前必须等待数据的到来。在 React 中，我们通过 &lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;Concurrent Rendering&lt;/a&gt; 来解决这个问题。&lt;/p&gt;
&lt;h2 id=&quot;batching&quot;&gt;&lt;a href=&quot;#batching&quot; aria-label=&quot;batching permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Batching&lt;/h2&gt;
&lt;p&gt;可能有几个组件会希望在同一个事件中一起更新状态。下面这个例子虽然错综复杂但是它说明了一个通用的模式：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;      Parent clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Child&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;      Child clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当一个事件被 dispatched，子节点的 &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; 先调用（触发它的 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;），接着它的父组件也调用在它自己的 &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; handler 中调用 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果 React 在 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 后立刻重新渲染 component 的话，我们会伴随着 child 被渲染两次而结束。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Entering React&apos;s browser click event handler &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Child &lt;span class=&quot;token comment&quot;&gt;// 😞 unnecessary&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Parent
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Child&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Exiting React&apos;s browser click event handler &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一次 &lt;code class=&quot;language-text&quot;&gt;Child&lt;/code&gt; 的渲染被浪费了，而且我们不能让 React 在第二次更新的时候跳过渲染 &lt;code class=&quot;language-text&quot;&gt;Child&lt;/code&gt;，因为 &lt;code class=&quot;language-text&quot;&gt;Parent&lt;/code&gt; 可能会传递一些基于自己最新的 state 的复杂数据给 &lt;code class=&quot;language-text&quot;&gt;Child&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这就是为什么 React 会在 event handlers 中批量更新：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Entering React&apos;s browser click event handler &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
&lt;span class=&quot;token function&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; setState
&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Processing state updates                     &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Parent
  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; re&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;render Child
&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Exiting React&apos;s browser click event handler  &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在组件中调用 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 不会立刻重新渲染，相反，React 会先执行所有的 event handlers。然后会重新渲染一次来将这所有的更新一次搞定。（译者注：React 16 中，无法批处理 &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 中的 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;批处理对性能很友好，但是会让写出下面这样的代码的你很惊讶：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCounter&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们将 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 先设置为 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;，接着调用 3 次 &lt;code class=&quot;language-text&quot;&gt;setCount(1)&lt;/code&gt;。为了修复这个，我们需要让 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 接受一个 “updater” 函数：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCounter&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React 将所有的 updater 函数放进队列中，之后会一次性将它们全部运行，将 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 设为 &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; 并重新渲染。
React would put the updater functions in a queue, and later run them in sequence, resulting in a re-render with &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; set to &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当状态逻辑越来越复杂后，我建议使用 &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usereducer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useReducer&lt;/code&gt; Hook&lt;/a&gt;。它就像是这个 “updater” 模式的进化，并给每一种更新途径命了名：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实参 &lt;code class=&quot;language-text&quot;&gt;action&lt;/code&gt; 可以随便设，当然 object 是一个不错的选择。&lt;/p&gt;
&lt;h2 id=&quot;call-tree&quot;&gt;&lt;a href=&quot;#call-tree&quot; aria-label=&quot;call tree permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Call Tree&lt;/h2&gt;
&lt;p&gt;编程语言的 runtime 通常都有 &lt;a href=&quot;https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4&quot;&gt;call stack&lt;/a&gt;。当函数 &lt;code class=&quot;language-text&quot;&gt;a()&lt;/code&gt; 调用一个函数 &lt;code class=&quot;language-text&quot;&gt;b()&lt;/code&gt;，而 b 又调用了 &lt;code class=&quot;language-text&quot;&gt;c()&lt;/code&gt;，在 JS 引擎的某个地方会为它构造一个类似于 &lt;code class=&quot;language-text&quot;&gt;[a, b, c]&lt;/code&gt; 这样的数据结构，它“跟踪”你的位置和接下来要执行的代码。一旦 &lt;code class=&quot;language-text&quot;&gt;c&lt;/code&gt; 运行结束，它的 call frame 就会消失了，它不再被需要。我们跳回到 &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt;，接着是 &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;，这时 call stack 就是空的了。&lt;/p&gt;
&lt;p&gt;当然，React 它是基于 JS 的，它也要遵守 JS 的规则。我们可以想象 React 内部也有自己的 call stack 用来记住当前正在渲染的组件。比如：&lt;code class=&quot;language-text&quot;&gt;[App, Page, Layout, Article /* we&amp;#39;re here */]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因为 React 它旨在呈现 UI trees，所以它和通用语言的 run time 不太相同。这些树必须要一直存在以让我们能和它们交互。DOM 也不会在第一次调用 &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render()&lt;/code&gt; 后消失。&lt;/p&gt;
&lt;p&gt;这可能夸大了这个比喻，但我喜欢将 React components 视为 “call tree” 而不仅仅是一个 ”call stack”。当我们从 &lt;code class=&quot;language-text&quot;&gt;Article&lt;/code&gt; component 中退出时，它的 ”call tree” 不会被销毁。我们需要在&lt;a href=&quot;https://medium.com/react-in-depth/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7&quot;&gt;某个地方&lt;/a&gt;保留本地状态和对 host instance 的引用。&lt;/p&gt;
&lt;p&gt;这些 “call tree” frames 会在被摧毁的同时带走保存的本地状态和 host instances，但这仅仅在 &lt;a href=&quot;#reconciliation&quot;&gt;reconciliation&lt;/a&gt; 中才有可能发生。如果你之前看过 React 源码，你可能知道这些 frame 被称之为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Fiber_(computer_science)&quot;&gt;Fibers&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Fiber 就是本地状态实际存在的地方。当状态更新时，React 会将这些 Fibers 标记为需要 reconciliation，并调用这些组件。&lt;/p&gt;
&lt;h2 id=&quot;context&quot;&gt;&lt;a href=&quot;#context&quot; aria-label=&quot;context permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Context&lt;/h2&gt;
&lt;p&gt;在 React 中，我们通过 props 在组件之间一层一层地传递 things。有时，大量的组件需要同样的 thing—比如，当前用户选中的主题。如果一级一级地往下传递的话，实在太笨重了。&lt;/p&gt;
&lt;p&gt;React 使用 &lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;Context&lt;/a&gt; 解决这个问题,它本质上很像组件的 &lt;a href=&quot;http://wiki.c2.com/?DynamicScoping&quot;&gt;dynamic scoping&lt;/a&gt;。它就像一个虫洞一样，让你将一些东西放在顶部，而每一个在底部的子节点都能去夺取它，并在它改变的时候重新渲染。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ThemeContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;light&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Default value as a fallback&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DarkApp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ThemeContext.Provider&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dark&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyComponents&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ThemeContext.Provider&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SomeDeeplyNestedChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Depends on where the child is rendered&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; theme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ThemeContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当 &lt;code class=&quot;language-text&quot;&gt;SomeDeeplyNestedChild&lt;/code&gt; 渲染时，&lt;code class=&quot;language-text&quot;&gt;useContext(ThemeContext)&lt;/code&gt; 将会向上去寻找最近的 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;ThemeContext.Provider&amp;gt;&lt;/code&gt;，并使用它的 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;。（实际上，React 还维护了一个 context stack）&lt;/p&gt;
&lt;p&gt;如果没有 &lt;code class=&quot;language-text&quot;&gt;ThemeContext.Provider&lt;/code&gt; 存在，&lt;code class=&quot;language-text&quot;&gt;useContext(ThemeContext)&lt;/code&gt; 的结果就是调用 &lt;code class=&quot;language-text&quot;&gt;createContext()&lt;/code&gt; 时在第一个参数里传递的值。在我们的例子中，就是 &lt;code class=&quot;language-text&quot;&gt;&amp;#39;light&amp;#39;&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;effects&quot;&gt;&lt;a href=&quot;#effects&quot; aria-label=&quot;effects permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Effects&lt;/h2&gt;
&lt;p&gt;我们之前提到 React component 不应该在渲染的时候，有副作用，但是副作用在某些情况下确实很有必要。我们经常需要管理 focus，在 canvas 上画图，订阅一个数据源等等。&lt;/p&gt;
&lt;p&gt;React 通过声明一个 effect 来实现它：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`You clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;You clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Click me&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要可能，React 会在浏览器重绘屏幕之前尽可能的延迟运行这些 effects。这很棒，因为类似于数据源订阅的这些代码不应该对 &lt;a href=&quot;https://calibreapp.com/blog/time-to-interactive/&quot;&gt;time to interactive&lt;/a&gt; 和 &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint&quot;&gt;time to first paint&lt;/a&gt; 有负面影响。（这有一个极少使用的 &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#uselayouteffect&quot;&gt;hook&lt;/a&gt; 给你提供同步调用 effect 的行为。尽量别用它）&lt;/p&gt;
&lt;p&gt;Effect 不会自运行一次，它们既在组件创建的时候会运行，也在组件更新的时候运行。&lt;/p&gt;
&lt;p&gt;Effects 有些时候需要一起清理操作，比如订阅的场景。为了清理它们，effect 可以返回一个函数：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React 将会在下次应用 effect 之前执行这个函数，当然组件摧毁之前也会执行。&lt;/p&gt;
&lt;p&gt;有些时候，每次渲染都重新运行 effect 不让人接受。你可以告诉 React，如果当前变量没有改变的话，&lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects&quot;&gt;跳过&lt;/a&gt; 这次 effect 的运行。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`You clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，这通常是一个过早优化，并在你不熟悉 JS 闭包的原理下会导致问题。&lt;/p&gt;
&lt;p&gt;比如下面这个代码就有 bug：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为 &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt; 相当于告诉 React ”永远不要重新调用这个 effect”，这就导致了 bug。因为这个 effect 的闭包捕获了 &lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt;，而 &lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt; 可能会引用其他的 props 或者 state。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果 effect 没有重新运行的话，&lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt; 将会保持第一次渲染的那个版本，因此 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 将永远都是 0.&lt;/p&gt;
&lt;p&gt;为了解决这个问题，确保你声明的依赖数组中，包含了&lt;strong&gt;所有&lt;/strong&gt;可能会改变的东西，包括函数：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; DataSource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeSubscription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;handleChange&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据你的代码而定，这里还会出现不必要的重订阅，因为 &lt;code class=&quot;language-text&quot;&gt;handleChange&lt;/code&gt; 在每次渲染的时候都是不同的。 &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usecallback&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useCallback&lt;/code&gt;&lt;/a&gt; 可以帮助解决这个问题。或者你就让它重订阅，因为浏览器环境的 &lt;code class=&quot;language-text&quot;&gt;addEventListener&lt;/code&gt; 非常快，让它运行问题不大。因为一个小优化导致更多问题得不偿失。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（你可以在&lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot;&gt;这里&lt;/a&gt;学到更多关于 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 和其他官方 Hook）&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;custom-hooks&quot;&gt;&lt;a href=&quot;#custom-hooks&quot; aria-label=&quot;custom hooks permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Custom Hooks&lt;/h2&gt;
&lt;p&gt;因为 &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; 其实都是函数调用，我们可以将它们组合到自己的 Hook 中：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyResponsiveComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useWindowWidth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Our custom Hook&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Window width is &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useWindowWidth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setWidth&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerWidth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleResize&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerWidth&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;resize&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleResize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;resize&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleResize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义（Custom Hooks）可以让不同的组件服用逻辑，注意&lt;strong&gt;状态 本身&lt;/strong&gt;是不共享的。每一个调用 Hook 的组件都拥有它们自己单独的状态。
/你可以在&lt;a href=&quot;https://reactjs.org/docs/hooks-custom.html&quot;&gt;这里&lt;/a&gt;学到更多自定义 Hooks 的写法/&lt;/p&gt;
&lt;h2 id=&quot;static-use-order&quot;&gt;&lt;a href=&quot;#static-use-order&quot; aria-label=&quot;static use order permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Static Use Order&lt;/h2&gt;
&lt;p&gt;你可以认为 &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; 是一个用来定义“React 状态变量”的语法。但它毕竟不是&lt;strong&gt;真正&lt;/strong&gt;的语法，我们还是在写 JS。但我们将 React 视为运行时环境，并且由于 React 定制 JS 来描述 UI 树，因此其功能有时会更接近语言层面。&lt;/p&gt;
&lt;p&gt;如果 &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; &lt;strong&gt;是&lt;/strong&gt;一个语法，那么它在顶级作用域就是有意义的。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 😉 Note: not a real syntax&lt;/span&gt;
component &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;You clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;        Click me&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果将它放在一个条件语法或者回调中，甚至放在组件外意味着什么？&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 😉 Note: not a real syntax&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// This is local state... of what?&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

component &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// What happens to it when condition is false?&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// What happens to it when we leave a function?&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// How is this different from a variable?&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;React state 对于 &lt;strong&gt;component&lt;/strong&gt; 来说是局部的，并且它在环境中具有唯一性。如果 &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; 是一个真实的语法，那么将它扩展到 &lt;strong&gt;component&lt;/strong&gt; 的顶层也是有意义的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 😉 Note: not a real syntax&lt;/span&gt;
component &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Only valid here&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// This would be a syntax error&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; use &lt;span class=&quot;token function&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这和 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; 只能在顶级作用域工作的情形很类似。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;当然，&lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; 并不是真正的语法。&lt;/em&gt;（它不会给你带来好处，还带来了很多问题）&lt;/p&gt;
&lt;p&gt;不过，React &lt;strong&gt;确实&lt;/strong&gt;期望所有对于 Hooks 的调用，在存在于 component 和 &lt;code class=&quot;language-text&quot;&gt;no-if&lt;/code&gt; 语句中。这些 &lt;a href=&quot;https://reactjs.org/docs/hooks-rules.html&quot;&gt;Hooks 的规则&lt;/a&gt; 可以通过一个 &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react-hooks&quot;&gt;a linter plugin&lt;/a&gt; 来强制执行。关于这个设计选择的讨论十分激烈，但是实际我并没有看到它让人感到困惑。我也写了&lt;a href=&quot;https://overreacted.io/why-do-hooks-rely-on-call-order/&quot;&gt;一篇文章&lt;/a&gt;来解释为什么一些常见的提案达不到效果。&lt;/p&gt;
&lt;p&gt;在内部，Hooks 由一个 &lt;a href=&quot;https://dev.to/aspittel/thank-u-next-an-introduction-to-linked-lists-4pph&quot;&gt;链表&lt;/a&gt; 实现。当你调用 &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; 的时候，我们会移动指针到下一个 hook。当我们退出 component 的 &lt;a href=&quot;#call-tree&quot;&gt;“call tree” frame&lt;/a&gt;，我们会保存这个结果直到下一次 render。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e&quot;&gt;这篇文章&lt;/a&gt; 针对 Hooks 内部如何工作提供了一个简单的解释。数组可能比链表在理解上更加容易些。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Pseudocode&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hooks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hooks&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Next renders&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; hooks&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// First render&lt;/span&gt;
  hooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Prepare to render&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
hooks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fiber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hooks &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Call the component&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;YourComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Remember the state of Hooks&lt;/span&gt;
fiber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hooks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hooks&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/（如果你好奇的话，代码在&lt;a href=&quot;https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js&quot;&gt;这&lt;/a&gt;）/
这是每一个 &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; 调用如何找到正确的 state 的粗略的介绍。正如我们&lt;a href=&quot;#reconciliation&quot;&gt;之前&lt;/a&gt;学到的，“matching things up” 在 React 中并不是新鲜事 — reconciliation 用类似的方法在不同的渲染中匹配 elements。&lt;/p&gt;
&lt;h2 id=&quot;whats-left-out&quot;&gt;&lt;a href=&quot;#whats-left-out&quot; aria-label=&quot;whats left out permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s Left Out&lt;/h2&gt;
&lt;p&gt;We’ve touched on pretty much all important aspects of the React runtime environment. If you finished this page, you probably know React in more detail than 90% of its users. And there’s nothing wrong with that!&lt;/p&gt;
&lt;p&gt;There are some parts I left out — mostly because they’re unclear even to us. React doesn’t currently have a good story for multipass rendering, i.e. when the parent render needs information about the children. Also, the &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot;&gt;error handling API&lt;/a&gt; doesn’t yet have a Hooks version. It’s possible that these two problems can be solved together. Concurrent Mode is not stable yet, and there are interesting questions about how Suspense fits into this picture. Maybe I’ll do a follow-up when they’re fleshed out and Suspense is ready for more than &lt;a href=&quot;https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactlazy-code-splitting-with-suspense&quot;&gt;lazy loading&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think it speaks to the success of React’s API that you can get very far without ever thinking about most of these topics. Good defaults like the reconciliation heuristics do the right thing in most cases. Warnings like the &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; warning nudge you when you risk shooting yourself in the foot.&lt;/p&gt;
&lt;p&gt;If you’re a UI library nerd, I hope this post was somewhat entertaining and clarified how React works in more depth. Or maybe you decided React is too complicated and you’ll never look it again. In either case, I’d love to hear from you on Twitter! Thank you for reading.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[一些 React 中的刁钻问题]]></title><description><![CDATA[收集一些不为人所知的，React 的细节问题。帮助自己理顺 React 内部深层的逻辑。 Synthetic Event 和 DOM Event 同时出现的问题 首先解释下，为什么 React 会有 Synthetic Event 这个概念。主要两个原因 1…]]></description><link>https://github.com/thoamsy/blogs.git/react-trap/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/react-trap/</guid><pubDate>Wed, 02 Jan 2019 23:30:00 GMT</pubDate><content:encoded>&lt;p&gt;收集一些不为人所知的，React 的细节问题。帮助自己理顺 React 内部深层的逻辑。&lt;/p&gt;
&lt;h2 id=&quot;synthetic-event-和-dom-event-同时出现的问题&quot;&gt;&lt;a href=&quot;#synthetic-event-%E5%92%8C-dom-event-%E5%90%8C%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98&quot; aria-label=&quot;synthetic event 和 dom event 同时出现的问题 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Synthetic Event 和 DOM Event 同时出现的问题&lt;/h2&gt;
&lt;p&gt;首先解释下，为什么 React 会有 Synthetic Event 这个概念。主要两个原因&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;13 年的时候，浏览器发展比如今天，不同的浏览器在同一个概念上，可能会有不同的 API，另外那个时候还需要兼容 IE8。&lt;/li&gt;
&lt;li&gt;针对大量创建 Event Object 的场景，有一个优化。这就诞生了 Event Pooling 这个概念。换句话说，在 React 中不需要之前的&lt;strong&gt;事件委托&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而 React 为了实现 Synthetic Event，是通过将所有的 &lt;code class=&quot;language-text&quot;&gt;onXXX&lt;/code&gt; 事件注册在 &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; 上来实现的。所以这就在某些十分特殊的场景下，会产生一些问题。看下面代码，或者 &lt;a href=&quot;https://codesandbox.io/s/v1m3o069j7&quot;&gt;sandbox&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useCallback&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleClickOnDocument&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;handling event on document&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleClickOnWindow&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;handling event on window&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnDocument&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnWindow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnDocument&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnWindow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;handling event on div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Click Me
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; App&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果点击那个 button 会发生什么？在传统的 DOM 代码中，很明显什么都不会输出。但是在 React 中，我们会得到&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;handling event on the document&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一起来分析下原因&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#%E5%8E%9F%E5%9B%A0&quot; aria-label=&quot;原因 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;原因&lt;/h3&gt;
&lt;p&gt;首先，在 button 被点击后，&lt;code class=&quot;language-text&quot;&gt;stopPropagation&lt;/code&gt; 起作用，使父组件 div 的 &lt;em&gt;onClick&lt;/em&gt; Synthetic Event 不会被调用。另外，原生的 DOM 事件也会被触发。因为 &lt;code class=&quot;language-text&quot;&gt;stopPropagation&lt;/code&gt; 不同于 &lt;code class=&quot;language-text&quot;&gt;stopImmediatePropagation&lt;/code&gt;，所以 &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; 上的事件还是被调用。又因为 &lt;em&gt;window&lt;/em&gt; 是 &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; 的父级，所以就不会继续运行。&lt;/p&gt;
&lt;p&gt;原因已经很明显了，但是我们可以更进一步。如果在 div 上有一个 native DOM 事件，那么在&lt;strong&gt;点击 button 后，到底是 button 的 Synthetic 事件先运行还是 button 的 native 事件？&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useCallback&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useRef &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleClickOnDocument&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;handling event on document&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleClickOnWindow&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;handling event on window&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleClickDiv&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;handling event on div with ref&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnDocument&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnWindow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickDiv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnDocument&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickOnWindow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleClickDiv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;handling event on div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;          console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;          e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;        Click Me&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; App&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直觉上觉得是会打印出&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;button
handle event on div with ref
handling event on the document&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但根据上面的说法， Synthetic Event 会绑定在 document 上，那么根据&lt;strong&gt;冒泡&lt;/strong&gt;的顺序，div 的 native 事件会先运行。可以得出下面结论&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;handling event on div with ref
button
handling event on document&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#%E7%BB%93%E8%AE%BA&quot; aria-label=&quot;结论 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;结论&lt;/h3&gt;
&lt;p&gt;因为 Synthetic Event 会将事件绑定在 document 上，从而导致在和 native dom 事件有一定逻辑关联的时候，出现一些不符合直觉的问题。这种场景下，一定需要小心。&lt;/p&gt;
&lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5&quot; aria-label=&quot;相关链接 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;相关链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/12518&quot;&gt;Event listener attached to document will still be called after calling event.stopPropagation() · Issue #12518 · facebook/react · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/events.html&quot;&gt;SyntheticEvent – React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;context-的更新，会更新--provider-️-consumer-之间所有的组件么&quot;&gt;&lt;a href=&quot;#context-%E7%9A%84%E6%9B%B4%E6%96%B0%EF%BC%8C%E4%BC%9A%E6%9B%B4%E6%96%B0--provider-%EF%B8%8F-consumer-%E4%B9%8B%E9%97%B4%E6%89%80%E6%9C%89%E7%9A%84%E7%BB%84%E4%BB%B6%E4%B9%88&quot; aria-label=&quot;context 的更新，会更新  provider ️ consumer 之间所有的组件么 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Context 的更新，会更新 ✨ Provider ➡️ Consumer 之间所有的组件么&lt;/h2&gt;
&lt;p&gt;这个问题提出来的依据主要是，&lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 在 React 中是会&lt;strong&gt;一定会带来更新的&lt;/strong&gt;，除非设置了 &lt;code class=&quot;language-text&quot;&gt;memo&lt;/code&gt; 或者 &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt; 这些优化措施。换句话说，一般情况下，每次 Context 中 value 的更新，必定伴随着一个 setState 的过程。而这个过程必定导致含有 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Context.Provider&amp;gt;&lt;/code&gt; 的组件往下更新，也就让我们无法观察到这个过程的更进一步的细节。&lt;/p&gt;
&lt;p&gt;如果想要探究这个问题的话，需要三个组件，分别被称为 App, Foo, Bar。&lt;/p&gt;
&lt;p&gt;App 是父组件，它的 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 中就返回了包含 Provider 的代码。&lt;/p&gt;
&lt;p&gt;Foo 组件是这个 Context 的消费者，它通过 Provider 拿到对应的展示内容。&lt;/p&gt;
&lt;p&gt;Bar 则是两个组件中的中间层，它的作用就是承接 Foo 和 App。同时它的 &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt; 会设置为 &lt;strong&gt;false&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;借助 Hooks，有下面的实验 🧪 代码。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; memo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useCallback &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; FooContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;FooContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;i am &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Bar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setValue&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;This is a context test&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;addValue&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;click me!!!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FooContext.Provider&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bar&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FooContext.Provider&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token plain-text&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;界面很 简单
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/54994c1a9ee04a660dadf84f9d566906/27d9c/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 39.449541284403665%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;158\&apos;%3e%3cpath d=\&apos;M1 29c0 1 1 2 3 2s3 1 3 9c0 7 0 8 2 8s2-1 2-8v-9h3c2 0 3 0 3-2s-1-2-8-2-8 0-8 2m19-1l-1 10c0 10 0 10 2 10 3 0 3 0 3-6 0-5 1-5 3-5 1 0 2 0 2 5 0 6 0 6 3 6 2 0 2 0 2-6 0-8-3-11-8-9-2 1-2 1-2-2s-3-5-4-3m192 3l-1 2c-2 0-2 3-1 3l2 6c0 5 1 6 4 6l3-1-1-2c-2 0-2-1-2-4 0-4 0-5 2-5l1-1-1-2-2-2-2-2-2 2m17-1v1l-1 2c-2 0-2 3-1 3l2 6c0 5 1 6 4 6l3-1-1-2c-2 0-2-1-2-4 0-4 0-5 2-5l1-1-1-2-2-2c0-2-4-3-4-1m42 1l-1 2-1 2 1 1 1 5 1 6c2 2 6 1 6 0l-1-2-1-4 1-5 1-1-1-2-1-2-3-2-2 2M47 33c-4 3-3 7 2 9l4 2h-6l-3-1c-3 2 2 5 6 5 9 0 10-7 2-9l-4-2h5c1 2 4 0 3-1l-6-4-3 1m29 0c-4 3-3 7 2 9l4 2h-6c-1-2-4 0-3 1 0 2 5 4 8 3 7-1 7-7 1-9-3 0-5-1-5-2h5c1 2 4 0 3-1l-6-4-3 1m23 0c-3 1-5 3-4 5l3-1c3-1 6-1 6 1l-3 1c-4 0-7 2-7 4 0 3 2 5 5 5h9v-6c0-8-3-11-9-9m22 0c-2 1-5 5-5 8s5 8 8 8 8-5 6-6h-3c-3 3-5 2-5-3 0-3 0-4 2-4l3 1c0 2 4 3 4 1 0-4-6-6-10-5m16 0c-4 2-5 9-2 13 2 3 9 3 11 0 5-6-1-16-9-13m20 1h-2l-2-1c-2 0-2 1-2 8 0 6 0 7 2 7s2-1 2-5c0-5 2-8 4-7s2 2 2 6c0 5 0 6 2 6 3 0 3-12 0-14l-3-2-3 2m25-1c-4 2-5 9-2 13s12 3 12-2h-3c-1 2-6 1-6 0-1-2 0-2 4-2 6 0 7-1 5-5s-6-6-10-4m60 0c-9 5-4 18 5 15 3-1 5-3 5-5l-5 1c-2 1-5 1-5-1l5-1c5 0 5 0 5-3 0-5-6-8-10-6m16 0c-4 3-3 7 2 9l4 2h-6l-3-1c-3 2 2 5 6 5 9 0 10-7 2-9l-4-2h5c1 2 4 0 3-1l-6-4-3 1m-62 4l2 3-2 4-2 4h3l3-2 1-2 2 2 4 2h2l-2-4-3-3 2-4c2-3 2-4 0-4l-3 2-2 2-1-2-4-2h-2l2 4\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/54994c1a9ee04a660dadf84f9d566906/f2fbe/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.webp 200w,
/blogs/static/54994c1a9ee04a660dadf84f9d566906/e227a/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.webp 400w,
/blogs/static/54994c1a9ee04a660dadf84f9d566906/0cbce/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.webp 800w,
/blogs/static/54994c1a9ee04a660dadf84f9d566906/d1d7c/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.webp 872w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/54994c1a9ee04a660dadf84f9d566906/9ec3c/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.png 200w,
/blogs/static/54994c1a9ee04a660dadf84f9d566906/c7805/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.png 400w,
/blogs/static/54994c1a9ee04a660dadf84f9d566906/8ff1e/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.png 800w,
/blogs/static/54994c1a9ee04a660dadf84f9d566906/27d9c/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.png 872w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/54994c1a9ee04a660dadf84f9d566906/8ff1e/FABCB7EA-DB45-4A07-B5D7-AFDB521F6219.png&quot;
          alt=&quot;FABCB7EA DB45 4A07 B5D7 AFDB521F6219&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
通过点击 &lt;em&gt;click me&lt;/em&gt; 那个 button，就能看到 /i am / 的变化。同时注意 Foo 和 Bar 中都有一个 &lt;code class=&quot;language-text&quot;&gt;console.count&lt;/code&gt; 用来观察这个组件是否重新渲染。
得到的结果就是，&lt;strong&gt;foo 会随着每次点击都打印，而 bar 不会&lt;/strong&gt;。如果将 memo 移除的话，每次 bar 也会被打印出来了。&lt;/p&gt;
&lt;p&gt;最后结论就是：&lt;strong&gt;Provider 的更新不会带动 Consumer 之间的组件更新&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;顺便一提&quot;&gt;&lt;a href=&quot;#%E9%A1%BA%E4%BE%BF%E4%B8%80%E6%8F%90&quot; aria-label=&quot;顺便一提 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;顺便一提&lt;/h3&gt;
&lt;p&gt;当然，其实这个问题通过推断就能得到结果的。因为新的 Context 带来的一个重要特性就是&lt;strong&gt;即使 shouldComponentUpdate 返回 false，子组件也会被更新。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们把上面的 Foo 和 Bar 合成一个&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Bar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;FooContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;i am &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也是一样的效果。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Lazy 的实现原理]]></title><description><![CDATA[实现   其实是内部维护是一个新的对象，拥有四种状态，分别对应 Promise： Pending Resolved Rejected Default 可以简单的通过源码来分析 需要注意这里的在 Pending 和 default 状态下为什么都是 throw。因为 React…]]></description><link>https://github.com/thoamsy/blogs.git/react-lazy/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/react-lazy/</guid><pubDate>Sun, 23 Dec 2018 00:20:00 GMT</pubDate><content:encoded>&lt;p&gt;实现 &lt;code class=&quot;language-text&quot;&gt;React Lazy&lt;/code&gt; 其实是内部维护是一个新的对象，拥有四种状态，分别对应 Promise：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pending&lt;/li&gt;
&lt;li&gt;Resolved&lt;/li&gt;
&lt;li&gt;Rejected&lt;/li&gt;
&lt;li&gt;Default&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以简单的通过源码来分析&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; readLazyComponentType&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thenable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Thenable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactStatus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Resolved&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactResult&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Rejected&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactResult&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Pending&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactStatus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Pending&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token parameter&quot;&gt;resolvedValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactStatus &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Pending&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactStatus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Resolved&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; resolvedValue &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;object&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; resolvedValue &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token comment&quot;&gt;// If the `default` property is not empty, assume it&apos;s the result&lt;/span&gt;
              &lt;span class=&quot;token comment&quot;&gt;// of an async import() and use that. Otherwise, use the&lt;/span&gt;
              &lt;span class=&quot;token comment&quot;&gt;// resolved value itself.&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; defaultExport &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolvedValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; any&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;default&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              resolvedValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultExport &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; resolvedValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              resolvedValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resolvedValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; resolvedValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactStatus &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Pending&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactStatus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Rejected&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意这里的在 Pending 和 default 状态下为什么都是 throw。因为 React 为了实现 Suspense，是通过 throw 一个 Promise 后，在 React 的 commit Work 中有一个 &lt;code class=&quot;language-text&quot;&gt;try catch&lt;/code&gt; 操作来处理它，并进入 Suspense 的流程。&lt;/p&gt;
&lt;p&gt;同样的，在一个 React 中使用到了 Lazy Component 的代码&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; ClassComponent&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Component &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; failedUnitOfWork&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isLegacyContextProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;popLegacyContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;failedUnitOfWork&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; ClassComponentLazy&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Component &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getResultFromResolvedThenable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;failedUnitOfWork&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isLegacyContextProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;popLegacyContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;failedUnitOfWork&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，Component 和 Class Component 的区别就是 type 的读取方式不一样。而 &lt;code class=&quot;language-text&quot;&gt;getResultFromResolvedThenable&lt;/code&gt; 就是读取这个参数的 &lt;code class=&quot;language-text&quot;&gt;_reactResult&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;而 &lt;code class=&quot;language-text&quot;&gt;getResultFromResolvedThenable&lt;/code&gt; 其实实现十分简单。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getResultFromResolvedThenable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;thenable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_reactResult&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，&lt;code class=&quot;language-text&quot;&gt;React.lazy&lt;/code&gt; 也很符合我们的预期。它会维护 &lt;code class=&quot;language-text&quot;&gt;_reactResult&lt;/code&gt; 以维护最终的 &lt;strong&gt;type(Component)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; lazy&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Thenable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; thenable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thenable &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Lazily create thenable by wrapping in an extra thenable.&lt;/span&gt;
        thenable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        ctor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// React uses these fields to store the result.&lt;/span&gt;
    _reactStatus&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    _reactResult&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过设置 &lt;code class=&quot;language-text&quot;&gt;status&lt;/code&gt; 为 &lt;em&gt;-1&lt;/em&gt;，使 React 在开始 &lt;em&gt;read&lt;/em&gt; 这个 Lazy Component 的时候，才开始运行 &lt;code class=&quot;language-text&quot;&gt;ctor&lt;/code&gt;，在正常场景下 &lt;code class=&quot;language-text&quot;&gt;ctor&lt;/code&gt; 是一个类似于 &lt;code class=&quot;language-text&quot;&gt;() =&amp;gt; import(&amp;#39;./src&amp;#39;)&lt;/code&gt; 的返回 Promise 的函数。所以 React 原生实现 lazy load 的原因是：Suspense 配合一个内部定义的 &lt;code class=&quot;language-text&quot;&gt;Thenable&lt;/code&gt; 对象，同时让 Work 支持 catch Promise。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Inside look at modern web browser（翻译）]]></title><description><![CDATA[原文系列:  https://developers.google.cn/web/updates/2018/09/inside-browser-part1 之前，我们提到了 Chrome 的多进程构架和 URL…]]></description><link>https://github.com/thoamsy/blogs.git/browser/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/browser/</guid><pubDate>Fri, 05 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;原文系列: &lt;a href=&quot;https://developers.google.cn/web/updates/2018/09/inside-browser-part1&quot;&gt;https://developers.google.cn/web/updates/2018/09/inside-browser-part1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前，我们提到了 Chrome 的多进程构架和 URL 导航的实现。在这片文章中，我们要一起去看看渲染进程到底做了什么&lt;/p&gt;
&lt;p&gt;渲染过程（Render Progress）和 Web 的性能息息相关。也因为在渲染过程中会发生很多事情，本文仅仅介绍它的冰山一角。如果你想深入的了解，&lt;a href=&quot;https://developers.google.cn/web/fundamentals/performance/why-performance-matters/&quot;&gt;Why Performance Matters&lt;/a&gt; 有更多的资源。&lt;/p&gt;
&lt;h2 id=&quot;渲染过程处理-web-内容&quot;&gt;&lt;a href=&quot;#%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B%E5%A4%84%E7%90%86-web-%E5%86%85%E5%AE%B9&quot; aria-label=&quot;渲染过程处理 web 内容 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;渲染过程处理 Web 内容&lt;/h2&gt;
&lt;p&gt;渲染过程负责在 Tab 中发生的一切事情。在一次渲染过程中，主线程会处理绝大部分你为用户准备的代码。如果还包含了 Web Worker 或者 Service Worker（PWA） 的代码，这部分会由 Worker 线程来处理。&lt;strong&gt;Compositor（合成）&lt;/strong&gt; 和 &lt;strong&gt;Raster（栅格）&lt;/strong&gt;也属于渲染进程的一部分，使页面渲染的更为高效和平滑。&lt;/p&gt;
&lt;p&gt;渲染进程的核心任务是将 HTML，CSS，JavaScript 转化成用户可以与之交互的 Web 网页。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/renderer.png&quot;&gt;
Figure 1: 渲染进程包括了一个主线程，Worker 线程，一个 Compositor 线程 和一个 Raster 线程。&lt;/p&gt;
&lt;h2 id=&quot;parsing&quot;&gt;&lt;a href=&quot;#parsing&quot; aria-label=&quot;parsing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parsing&lt;/h2&gt;
&lt;h3 id=&quot;dom-的创建过程&quot;&gt;&lt;a href=&quot;#dom-%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B&quot; aria-label=&quot;dom 的创建过程 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DOM 的创建过程&lt;/h3&gt;
&lt;p&gt;当渲染进程接收到来自 Navigation（详情看 Part2）的提交信息并开始接受 HTML 数据的时候，主线程开始将 HTML 中的字符串转化成 &lt;strong&gt;D&lt;/strong&gt;ocument &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;M&lt;/strong&gt;odel（&lt;strong&gt;DOM&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;DOM 即是浏览器内部呈现网页的方式，同时也是一种开发者可以通过 JavaScript 与之交互的数据结构和 API。
&lt;a href=&quot;https://html.spec.whatwg.org/&quot;&gt;HTML Standard&lt;/a&gt; 定义了将 HTML 转化成 DOM 的过程。你应该注意到过，浏览器从来不会在解析 HTML 的时候抛出一个错误。比如，少了 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; 的标签是一个合法的 HTML。像 &lt;code class=&quot;language-text&quot;&gt;Hi! &amp;lt;b&amp;gt;I&amp;#39;m &amp;lt;i&amp;gt;Chrome&amp;lt;/b&amp;gt;!&amp;lt;/i&amp;gt;&lt;/code&gt; （b 标签在 i 之前就闭合了）这种错误的标记，会被浏览器看成 &lt;code class=&quot;language-text&quot;&gt;Hi!&amp;lt;b&amp;gt;I&amp;#39;m &amp;lt;i&amp;gt;Chrome&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;i&amp;gt;!&amp;lt;/i&amp;gt;&lt;/code&gt; 来理解。这是因为 HTML 的标准就是特意设计成能够将错误优雅的处理掉。如果你好奇这内部的细节，可以阅读 HTML 标准中的 &lt;a href=&quot;https://html.spec.whatwg.org/multipage/parsing.html#an-introduction-to-error-handling-and-strange-cases-in-the-parser&quot;&gt;An introduction to error handling and strange cases in the parser&lt;/a&gt; 这一节。&lt;/p&gt;
&lt;h3 id=&quot;子资源加载&quot;&gt;&lt;a href=&quot;#%E5%AD%90%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD&quot; aria-label=&quot;子资源加载 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;子资源加载&lt;/h3&gt;
&lt;p&gt;一个网页通常还会有图片，CSS 和 JS 等这些外部资源。这些文件需要从网络或者缓存中被加载。主线会在解析 HTML 文件并构建 DOM 的过程中，一个一个的处理它们。但是为了提速，“（预加载扫描器）preload scanner” 会并行运行。如果存在 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;img&amp;gt; 和 &amp;lt;link&amp;gt;&lt;/code&gt; 在 HTML 中，预加载扫描器会默默地查看这些标记，并在浏览进程中向 network 线程发送请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/dom.png&quot;&gt;
Figure 2: 主线程解析 HTML 文档并构建 DOM 树&lt;/p&gt;
&lt;h3 id=&quot;javascript-会堵塞解析&quot;&gt;&lt;a href=&quot;#javascript-%E4%BC%9A%E5%A0%B5%E5%A1%9E%E8%A7%A3%E6%9E%90&quot; aria-label=&quot;javascript 会堵塞解析 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JavaScript 会堵塞解析&lt;/h3&gt;
&lt;p&gt;当 HTML 解析器找到一个 &lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt; 标签的时候，它会暂停解析 HTML 文档，并开始下载，解析并执行 JS 代码。为什么？因为 JS 可以使用像 &lt;code class=&quot;language-text&quot;&gt;document.write()&lt;/code&gt; 这种改变了整个 DOM 结构的方法来改变文档的形状（shape of the document)。这就是为什么 HTML 解析器在它可以继续解析 HTML 文档之前，必须等待 Javascript 运行结束。如果你对 JS 的执行细节好奇的话，&lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;V8 团队有一篇关于它的博客介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;暗示浏览器哪些资源是可以加载的&quot;&gt;&lt;a href=&quot;#%E6%9A%97%E7%A4%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%93%AA%E4%BA%9B%E8%B5%84%E6%BA%90%E6%98%AF%E5%8F%AF%E4%BB%A5%E5%8A%A0%E8%BD%BD%E7%9A%84&quot; aria-label=&quot;暗示浏览器哪些资源是可以加载的 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;暗示浏览器哪些资源是可以加载的&lt;/h2&gt;
&lt;p&gt;Web 开发者有很多种方式可以按时浏览器如何恰当地加载资源。如果你的 JS 不使用 &lt;code class=&quot;language-text&quot;&gt;document.write()&lt;/code&gt;，你可以给 &lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt; 标签添加 &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; 或者 &lt;code class=&quot;language-text&quot;&gt;defer&lt;/code&gt; attribute。这样浏览器就异步的加载和运行 JS 代码，而不会堵塞解析过程。你同时也可以在恰当的时候使用 &lt;a href=&quot;https://developers.google.cn/web/fundamentals/primers/modules&quot;&gt;JavaScript module&lt;/a&gt;。&lt;code class=&quot;language-text&quot;&gt;&amp;lt;link ref=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; 也是一种通知浏览器，当前资源可以尽快下载的方式。可以通过阅读 &lt;a href=&quot;https://developers.google.cn/web/fundamentals/performance/resource-prioritization&quot;&gt;Resource Prioritization – Getting the Browser to Help You&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;h2 id=&quot;style-calculation&quot;&gt;&lt;a href=&quot;#style-calculation&quot; aria-label=&quot;style calculation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Style calculation&lt;/h2&gt;
&lt;p&gt;因为 CSS 的存在，仅仅有一个 DOM 是不足以让浏览器了解整个网页会是怎么样的。主线程会解析 CSS，并为每一个 DOM 节点计算出最终样式。这些信息会基于 CSS 选择器来呈现每一个元素被应用了哪些样式。你可以在通过开发者工具的 &lt;code class=&quot;language-text&quot;&gt;computed&lt;/code&gt; 来看到这些信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/computedstyle.png&quot;&gt;
Figure 3: 主线程解析 CSS 得到计算过的样式&lt;/p&gt;
&lt;p&gt;即使你不提供任何 CSS，每一个 DOM 节点还是会有一个被计算过的样式。&lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 标签看上去会比 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 更大，并且每一个元素的 margin 也是不一样的。这是因为浏览器维护了一个默认样式表。如果你想了解 Chrome 的默认样式，可以阅读&lt;a href=&quot;https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/css/html.css&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;layout&quot;&gt;&lt;a href=&quot;#layout&quot; aria-label=&quot;layout permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Layout&lt;/h2&gt;
&lt;p&gt;现在渲染进程知道了 DOM 的结构和每一个节点的样式，但是这些信息还不足以去渲染一个页面。相信你在电话的另一头努力地给你的朋友描述一幅画。“有一个巨大的红色的圆和一个小一点的蓝色正方形”是不足以让你的朋友想象出这幅画的样子的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/tellgame.png&quot;&gt;
Figure 4: A person standing in front of a painting, phone line connected to the other person&lt;/p&gt;
&lt;p&gt;Layout 是一个找到元素的几何信息的过程。主线程通过遍历 DOM，计算样式，并创建一个包换了 x y 坐标信息和边框大小的 layout 树。Layout 树可能和 DOM 树很相似，但是它仅仅包含了在能在页面中被看到的信息。比如 &lt;code class=&quot;language-text&quot;&gt;display: none&lt;/code&gt; 一旦被应用到每个元素上，这个元素就不是 layout 树的一部分。相似的，如果一个伪元素 &lt;code class=&quot;language-text&quot;&gt;p::before { content: &amp;quot;Hi!&amp;quot; }&lt;/code&gt;被应用了，它虽然不会出现在 DOM 树上，但是属于 layout 树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/layout.png&quot;&gt;
Figure 5: 主线程遍历 DOM 树，通过已经计算的样式，得到 layout 树&lt;/p&gt;
&lt;p&gt;确定页面的布局是一项由挑战性的任务。即使是最简单的页面布局，如从上到下的 block flow，也必须考虑字体的大小以及在哪里划分它们，因为它们会影响段落的大小和形状，还会影响下一段所需的位置。&lt;/p&gt;
&lt;p&gt;&lt;a href=&apos;https://developers.google.cn/web/updates/images/inside-browser/part3/layout.mp4&apos;&gt;layout.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figure 6: 因为一个断行的改变，layout 也跟着改变&lt;/p&gt;
&lt;p&gt;CSS 还能让元素浮动到一边，隐藏超出边界的部分，并修改写入方向。你可以想象到，layout 阶段其实是非常复杂的任务。在 Chrome 中，有专门一个团队的工程师致力于 layout 的工作。如果你想了解更多有关他们的工作细节，&lt;a href=&quot;https://www.youtube.com/watch?v=Y5Xa4H2wtVA&quot;&gt;few talks form BlinkOn Conference&lt;/a&gt; 记录了大量的有趣的内容。&lt;/p&gt;
&lt;h2 id=&quot;paint&quot;&gt;&lt;a href=&quot;#paint&quot; aria-label=&quot;paint permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Paint&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/drawgame.png&quot;&gt;
Figure 7: 一个人拿着画笔站在画布前，想着应该先画圆还是先画正方形&lt;/p&gt;
&lt;p&gt;有了 DOM，style，layout 还不足于渲染一个页面。假设你正在努力画一幅画，你知道画的大小，形状，每一个元素所在的位置，但是你还是需要判断绘制它们的顺序。
比如，&lt;code class=&quot;language-text&quot;&gt;z-index&lt;/code&gt; 可能会被设置到当前元素上，在这种情况下，如果按 HTML 定义的顺序来绘制就会得到错误的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/zindex.png&quot;&gt;
Figure 8: 页面的元素按 HTML 元素中定义的元素，导致了错误的结果。因为 z-index 没有被考虑在内&lt;/p&gt;
&lt;p&gt;在绘制（Paint）阶段，主线程遍历 layout 树来创建绘制记录（Paint record)。绘制记录是一个绘画过程的注解，如“先背景，接着文本，然后矩形”。如果你使用过 &lt;code class=&quot;language-text&quot;&gt;canvas&lt;/code&gt;，那么这个过程对你来说应该很熟悉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/paint.png&quot;&gt;
Figure 9: 主线程遍历 layout 树并生成绘制记录&lt;/p&gt;
&lt;h3 id=&quot;updating-rendering-pipeline-is-costly&quot;&gt;&lt;a href=&quot;#updating-rendering-pipeline-is-costly&quot; aria-label=&quot;updating rendering pipeline is costly permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Updating rendering pipeline is costly&lt;/h3&gt;
&lt;p&gt;&lt;a href=&apos;https://developers.google.cn/web/updates/images/inside-browser/part3/trees.mp4&apos;&gt;trees.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figure 10: 有序的生成 DOM ，Style，Layout，Paint Trees&lt;/p&gt;
&lt;p&gt;想要理解渲染一条龙，最重要的一点是&lt;strong&gt;每一步中，都会使用上一个操作的结果作为新的数据。&lt;/strong&gt; 比如修改了 layout 树，那么 paint 树也需要重新生成。
如果你打算为某些元素加动画，浏览器必须在每一帧都重复这些过程。大多数显示器 1 秒刷新 60 次屏幕（60 fps）。当物体在屏幕中移动的时候，出现在每一帧中，人眼就会认为这段动画十分平滑。然后，如果动画在某段时间内丢帧了，页面就会看上去“卡顿”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/pagejank1.png&quot;&gt;
Figure 11：Animation frames on a timeline&lt;/p&gt;
&lt;p&gt;即使你的渲染操作能跟上屏幕的刷新，但是因为这些计算是发生在主线程上，这意味着当有其他的 JS 代码运行的时候，动画就会“掉帧”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/pagejank2.png&quot;&gt;
Figure 12: 在动画帧的时间线上，有一帧被 JS 堵塞了&lt;/p&gt;
&lt;p&gt;你可以使用 &lt;code class=&quot;language-text&quot;&gt;requestAnimationFrame&lt;/code&gt; 将 JS 操作拆分成一小片，它们会分散在每一帧中运行。关于这个话题更深入的部分，请看 &lt;a href=&quot;https://developers.google.cn/web/fundamentals/performance/rendering/optimize-javascript-execution&quot;&gt;Optimize JavaScript Execution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/raf.png&quot;&gt;
Figure 13：在动画帧的时间线上，更小的 JS 块&lt;/p&gt;
&lt;h2 id=&quot;compositing&quot;&gt;&lt;a href=&quot;#compositing&quot; aria-label=&quot;compositing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compositing&lt;/h2&gt;
&lt;h3 id=&quot;你怎样-draw-一个页面&quot;&gt;&lt;a href=&quot;#%E4%BD%A0%E6%80%8E%E6%A0%B7-draw-%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2&quot; aria-label=&quot;你怎样 draw 一个页面 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;你怎样 draw 一个页面&lt;/h3&gt;
&lt;p&gt;&lt;a href=&apos;https://developers.google.cn/web/updates/images/inside-browser/part3/naive_rastering.mp4&apos;&gt;naive_rastering.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Figure 14: naive 的栅格化过程&lt;/p&gt;
&lt;p&gt;现在浏览器知道了文档结构，每一个元素的样式，页面的几何信息，和绘制顺序，接下来怎样 draw 出这个页面呢？将这些信息转化为像素并呈现在屏幕上的过程被称为&lt;strong&gt;栅格化&lt;/strong&gt;。
可能一个比较 naive 的处理这个方式是：仅仅栅格化视口的部分。如果用户滚动着页面，那么在移动帧的过程中，通过继续栅格化来填充缺失的部分。这也是 Chrome 刚发布的时候，采用的策略。然后现代浏览器会使用一种被称为合成（compositing）的更为牛逼（sophisticated）的方式。&lt;/p&gt;
&lt;h3 id=&quot;什么是合成&quot;&gt;&lt;a href=&quot;#%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%88%E6%88%90&quot; aria-label=&quot;什么是合成 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;什么是合成&lt;/h3&gt;
&lt;p&gt;&lt;a href=&apos;https://developers.google.cn/web/updates/images/inside-browser/part3/composit.mp4&apos;&gt;composit.mp4&lt;/a&gt;
Figure 15: 合成过程&lt;/p&gt;
&lt;p&gt;合成是一种用来将一个界面分为多个层，分别将它们栅格化，并在一个叫做合成器的线程中将它们重新合并成一个界面的技术。如果滚动发生了，因为每一个图层（Layer）都早已栅格化，现在说需要做的事情仅仅是合成一个新的帧。而动画也可以通过移动层并将它们组合成一个新的帧的方式来实现。
你可以使用开发者工具中的 Layers 面板来查看你的网页是被分成了哪些层。&lt;/p&gt;
&lt;h3 id=&quot;深入-layer&quot;&gt;&lt;a href=&quot;#%E6%B7%B1%E5%85%A5-layer&quot; aria-label=&quot;深入 layer permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;深入 Layer&lt;/h3&gt;
&lt;p&gt;为了分清楚哪些元素会在哪些图层中出现，主线程需要遍历 layout 树并创建一个 layer 树（在 Performance 面板中，这一部分被称为 Update Layer Tree）。如果界面中那些本该成为单独的层（比如抽屉菜单）却没有成为，你可以使用 CSS 属性 &lt;code class=&quot;language-text&quot;&gt;will-change&lt;/code&gt; 来暗示浏览器，将它提升为一个单独的层。&lt;/p&gt;
&lt;p&gt;你可能会禁不住诱惑让每一个元素都成为一个图层，但是合成大量的层反而会导致这个过程比一帧一帧的栅格化还要慢，关键才是要测量你的渲染性能。关于这个部分的更多细节，请看 &lt;a href=&quot;https://developers.google.cn/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count&quot;&gt;Stick to Compositor-Only Properties and Manager Layer Count&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;raster-and-composite-off-of-the-main-thread&quot;&gt;&lt;a href=&quot;#raster-and-composite-off-of-the-main-thread&quot; aria-label=&quot;raster and composite off of the main thread permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Raster and composite off of the main thread&lt;/h3&gt;
&lt;p&gt;一旦 Layer 树已经创建好，并且 Paint 的顺序是确定的，那么主线程就会将这些信息提交到合成器线程中。合成器线程会栅格化每一个 Layer。有些 Layer 可以和整个页面一样大，所以合成器线程会将它们分为多个图块，接着将每一个图块发送给栅格线程。栅格线程栅格化每一个图块，并将它们存在 GPU 的内存中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/raster.png&quot;&gt;
Figure 17: 栅格线程创建多个位图块，并发送给 GPU&lt;/p&gt;
&lt;p&gt;合成线程还可以根据优先级决定，以便视口（或附近）可以先被栅格化。图层还具有多个 tiliings 用于处理放大操作等。&lt;/p&gt;
&lt;p&gt;一旦图块被栅格化，合成器线程会有一个被称为 &lt;strong&gt;draw quads（绘制四边形）&lt;/strong&gt;的过程来收集这些图块的信息，以创建一个 &lt;strong&gt;compositor frame（合成帧）。&lt;/strong&gt;
Compositor frame 接着会由 IPC 提交到浏览器进程中。此时，可以从 UI 线程中添加其他的合成帧用于浏览器 UI 的改变或者渲染进程。最后这些合成帧会被发送到 GPU 以显示到屏幕上。如果有滚动事件发送，合成器线程会创建新的合成帧发送到 GPU。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.cn/web/updates/images/inside-browser/part3/composit.png&quot;&gt;
Figure 18: 合成器线程创造合成帧的过程。帧先发送到浏览器线程然后发送到 GPU&lt;/p&gt;
&lt;p&gt;合成的优点就是它不依赖主线程。合成线程不需要等待样式的计算或者 JS 的执行。这也是为什么 &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/&quot;&gt;只改变那些会导致合成的属性&lt;/a&gt;被认为是创建平滑动画的最佳选择。如果 layout 或者 paint 需要被再次计算，则主线程又会忙碌起来。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot; aria-label=&quot;总结 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;在这篇文章中，我们探索了渲染一条龙：从解析到合成。但愿你现在有能力去越多更多有关网页性能优化的文章。
在下一篇，也是本系列的最后一篇中，我们将会深入合成线程，一起看看当用户输入事件&lt;code class=&quot;language-text&quot;&gt;mousemove click&lt;/code&gt;的时候会发生什么。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Junior Git]]></title><description><![CDATA[因为 Git 的操作实在太多，但是有些操作在很多时候又很重要，所以写一篇文章记录一下那些容易被忽略, 又较为常用的命令。 git 是饭桶的意思，因为 Linus 的自嘲 git init…]]></description><link>https://github.com/thoamsy/blogs.git/git/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/git/</guid><pubDate>Sun, 12 Aug 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;因为 Git 的操作实在太多，但是有些操作在很多时候又很重要，所以写一篇文章记录一下那些容易被忽略, 又较为常用的命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git 是饭桶的意思，因为 Linus 的自嘲&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-init&quot;&gt;&lt;a href=&quot;#git-init&quot; aria-label=&quot;git init permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git init&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git init [directory]&lt;/code&gt;：指定文件夹创建，这样就不需要先 &lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; 再 &lt;code class=&quot;language-text&quot;&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git init --bare&lt;/code&gt;: 创建一个只能做查看记录，拉代码，不能编辑的 git 工作区，一般用于发布分支，或者一个中心化的仓库。如果观察这个文件夹的结构的话，会发现，它们直接将 &lt;code class=&quot;language-text&quot;&gt;.git&lt;/code&gt; 文件夹的内容，&lt;strong&gt;平铺开来&lt;/strong&gt;，放置于根目录。&lt;/p&gt;
&lt;h2 id=&quot;git-clone&quot;&gt;&lt;a href=&quot;#git-clone&quot; aria-label=&quot;git clone permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git clone&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git clone --depth=1 repo&lt;/code&gt; 可以指定 clone 下来的仓库的提交数。对于临时改一些代码，不关心历史提交的情况下，这个命令大大减少了 clone 的时间&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git clone --branch=foo repo&lt;/code&gt; 只拉取某一个分支。如果想学习开源项目，只关心 master 下的记录，这个命令是个不错的选择。&lt;/p&gt;
&lt;h2 id=&quot;git-config&quot;&gt;&lt;a href=&quot;#git-config&quot; aria-label=&quot;git config permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git config&lt;/h2&gt;
&lt;p&gt;这里需要关注的命令不多，有一个值得注意的概念：&lt;code class=&quot;language-text&quot;&gt;git config --global&lt;/code&gt; 会将配置存与 &lt;code class=&quot;language-text&quot;&gt;~/.gitconfig&lt;/code&gt; 路径下，而默认操作(—local) 将配置保存在 &lt;code class=&quot;language-text&quot;&gt;./.git/config&lt;/code&gt; 下&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git config --global alias.[xxx] yyy&lt;/code&gt; 这个命令可以通过输入 &lt;code class=&quot;language-text&quot;&gt;git xxx&lt;/code&gt; 来取代 &lt;code class=&quot;language-text&quot;&gt;git yyy&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;git-add&quot;&gt;&lt;a href=&quot;#git-add&quot; aria-label=&quot;git add permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git add&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git add --all&lt;/code&gt; 将所有的改动全部添加到缓存区， 包括没有被 tracked 的&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git add -i&lt;/code&gt; 一个交互式的添加操作，不是那么的常用。而且子命令太多了，完全搞不懂是干嘛的&lt;/p&gt;
&lt;h2 id=&quot;git-commit&quot;&gt;&lt;a href=&quot;#git-commit&quot; aria-label=&quot;git commit permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git commit&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git commit --amend&lt;/code&gt;, 用于修改上一次的提交记录（类似于 &lt;code class=&quot;language-text&quot;&gt;git rebase -i&lt;/code&gt; 的子功能）。不过需要注意的是，因为这个会修改 commit 的 SHA.&lt;/p&gt;
&lt;p&gt;如果之前改动之前已经将 repo 推到了 remote repo，就必须要先 &lt;code class=&quot;language-text&quot;&gt;git pull&lt;/code&gt; 然后再 &lt;code class=&quot;language-text&quot;&gt;git push&lt;/code&gt;, 这样反而拜拜增加了两个没用的 commit log. 除非远程仓库没有开启&lt;em&gt;分支保护&lt;/em&gt;功能，这样就可以使用 &lt;code class=&quot;language-text&quot;&gt;git push -f&lt;/code&gt; 来覆盖远程分支。在使用 -f 的时候，请保证这个分支没有其他人同时在修改。&lt;/p&gt;
&lt;h2 id=&quot;git-stash&quot;&gt;&lt;a href=&quot;#git-stash&quot; aria-label=&quot;git stash permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git stash&lt;/h2&gt;
&lt;p&gt;算是切分支神器。工作中我经常遇到手头在解决某个事情的时候，突然碰到突如其来的情况需要紧急处理，但是手头上的工作又不适合做一个 commit 的话，就可以用到这个它。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git stash apply&lt;/code&gt; 相比 &lt;code class=&quot;language-text&quot;&gt;git stash pop&lt;/code&gt; 的区别是，它再使用后仍然会存在于 &lt;code class=&quot;language-text&quot;&gt;stash list&lt;/code&gt; 中，可以用于其他的分支。就有点像 Stack 中，直接取 Stack Top 和 Pop 后取返回值的区别。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git stash&lt;/code&gt; 只会 stash 被 &lt;em&gt;tracked or added&lt;/em&gt; 的文件。可以使用 &lt;code class=&quot;language-text&quot;&gt;git stash -u&lt;/code&gt; 将未被 track 的文件。&lt;code class=&quot;language-text&quot;&gt;git stash -a&lt;/code&gt; 会添加当前被修改的所有的文件，包括在 ignore 下的。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git stash save [message]&lt;/code&gt; 和直接 stash 不同，如果直接使用 &lt;code class=&quot;language-text&quot;&gt;git stash&lt;/code&gt; ，这次 stash 的名字会直接以当前最新的提交的 title 来命名。这样可能会有些困惑，因为并没有描述清楚这个 stash 到底做了什么。这在一段时间后，可能就懵逼咯。所以可以使用这个命令添加描述性的标题&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git stash pop [index]&lt;/code&gt; 添加 index 就不需要按照 stack 的顺序来选择 stash。而 index 的值可以对应 &lt;code class=&quot;language-text&quot;&gt;git stash list&lt;/code&gt; 下的 &lt;em&gt;stash@{n}&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git shash show [-p] [index]&lt;/code&gt; 仅仅看到列表还不够，还需要看到某个 stash 到底改变了什么。就可以使用这个命令，其他添加 -p 选项，可以获得和 git diff 一样更为全面的信息。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git stash -p&lt;/code&gt; 这个命令和 &lt;code class=&quot;language-text&quot;&gt;git stash -p&lt;/code&gt; 很像，很针对每一个文件的每一个 chunk 来提问，是否需要被 stash。算是为完美主义者准备的工具吧，无聊的时候可以试一下，反正我是头晕。&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/644a5/stash-p.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 44.09448818897638%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;176\&apos;/%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/f2fbe/stash-p.webp 200w,
/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/e227a/stash-p.webp 400w,
/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/0cbce/stash-p.webp 800w,
/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/236c8/stash-p.webp 1016w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/9ec3c/stash-p.png 200w,
/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/c7805/stash-p.png 400w,
/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/8ff1e/stash-p.png 800w,
/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/644a5/stash-p.png 1016w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/eb4e4ce53ad8ec1c9ced561cd3b1279e/8ff1e/stash-p.png&quot;
          alt=&quot;stash p&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git stash branch &amp;lt;branch-name&amp;gt; [stash]&lt;/code&gt; 为了防止有些时候一旦 pop 了某个 stash，导致冲突的话，可以通过将这个 stash 应用在一个新的分支来缓解问题。&lt;/p&gt;
&lt;h2 id=&quot;git-log&quot;&gt;&lt;a href=&quot;#git-log&quot; aria-label=&quot;git log permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git log&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git log --stat&lt;/code&gt; 用于显示某次 commit，针对一个文件行数的增加和减少，文件名的修改情况。
&lt;code class=&quot;language-text&quot;&gt;git log -p&lt;/code&gt; 会显示某次 commit 的 diff 状态
&lt;code class=&quot;language-text&quot;&gt;git log --author=&amp;lt;name&amp;gt;&lt;/code&gt; 快速过滤某个 author 的提交次数
&lt;code class=&quot;language-text&quot;&gt;git log -n&amp;lt;count&amp;gt;&lt;/code&gt; 显示最近 count 个提交&lt;/p&gt;
&lt;h2 id=&quot;git-tag&quot;&gt;&lt;a href=&quot;#git-tag&quot; aria-label=&quot;git tag permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git tag&lt;/h2&gt;
&lt;p&gt;Git 中有两种 tag：&lt;em&gt;annotated and lightweight tags&lt;/em&gt;
前者会包括一些注释信息，来进一步解释这个 tag 的作用，而后者就仅仅只是一个 tag 的名字。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git tag &amp;lt;name&amp;gt;&lt;/code&gt; 会创建一个 lightweight tag&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git tag -a &amp;lt;name&amp;gt;&lt;/code&gt; 则会创建一个 annotated tag，之后会弹出 git 默认的编辑器，用于描述注释&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git tag list -l &amp;lt;pattern&amp;gt;&lt;/code&gt; 通过 pattern 过滤 tag list&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git tag -d &amp;lt;tagname&amp;gt;&lt;/code&gt; 删除 tag&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git tag -f [other]&lt;/code&gt; replace 一个 tag 以其相关信息&lt;/p&gt;
&lt;p&gt;同时，还可以 checkout 某个 tag，但这其实相当于跳转到创建该 tag 的 commit 上，进入 &lt;em&gt;detached HEAD state&lt;/em&gt;。这个时候最好不要修改代码，或者先创建新分支&lt;/p&gt;</content:encoded></item><item><title><![CDATA[使用 VSCode 搭建一个很爽的前端环境]]></title><description><![CDATA[这篇文章主要是针对打算学习前端的小白，和想学点前端的后端大佬，为了提升你们的编码幸福感。 工欲善其功，必先利其器 简单介绍下背景，VSCode 是目前前端界最为流行的一款 编辑器 ，每月一次的更新，强大的插件生态和 TypeScript…]]></description><link>https://github.com/thoamsy/blogs.git/vscode/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/vscode/</guid><pubDate>Mon, 04 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;这篇文章主要是针对打算学习前端的小白，和想学点前端的后端大佬，为了提升你们的编码幸福感。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工欲善其功，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单介绍下背景，VSCode 是目前前端界最为流行的一款&lt;strong&gt;编辑器&lt;/strong&gt;，每月一次的更新，强大的插件生态和 TypeScript 的整合，让这款编辑器瞬间风靡世界。像之前的 Sublime 和 GitHub 的 Atom，都无法与它抗衡。比如 &lt;a href=&quot;https://vuejs.org&quot;&gt;Vue&lt;/a&gt; 的作者 Evan You 也是用它作为主力开发工具。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C&quot; aria-label=&quot;准备工作 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;准备工作&lt;/h2&gt;
&lt;p&gt;第一步当然是下载 &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt; 并安装。Window 用户印象中还需要下载一个 Git 的工具，无论你知不知道的 Git，以及 Git 和 GitHub 的区别，反正去&lt;a href=&quot;https://git-scm.com/&quot;&gt;官网&lt;/a&gt; 下载好这个并安装。如果你在终端（命令行）中输入&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会有一个版本号输出的话，就说明下载成功了。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/1fbbf/DraggedImage.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 7.00218818380744%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;28\&apos;%3e%3cpath d=\&apos;M2 14v14h398V0H248A2564 2564 0 0 0 94 1L48 0H2v14m101-3l2 2-2 3-2 2h84a378 378 0 0 0 86-2c0 2 1 2 14 2s14 0 16-2l2-3-3-2c-2-3-3-3-16-3h-13v3l-1 3V8H101l2 3\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/f2fbe/DraggedImage.webp 200w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/e227a/DraggedImage.webp 400w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/0cbce/DraggedImage.webp 800w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/6bc95/DraggedImage.webp 1200w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/ded3f/DraggedImage.webp 1600w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/27156/DraggedImage.webp 1828w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/9ec3c/DraggedImage.png 200w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/c7805/DraggedImage.png 400w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/8ff1e/DraggedImage.png 800w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/6ff5e/DraggedImage.png 1200w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/2f950/DraggedImage.png 1600w,
/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/1fbbf/DraggedImage.png 1828w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/0648f1f5a16dfb03dd0a812f5e030e05/8ff1e/DraggedImage.png&quot;
          alt=&quot;DraggedImage&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
Mac 用户只要安装过 Xcode 或者开发者工具套件的话，就内置了 Git 的功能。之所以要安装 git 是因为 VS Code 的插件基于 Git 的支持。&lt;/p&gt;
&lt;p&gt;接着还需要安装，&lt;a href=&quot;nodejs.org&quot;&gt;node&lt;/a&gt;，&lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;yarn&lt;/a&gt; 英文不好的同学也不要管那么多，看到 &lt;strong&gt;Install, Download&lt;/strong&gt; 这种单词就点，下版本最高的就行。Window 用户的 node 需要下载的是一个 &lt;code class=&quot;language-text&quot;&gt;.msi&lt;/code&gt; 文件不是 &lt;code class=&quot;language-text&quot;&gt;.exe&lt;/code&gt; 文件，&lt;code class=&quot;language-text&quot;&gt;msi&lt;/code&gt; 文件能给 Window 环境写入一个二进制文件，而 &lt;code class=&quot;language-text&quot;&gt;exe&lt;/code&gt; 仅仅是一个 node 的 REPL 环境。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为作者本人对 Window 不够熟悉，很多描述是靠之前碰到过的坑，如果碰到问题的话，还请自己使用搜索引擎解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是和之前一样，输入几个命令测试是否安装成功。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node -v
&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; why&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这两个都确定安装好后，继续输入&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; global &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; eslint&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Window 用户如果 Yarn 没有安装成功的话，就使用 npm 安装作为 B 计划&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g eslint&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装好后，就会有打印出安装成功的 eslint 版本。&lt;a href=&quot;http://eslint.cn/&quot;&gt;eslint&lt;/a&gt; 是一个 JS 的静态分析器，它可以解决一些写 JS 经常遇到的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量名写错了，但是没有报错。&lt;/li&gt;
&lt;li&gt;自己不想写分号，让它自动加&lt;/li&gt;
&lt;li&gt;强制要求格式的规范&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有 &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; 这是微软开发的一个 JS 超集，安装它的目的主要是它能够为 VS Code 赋予更强的能力，让开发更爽。设置里面会有很多功能性开关，需要安装了指定版本的 typescript 才可以，所以我们安装最新的就是了。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; global &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; typescript
// or
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g typescript&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和上面一样，如果 yarn 没安装成功的话就是用 npm。在本文写作的时候，typescript 的版本为 &lt;code class=&quot;language-text&quot;&gt;2.9.1&lt;/code&gt;
接下来就进入 VSCode 的流程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最基本的 VSCode 的侧边栏有五项
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/3acbbb2f132d7f0b2efc67f5e1a65f70/1bf2d/DraggedImage-1.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 102px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 525.4901960784314%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;2102\&apos;%3e%3cpath d=\&apos;M0 1051v1051h401V0H0v1051m170-925c-6 0-13 8-13 12l1 4h30c30 0 31 1 32 3 0 2 2 4 23 27l5 7c1 1 2 2 6 2l5 1v46c0 41 0 47 2 47 4 2 13-6 14-13v-92l-14-18a455 455 0 0 1-21-25c-3-2-56-3-70-1m-37 33l-5 6-2 2v130l2 2c6 8 2 7 56 8 54 0 51 0 57-7l3-4v-97l-4-4-6-8-7-9-11-14-5-7h-75l-3 2m10 15l-1 58 1 58h42l42-1a19036 19036 0 0 0 0-75l-14-1-15-1c-2 0-2-3-2-19l-1-19h-52m68 345a692 692 0 0 1-19 6l-7 4c-5 2-17 14-21 20l-7 15-2 6c-3 5-3 28 0 35l2 7 2 6c4 8 7 5-24 36s-31 31-30 39c1 5 4 9 10 11 8 3 10 1 41-30l28-27 10 3 3 2 4 2a81 81 0 0 0 47-2l4-2 4-2a90 90 0 0 0 21-19c4-4 10-15 10-18l2-6c3-6 3-29 0-34l-2-6c0-8-18-31-28-36a71 71 0 0 0-48-10m5 21l-7 1c-7 1-14 5-21 12-5 5-7 8-10 14l-3 6c-2 4-2 27 0 30l2 4 4 7 5 6c1 2 12 11 14 11l5 2c5 3 28 3 33 0l6-2a54 54 0 0 0 20-21l3-4 2-6c3-4 2-19-1-26l-2-5c-4-10-12-20-22-24-7-4-24-7-28-5m-67 363c-9 2-19 11-19 16l-1 5c-3 4-2 12 0 18 3 5 5 7 12 13l1 14v13l22 23 22 22v26l-5 4c-8 8-10 13-9 24 2 11 6 18 14 23 6 3 23 3 29 0 8-5 13-13 14-24 0-11-1-15-8-22l-5-5-1-13v-13l22-22 22-23v-13l1-14c12-10 17-21 13-31l-2-6c-1-3-8-11-13-13-8-5-30-2-33 3l-2 3c-4 4-7 13-7 21 0 9 2 15 9 20 5 4 6 6 5 16v8l-14 14c-12 12-14 14-16 13l-15-14-13-14-1-8c-1-9 0-10 6-15 6-6 8-11 8-20 0-21-16-33-36-29m2 11c-6 2-13 10-13 17 0 4 5 13 9 15l3 2c2 2 10 1 14-1 12-6 13-22 2-31-3-2-10-3-15-2m89 0c-4 0-12 8-13 13-1 8 3 16 10 20 5 2 12 3 14 1l3-2c4-2 9-11 9-15s-4-12-8-15c-4-2-10-3-15-2m-47 148c-8 4-12 13-10 21 6 17 29 17 34 0 5-14-11-28-24-21m-8 226a118 118 0 0 0-44 14 124 124 0 0 0-43 48 111 111 0 0 0 2 98l2 4a120 120 0 0 0 55 46l6 2c5 3 22 6 35 5a94 94 0 0 0 38-7l6-2 4-2 2-1 4-2a118 118 0 0 0 46-55l2-6c2-2 5-20 5-32a101 101 0 0 0-7-41l-2-6-2-4-1-2-2-4a125 125 0 0 0-43-40c-2-2-10-6-13-6l-5-2c-4-3-34-7-45-5m-4 18l-10 3-4 1a113 113 0 0 0-24 12c-6 2-4 4 60 68 47 47 63 62 64 62 4 0 13-16 18-31 4-12 3-39 0-50a135 135 0 0 0-14-28 86 86 0 0 0-50-35c-6-2-28-4-40-2m-11 20c-2 4 0 7 3 7 4 0 5 2 5 13v10l10 10 30 29 20 20h10c10 0 12 1 12 5 0 3 3 5 8 4 2-1 2-1 2-10 0-7 0-10-2-13l-2-4h-16c-17 0-17 0-20-3-4-3-4-4 0-6 6-4 9-7 10-13l1-5 7-1c10 0 12-1 12-3 0-4-2-5-12-5s-11 0-13-3c-3-2-3-3-3-13 0-11 0-11-3-12-4-1-5 1-5 11v8l-6 1c-6 1-13 7-13 10 0 4-3 4-6 0l-3-3v-33l-4-2c-3-2-6-2-13-2-9 0-9 0-9 3m-48 17l-2 4a91 91 0 0 0-2 96c5 10 13 18 28 30a112 112 0 0 0 29 12c5 2 26 3 35 2 18-2 42-14 42-20 0-1-16-18-62-64-64-64-66-66-68-60m-4 46c-3 0-4 2-4 8s1 8 5 8c2 0 3-1 3-4 0-4 3-5 17-5s16 1 13 5l-2 4-2 4c-3 6-3 20 0 24l2 3c0 2 8 7 14 9 7 3 20 2 26-3s7-4 7 12c0 15-1 17-5 17-3 0-5 4-3 7 2 2 14 2 15-1l1-25v-23l-4-4-21-21-17-16h-22l-23 1m-7 315l1 170 42 1h42v-36l-23-1c-19 0-23 0-24-2-2-1-2-4-2-48v-46l2-1c2-2 6-2 18-2l16-1 1-18v-16l-37-1-36 1m86 16l1 19 21-1 1-5 2-6h35c2 1 2 2 2 18 0 19 0 20-6 20-7 0-7 0-7 12 0 9 0 10 2 11 3 2 32 1 34 0l1-43v-41l-43-1h-43v17m-36 33c-1 2-2 71 0 72l71-1c2 0 1-69 0-71l-35-1-36 1m87 50c-2 1-2 4-2 16l-1 17c-1 1-4 2-17 2-14 0-17 1-18 2l-1 18c0 16 0 16 2 17h72v-35l-1-37c-1-3-32-3-34 0\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/3acbbb2f132d7f0b2efc67f5e1a65f70/11f0e/DraggedImage-1.webp 102w&quot;
          sizes=&quot;(max-width: 102px) 100vw, 102px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/3acbbb2f132d7f0b2efc67f5e1a65f70/1bf2d/DraggedImage-1.png 102w&quot;
          sizes=&quot;(max-width: 102px) 100vw, 102px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/3acbbb2f132d7f0b2efc67f5e1a65f70/1bf2d/DraggedImage-1.png&quot;
          alt=&quot;DraggedImage 1&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
其中第五个就是安装插件的一个 Tab，点开来，选择常用的拓展，就能看到根据安装量排序的拓展工具。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/e198c/DraggedImage-2.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 99.75550122249389%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;399\&apos;%3e%3cpath d=\&apos;M0 199v200h10c8 0 9 0 9-2s2-4 5-4c3 1 4 3 0 3l-3 1c0 2 1 2 3 2 4 0 6-1 5-2l1-3h3c1-1 2-1 2 1v2c-2 1 1 2 6 2 4 0 4 0 4-2v-2l1 2c0 2 5 3 7 1l-1-1v-1c1-2 2-1 2 1l1 2 1-2 2-2c2 0 2 0 1 1l-1 1v1l4 1c4 0 5-1 6-2l-1-1h-2l2-1a1340 1340 0 0 0 167 4h167V0H13l-2 3C8 5 5 5 2 2c-2-2-2 8-2 197M269 21h-5v11h12v-5c0-7 0-7-7-6m-55 25c-2 2-2 7-2 34l-1 31c-2-1-4 3-2 5l2 1 1 21 1 22h178v-57c0-55 0-57-2-58l-88-1h-86l-1 2m104 9l-1 6c0 2 0 2 1 0 2-3 3-3 3 0 0 2 1 3 2 1v-1l-1-2 3 2c3 3 4 3 4 0l-1-3-1-2 1-2 1-1c0-2-1-2-5-2h-6v4m1 15l-1 6v4c2-3 3-2 3 0 0 1 0 2 2 1v-1l-1-2 4 2 3 1-1-1v-1l1-2h-1l-1-1 1-1v-2l1-3h-10m-42 19l-1 10 1-2c0-2 4-1 4 1l1 3v-3l2-2c2 0 3 1 1 3v1c1-1 2-2 2-6v-6h-5l-5 1m41 3l-1 6c0 2 0 2 1 0 2-3 3-3 3 0l2 2 1-1h-1l-1-1c0-3 1-2 4 0l2 2v-9c2-1 0-3-5-3h-5v4m0 19l-1 6h1c2-3 3-2 3 0 0 1 0 2 2 1v-1l-1-2 4 2 3 1-1-1v-7l1-1c0-2-1-2-5-2h-6v4m-41 15v5l-1 5c-1 1 1 1 5 1h6l-1-3v-4l1-2c-1-2-1-3-5-3l-5 1m41 5c-1 6 0 8 1 4 0-3 2-3 2 0l2 2 1-1h-1l-1-1c0-3 1-2 3 0 3 3 3 3 4-1l-1-2v-3c2-3 0-4-5-4h-5v6m0 17l-1 6c0 2 0 2 1 0 2-3 3-3 3 0 0 2 1 3 2 1v-1l-1-2 3 2c3 3 4 3 4 0l-1-3-1-2 1-2 1-1c0-2-1-2-5-2h-6v4m-51 15h-4c-2 2-2 3 0 5v6l1-1c0-3 2-2 3 0l1 2v-2l2-2v2l1 1c2 0 2-3 1-4v-2l2-2c0-2-3-4-4-3l-2-1c-1-1-1-1-1 1m-32 2l1 3 1 2h-1l-2-1 1 3c2 1 2 1 0 1-1 0-2 0-1 1l6 1 6-1-1-1v-2c0-2-1-3-2-1h-1l2-2 1-3c0-2-1-3-5-3-5 0-5 0-5 3m41 1l-1 6 1 2 2-2c0-2 2-2 3 0 0 2 0 2 1 0s3-3 3 0l-1 1v1c2 2 3 0 3-6v-6h-11v4m14-3l-1 6c0 5 0 5 3 5 2-1 2-1 2-3 0-3 1-4 3-1l2 1-1-3c-2-2-2-2 0-2s3 6 1 7c-2 0-2 2-1 2 5 0 5-10 1-11l-1-1-1-1-2 1c0 1-1 2-2 1v-1c0-2-1-1-3 0m28 5c-1 7 0 9 1 5l1-2v2c0 2 0 2 2 2l6-1h2l-1-1v-2l-1-2v-3l1-2c0-2-1-2-5-2h-6v6m-106 14v5l-4-1c-4 0-4 0-5 5-1 3-1 3 1 2l2 1h1l2-1 1 1 1-1a678 678 0 0 1-4 103c0 1 3 4 4 3l1 31c0 38 0 36 11 36l6 1-2 1c-2 0-5 5-3 6l1 2 1 2h7c2 0 2 0 2-2-1-1-1-2 1-2v-2c-1-1-2-2-1-3l-2-1-2-1 79-1 80-1c1 0 2-178 1-186l-89-1h-90v4M3 212v9l9-8 9-10H3v9m9 52H3v9l1 8 17-17h-9m320 19l-1 6c0 2 0 2 1 0 2-3 3-3 3 0 0 2 1 3 2 1v-1l-1-2 3 2c3 3 4 3 4 0l-1-3v-5c1-1 0-2-5-2h-5v4m28 49l-1 6h1c2-3 3-2 3 0 0 1 0 2 2 1v-1l-1-2 3 1c3 3 4 3 4 1l-1-3v-4l1-1c0-2-1-2-5-2h-6v4m-111 15l-1 2v5c-1 4 0 6 1 2 1-3 4-3 4 0l1 3v-3l2-2c2 0 3 3 1 3v1c2 0 2-1 2-6v-6h-5l-5 1m55 5c-1 6 0 8 1 4 0-3 2-3 2 0l2 2v-4l2 2c3 3 3 3 4-1l-1-2v-3c2-3 0-4-5-4h-5v6\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/f2fbe/DraggedImage-2.webp 200w,
/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/e227a/DraggedImage-2.webp 400w,
/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/0cbce/DraggedImage-2.webp 800w,
/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/52ca8/DraggedImage-2.webp 818w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/9ec3c/DraggedImage-2.png 200w,
/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/c7805/DraggedImage-2.png 400w,
/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/8ff1e/DraggedImage-2.png 800w,
/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/e198c/DraggedImage-2.png 818w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/f20afe910439f6f7b19ca45e9cc848c3/8ff1e/DraggedImage-2.png&quot;
          alt=&quot;DraggedImage 2&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
如果真的想要好好运用 VSCode 的话，还是要自己多花费点时间在这些拓展上，找出几个真正适合你的。&lt;/p&gt;
&lt;h2 id=&quot;美化一下&quot;&gt;&lt;a href=&quot;#%E7%BE%8E%E5%8C%96%E4%B8%80%E4%B8%8B&quot; aria-label=&quot;美化一下 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;美化一下&lt;/h2&gt;
&lt;p&gt;默认的 VSCode 还是蛮丑的，特别是底部蓝色的状态栏。显然需要美化一下, 从三个方面着手&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字体&lt;/li&gt;
&lt;li&gt;主题&lt;/li&gt;
&lt;li&gt;文件图标&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;字体&quot;&gt;&lt;a href=&quot;#%E5%AD%97%E4%BD%93&quot; aria-label=&quot;字体 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;字体&lt;/h3&gt;
&lt;p&gt;选一个好看的字体还是挺重要的，如果每天面对 Window 的 cmd 那种字体的话，写程序一定会十分痛苦。目前广受好评的一个开源字体是，&lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;Fira Code&lt;/a&gt;, 好看是一方面，还支持一个特别神奇的 &lt;em&gt;font ligatures&lt;/em&gt; 功能，它的效果就是能将你输入的一些特定的符号组合，换成另外一个更为&lt;strong&gt;写实风格&lt;/strong&gt;的符号。比如我们常用的 &lt;code class=&quot;language-text&quot;&gt;!=&lt;/code&gt; 最后就长得和 &lt;code class=&quot;language-text&quot;&gt;≠&lt;/code&gt; 一样。 &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 97.82135076252723%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;391\&apos;%3e%3cpath d=\&apos;M161 18h1l5 1c1 1 0 1-4 1-6 0-6 0-5 3 2 7 10 7 12 1 1-3 1-4-2-6s-4-3-7 0M86 33c-1 1 9 1 28 1l29-1-28-1-29 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/f2fbe/fira-code.webp 200w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/e227a/fira-code.webp 400w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/0cbce/fira-code.webp 800w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/6bc95/fira-code.webp 1200w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/ded3f/fira-code.webp 1600w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/ad9a8/fira-code.webp 1836w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/9ec3c/fira-code.png 200w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/c7805/fira-code.png 400w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/8ff1e/fira-code.png 800w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/6ff5e/fira-code.png 1200w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/2f950/fira-code.png 1600w,
/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/087d3/fira-code.png 1836w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/34775835d427cb3f5ef2b4415bfc6afa/8ff1e/fira-code.png&quot;
          alt=&quot;fira code&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过 GitHub 下载好字体文件后，安装到系统上。安装好后，进入 VSCode 的设置，设置 &lt;code class=&quot;language-text&quot;&gt;editor.fontLigatures&lt;/code&gt; 为 true，在 &lt;code class=&quot;language-text&quot;&gt;editor.fontFamily&lt;/code&gt; 的最前面加上 &lt;code class=&quot;language-text&quot;&gt;&amp;#39;Fira Code&amp;#39;&lt;/code&gt;，保存一下，去看看效果吧！&lt;/p&gt;
&lt;h3 id=&quot;主题&quot;&gt;&lt;a href=&quot;#%E4%B8%BB%E9%A2%98&quot; aria-label=&quot;主题 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;主题&lt;/h3&gt;
&lt;p&gt;2 和 3 就不需要这些步骤了，通过按住 &lt;code class=&quot;language-text&quot;&gt;Cmd/Ctrl&lt;/code&gt;，接着看 K 和 T 两个键，就可以选择其他主题。不过自带的主题如果不过瘾的话，还可以下载其他主题，推荐安装一个 &lt;em&gt;Dracula&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;而文件图标的效果就是让你的文件或者文件夹有一个小图标，提供辨识度。像这样 &lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/606d7/file-icon.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 524px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 82.82442748091601%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;331\&apos;%3e%3cpath d=\&apos;M0 166v165h401V0H0v166M47 11v6h3c5 0 6-1 6-6 0-4-1-5-3-6-5-2-6-2-6 6m23-5c-4 3-2 11 4 11 5 0 7-7 3-11-2-2-4-2-7 0m0 31v8l1 7h8c12 1 14-1 11-9-2-4-2-5-7-5l-5-1h-8m0 33l-1 8 1 8h9c11 1 12 0 12-5l-1-4-1-3c0-2-1-2-5-2l-6-1c-1-2-6-2-8-1m0 34l-1 8 1 7h5l9 2c4 0 8-3 7-6l-2-6c-1-3-1-4-6-4l-5-1h-8m0 34l-1 7c0 8 0 8 8 8l5 1h1l3-1c3 0 5-4 4-6l-1-5c0-2-1-3-5-3l-5-1h-9m0 33l-1 8c0 8 0 8 11 9 8 0 11-1 11-8 0-5-2-8-8-8l-5-1h-8m8 36c-6 6-9 11-7 14 3 5 15-3 13-8l-4-2c-3 0-3 0-1-2l4-4 3-2c0-2-2-1-8 4m30 5v8h4c5-1 7-4 5-8-2-3-3-3-5-3-2 1-2 0-2-2l-1-2-1 7m23 0v8h4c4 0 6-3 5-7 0-3-4-5-6-4-1 1-1 0-1-1l-1-3-1 7m-22 66c-3 3-2 5 0 7 1 1 3 2 4 1l2 1-4 1c-3 0-3 0-2 2h7l1-8v-6h-3c-3 0-4 1-5 2m29 0c-3 3-2 5 0 7 1 1 3 2 4 1l2 1-4 1c-3 0-3 0-2 2h7l1-8v-6h-3c-3 0-4 1-5 2\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/f2fbe/file-icon.webp 200w,
/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/e227a/file-icon.webp 400w,
/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/1c14e/file-icon.webp 524w&quot;
          sizes=&quot;(max-width: 524px) 100vw, 524px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/9ec3c/file-icon.png 200w,
/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/c7805/file-icon.png 400w,
/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/606d7/file-icon.png 524w&quot;
          sizes=&quot;(max-width: 524px) 100vw, 524px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/d76beb34e8f3330dbe8bb2368c55950a/606d7/file-icon.png&quot;
          alt=&quot;file icon&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
这个功能隐藏的比较深，需要直接去设置。按 F1，输入 &lt;code class=&quot;language-text&quot;&gt;File Icon Theme&lt;/code&gt; 就能找到，官方也提供了几个主题，但是不怎么全，也不是那么好看。本人推荐 &lt;em&gt;Material Icon Theme&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;有了好看的编辑器，才有动力写出好看的代码。&lt;/p&gt;
&lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6&quot; aria-label=&quot;安装插件 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;安装插件&lt;/h2&gt;
&lt;p&gt;先看看，需要配置的插件&lt;/p&gt;
&lt;h3 id=&quot;eslint&quot;&gt;&lt;a href=&quot;#eslint&quot; aria-label=&quot;eslint permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ESLint&lt;/h3&gt;
&lt;p&gt;现在没有 ESLint 已经没法写 JS 代码了，我们不需要花太多时间在找自己的拼写错误导致的 bug 上。下载 VSCode 的 ESLint 插件后，重载 VSCode，打开设置，搜索 &lt;em&gt;eslint&lt;/em&gt;。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/87a1e/DraggedImage-3.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 26.344086021505376%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;105\&apos;%3e%3cpath d=\&apos;M0 53v52h401V0H226v19h-43l-1-10V0H0v53m51-25v9h44V19H51v9m0 56v9h44V75H51v9\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/f2fbe/DraggedImage-3.webp 200w,
/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/e227a/DraggedImage-3.webp 400w,
/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/0cbce/DraggedImage-3.webp 800w,
/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/60658/DraggedImage-3.webp 1116w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/9ec3c/DraggedImage-3.png 200w,
/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/c7805/DraggedImage-3.png 400w,
/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/8ff1e/DraggedImage-3.png 800w,
/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/87a1e/DraggedImage-3.png 1116w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/e9220b82be80fb3c7b82126a19a0f78d/8ff1e/DraggedImage-3.png&quot;
          alt=&quot;DraggedImage 3&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
这里主要需要修改的几个配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;eslint.autoFixOnSave&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;eslint.packageManager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中第一个设置是可以在每次保存的时候，自动修复一些&lt;strong&gt;能自动修复&lt;/strong&gt;的错误，比如少了分号，缩进不对等等… 注意 VSCode 的设置不能直接修改，需要复制到右边的用户设置区，来修改。通过点击左侧的那个 edit 图标就能复制到右侧，接着修改后再保存就能生效。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/0ab52/DraggedImage-4.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 13.904761904761905%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;56\&apos;%3e%3cpath d=\&apos;M0 28v28h401V0H0v28m57 5l1 10h46V23H57v10\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/f2fbe/DraggedImage-4.webp 200w,
/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/e227a/DraggedImage-4.webp 400w,
/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/0cbce/DraggedImage-4.webp 800w,
/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/f86e9/DraggedImage-4.webp 1050w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/9ec3c/DraggedImage-4.png 200w,
/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/c7805/DraggedImage-4.png 400w,
/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/8ff1e/DraggedImage-4.png 800w,
/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/0ab52/DraggedImage-4.png 1050w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/c145d6992b35b4c76d6b5de65dd7cac3/8ff1e/DraggedImage-4.png&quot;
          alt=&quot;DraggedImage 4&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
第二个设置是根据你使用 yarn 还是 npm 安装 eslint 来确定的。如果使用的是 yarn，就改成 yarn；npm 保存不变。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eslint 通过一个&lt;strong&gt;规则文件&lt;/strong&gt;驱动，可以叫做 &lt;code class=&quot;language-text&quot;&gt;.eslintrc, .eslintrc.json, .eslintrc.js&lt;/code&gt; 等等，刚开始的时候，你可能不知道 eslint 有哪些规则，这该怎么办？我们可以使用 eslint 默认的设置，来入门。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;eslint --init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着会需要你回答一些和偏好有关的问题&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;How would you like to configure ESLint?
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Answer questions about your style
  Use a popular style guide
  Inspect your JavaScript file&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似于这样的问题。用方向键控制，回车来确定。最简单的方式是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Answer questions about your style&lt;/li&gt;
&lt;li&gt;y&lt;/li&gt;
&lt;li&gt;y&lt;/li&gt;
&lt;li&gt;这个问题是根据你是在浏览器还是在 node 上&lt;/li&gt;
&lt;li&gt;这个问题是问你是否使用 CommonJS，如果不写 node 的话，选择 N&lt;/li&gt;
&lt;li&gt;Do you use JSX? 写 React 的话，就选 y&lt;/li&gt;
&lt;li&gt;Spaces&lt;/li&gt;
&lt;li&gt;Single&lt;/li&gt;
&lt;li&gt;根据电脑系统选择换行的组成。LF/CRLF&lt;/li&gt;
&lt;li&gt;y&lt;/li&gt;
&lt;li&gt;JSON
根据我这个配置会生成如下配置代码&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;browser&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;es6&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eslint:recommended&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;parserOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;sourceType&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;indent&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;linebreak-style&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;unix&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;quotes&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;single&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;semi&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;always&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意 &lt;code class=&quot;language-text&quot;&gt;indent&lt;/code&gt; 这个 key，根据你的偏好来调整数字。4 表示的是 4 个空格。接着根据这个配置文件，eslint 就能发挥作用了。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/56a79be7625a59306c6ee766158c9e6f/55436/DraggedImage-5.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 36.09022556390977%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;144\&apos;%3e%3cpath d=\&apos;M0 72v72h401V0H0v72m0-14\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/56a79be7625a59306c6ee766158c9e6f/f2fbe/DraggedImage-5.webp 200w,
/blogs/static/56a79be7625a59306c6ee766158c9e6f/e227a/DraggedImage-5.webp 400w,
/blogs/static/56a79be7625a59306c6ee766158c9e6f/0cbce/DraggedImage-5.webp 800w,
/blogs/static/56a79be7625a59306c6ee766158c9e6f/3750f/DraggedImage-5.webp 1064w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/56a79be7625a59306c6ee766158c9e6f/9ec3c/DraggedImage-5.png 200w,
/blogs/static/56a79be7625a59306c6ee766158c9e6f/c7805/DraggedImage-5.png 400w,
/blogs/static/56a79be7625a59306c6ee766158c9e6f/8ff1e/DraggedImage-5.png 800w,
/blogs/static/56a79be7625a59306c6ee766158c9e6f/55436/DraggedImage-5.png 1064w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/56a79be7625a59306c6ee766158c9e6f/8ff1e/DraggedImage-5.png&quot;
          alt=&quot;DraggedImage 5&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
像我这个代码就有很多波浪线出现，就是因为 eslint 在抗议了。第一个错误和第三个错误是因为我们在设置的时候没有选择 &lt;code class=&quot;language-text&quot;&gt;commonJS&lt;/code&gt; 导致的。&lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; 下面会有波浪线是因为 &lt;code class=&quot;language-text&quot;&gt;eslint:recommended&lt;/code&gt; 的默认配置里，包含了一个选项
&lt;code class=&quot;language-text&quot;&gt;no-console: error&lt;/code&gt;，意思就是语句中不能出现 &lt;code class=&quot;language-text&quot;&gt;console&lt;/code&gt;，否则就是 error（error 还是 warn 决定了能够成功编译文件，出现了 error 就不行）。调整的方法也很简单，在 &lt;code class=&quot;language-text&quot;&gt;rules&lt;/code&gt; 中添加一句 &lt;code class=&quot;language-text&quot;&gt;no-console: &amp;#39;off&amp;#39;&lt;/code&gt; 来覆盖这个设置就行。&lt;/p&gt;
&lt;h3 id=&quot;code-runner&quot;&gt;&lt;a href=&quot;#code-runner&quot; aria-label=&quot;code runner permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code Runner&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/6f4fbf287fa23b7fccd92a108843be15/de97e/DraggedImage-6.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 35%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;140\&apos;%3e%3cpath d=\&apos;M0 70v70h401V0H0v70m85-55c0 2 0 3 1 2 0-2 0-2 2 0h3c1 1 6 1 6-1s0-2 1-1c1 3 4 3 4 1l1-2v1l1 2h2c2 1 6 1 6-1l1-2c0-2-4-2-7-1h-1c-2-2-11-1-12 2-1 1-1 1-1-1l-1-2h-1c-2-3-5-1-5 3M32 89c0 2 0 3 1 2l1-2 2 2h2c1 2 6 0 6-2h1c0 2 3 3 3 1 0-3 2-2 2 0 0 1 0 2 1 1h1c2 1 6 0 6-1l1-2c0-2-5-2-7-1h-6c-1-1-6 0-6 2h-1c-1-2-3-4-5-4s-2 1-2 4m-22 15v2c1-1 1 0 0 0 0 2 1 2 4 2 4 0 5 0 5-2l1 1c1 2 1 3 11 3h10v-7H26l-16 1m33 1l1 3a542 542 0 0 0 52-1v3h16v-7H43v2m71-1c0 3 1 4 8 4 6 0 7 0 7-2 1-1 1 0 1 1v3h21v-7h-18l-19 1m39 0c0 3 2 4 7 4 5 1 6 0 6-1 1-2 1-2 1 0v3h60v-7h-37l-37 1m76 1l1 2c0 2 10 1 10-1 1-1 1 0 1 1v3h19v-7h-16c-13 0-15 0-15 2\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/6f4fbf287fa23b7fccd92a108843be15/f2fbe/DraggedImage-6.webp 200w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/e227a/DraggedImage-6.webp 400w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/0cbce/DraggedImage-6.webp 800w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/6bc95/DraggedImage-6.webp 1200w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/ded3f/DraggedImage-6.webp 1600w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/5d6b6/DraggedImage-6.webp 2280w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/6f4fbf287fa23b7fccd92a108843be15/9ec3c/DraggedImage-6.png 200w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/c7805/DraggedImage-6.png 400w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/8ff1e/DraggedImage-6.png 800w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/6ff5e/DraggedImage-6.png 1200w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/2f950/DraggedImage-6.png 1600w,
/blogs/static/6f4fbf287fa23b7fccd92a108843be15/de97e/DraggedImage-6.png 2280w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/6f4fbf287fa23b7fccd92a108843be15/8ff1e/DraggedImage-6.png&quot;
          alt=&quot;DraggedImage 6&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
这个插件的功能是通过调用的系统的二进制文件，来直接运行代码，类似于 IDE 中的编译运行。不过在真正使用之前还需要稍微配置一下，在用户设置中搜索，&lt;code class=&quot;language-text&quot;&gt;code-runner&lt;/code&gt;，可以看到搜索出来的结果。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/705799511d2df6c9957faea510f32273/b5cbf/DraggedImage-7.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 67.37481031866464%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;269\&apos;%3e%3cpath d=\&apos;M0 135v134h401V0H0v135m27-90v8h68V37H27v8m0 48v7h68V85H27v8m0 47v8h68v-16H27v8m0 47v8h68v-16H27v8m33 56H27v15h68v-7l-1-8H60\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/705799511d2df6c9957faea510f32273/f2fbe/DraggedImage-7.webp 200w,
/blogs/static/705799511d2df6c9957faea510f32273/e227a/DraggedImage-7.webp 400w,
/blogs/static/705799511d2df6c9957faea510f32273/0cbce/DraggedImage-7.webp 800w,
/blogs/static/705799511d2df6c9957faea510f32273/6bc95/DraggedImage-7.webp 1200w,
/blogs/static/705799511d2df6c9957faea510f32273/5d633/DraggedImage-7.webp 1318w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/705799511d2df6c9957faea510f32273/9ec3c/DraggedImage-7.png 200w,
/blogs/static/705799511d2df6c9957faea510f32273/c7805/DraggedImage-7.png 400w,
/blogs/static/705799511d2df6c9957faea510f32273/8ff1e/DraggedImage-7.png 800w,
/blogs/static/705799511d2df6c9957faea510f32273/6ff5e/DraggedImage-7.png 1200w,
/blogs/static/705799511d2df6c9957faea510f32273/b5cbf/DraggedImage-7.png 1318w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/705799511d2df6c9957faea510f32273/8ff1e/DraggedImage-7.png&quot;
          alt=&quot;DraggedImage 7&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
有很多的配置，可能很让人头大，但是先别慌，找几个我们要用的就行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;clearPreviousOutPut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;runInTerminal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;saveFileBeforeRun&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;saveAllFilesBeforeRun&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个的意思就是每次运行会清楚之前的输入，看个人喜好吧，我是觉得清楚一下会更好。第二个就是在自己系统的终端中运行这个，好处是可以直接打通我们&lt;strong&gt;心爱的终端&lt;/strong&gt;，而且如果不配置这个的话，Window 会出现一些奇怪的问题，强烈推荐。&lt;/p&gt;
&lt;p&gt;第三个的意思是，运行之前保存当前文件和运行之前保存所有文件，自己选择一个设置为 True 就行。为什么需要这个？因为我们经常会碰到写完代码就去运行，但是发现自己忘记保存的情况，结果还是之前的结果。JS 的通过 node 来运行的，在我们安装后这个插件并重启后，新建一个 js 文件。比如像我下面是一个生成 HTML 模板的代码,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`
  &amp;lt;section&gt;
	&amp;lt;h1&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/h1&gt;
	&amp;lt;article&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/article&gt;
  &amp;lt;/section&gt;
`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I can run js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; article&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Very Cool!&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I can run everything&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; article&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Really Cool!&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; theHtml &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;\n&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;theHtml&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后点击右上角的的这个播放键
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/ce984e911a270f3bb175a39451ef4564/ac667/DraggedImage-8.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 274px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 30.656934306569344%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;123\&apos;%3e%3cpath d=\&apos;M0 62v61h401V0H0v62m243 12v17h41V56h-41v18M79 59l-2 3 2 2 4 2c2 0 2 1 2 3 0 1 4 5 7 5 2 1 3 5 1 5-3 1-5 0-5-2l-2-3c-2-2-2-2-2 3l1 7c1 1 0 4-2 4-3 0-4-2-3-5 3-2 2-9 0-13-4-8-4-8-11-1l-6 8c0 2 18 20 20 20l10-10c12-11 12-9-1-22-9-9-10-9-13-6m76 0c-2 1-1 31 0 32 2 0 26-12 29-15 3-2 2-3-16-12-11-6-12-7-13-5m91 18v11h14V65h-14v12m20 0v11h15V65h-15v12\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/ce984e911a270f3bb175a39451ef4564/f2fbe/DraggedImage-8.webp 200w,
/blogs/static/ce984e911a270f3bb175a39451ef4564/347ab/DraggedImage-8.webp 274w&quot;
          sizes=&quot;(max-width: 274px) 100vw, 274px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/ce984e911a270f3bb175a39451ef4564/9ec3c/DraggedImage-8.png 200w,
/blogs/static/ce984e911a270f3bb175a39451ef4564/ac667/DraggedImage-8.png 274w&quot;
          sizes=&quot;(max-width: 274px) 100vw, 274px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/ce984e911a270f3bb175a39451ef4564/ac667/DraggedImage-8.png&quot;
          alt=&quot;DraggedImage 8&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
就能看到 &lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; 的结果被打印出来。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/f1cfd/DraggedImage-9.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 40.899795501022496%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;164\&apos;%3e%3cpath d=\&apos;M0 82v82h401V0H0v82m0 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/f2fbe/DraggedImage-9.webp 200w,
/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/e227a/DraggedImage-9.webp 400w,
/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/0cbce/DraggedImage-9.webp 800w,
/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/82238/DraggedImage-9.webp 978w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/9ec3c/DraggedImage-9.png 200w,
/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/c7805/DraggedImage-9.png 400w,
/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/8ff1e/DraggedImage-9.png 800w,
/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/f1cfd/DraggedImage-9.png 978w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/701358a41d5df7b22b23a24cc6fc90f2/8ff1e/DraggedImage-9.png&quot;
          alt=&quot;DraggedImage 9&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code Runner 不仅仅支持 JS。我们需要这个功能可能是为了学习新语法，也可能是测试某个算法。显然使用 node REPL 或者在浏览器的 console 里写一大串代码是一个很愚蠢的行为。&lt;/p&gt;
&lt;h3 id=&quot;prettier&quot;&gt;&lt;a href=&quot;#prettier&quot; aria-label=&quot;prettier permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prettier&lt;/h3&gt;
&lt;p&gt;这个是最近一年最火的格式化工具，能够将你写成 💩 一样的 JS 也能格式成十分漂亮的代码（前提是没有语法没错）。同时也支持 HTML，CSS，JSON，Markdown 等等文件。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/d2592/DraggedImage-10.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 17.74622892635315%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;71\&apos;%3e%3cpath d=\&apos;M0 36v35h401V0H0v36\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/f2fbe/DraggedImage-10.webp 200w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/e227a/DraggedImage-10.webp 400w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/0cbce/DraggedImage-10.webp 800w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/6bc95/DraggedImage-10.webp 1200w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/ded3f/DraggedImage-10.webp 1600w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/801ad/DraggedImage-10.webp 2254w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/9ec3c/DraggedImage-10.png 200w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/c7805/DraggedImage-10.png 400w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/8ff1e/DraggedImage-10.png 800w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/6ff5e/DraggedImage-10.png 1200w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/2f950/DraggedImage-10.png 1600w,
/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/d2592/DraggedImage-10.png 2254w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/ec5e2d1128d5525805b70ec49d5bd3f4/8ff1e/DraggedImage-10.png&quot;
          alt=&quot;DraggedImage 10&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
为了体现它的强大，我们需要去改一些配置。和之前一样，在设置中搜索 &lt;code class=&quot;language-text&quot;&gt;format&lt;/code&gt;，找到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;editor.foramtOnPaste&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;editor.formatOnSave&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;editor.formatOnType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解释已经有中文了，全部设置为 true 就行。至于开启它们的效果，只能自己去好好体会了。&lt;strong&gt;写一点缩进比较烂的代码，接着保存，所有的代码就被格式化了。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;不需要配置的插件&lt;/p&gt;
&lt;h3 id=&quot;bracket-pair-colorizer&quot;&gt;&lt;a href=&quot;#bracket-pair-colorizer&quot; aria-label=&quot;bracket pair colorizer permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bracket Pair Colorizer&lt;/h3&gt;
&lt;p&gt;如果仅仅看它的介绍的话，这个插件是一个会将你的 &lt;code class=&quot;language-text&quot;&gt;([{}])&lt;/code&gt; 这些使用不同的颜色区分出来，提升鉴别度。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/b9913877db7acc2c61cdb0f6bb6ddf86/08863/DraggedImage-11.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 374px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 24.598930481283425%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;98\&apos;%3e%3cpath d=\&apos;M0 49v49h401V0H0v49m41 16l1 27h152l153 1V37h-23v4l-1 26v24H63l-1-27V37H41v28m2 0v25h18V39H43v26m8-16c-4 4-6 12-6 16l1 4c1 3 7 11 9 11s1-3-1-4c-6-5-6-19 0-26 2-3 3-5 1-5l-4 4m44 0c-8 9-7 25 2 30 3 2 4 0 1-2-6-7-7-18-1-26l3-6-5 4m18-3v18l1 16h4c5 0 6-2 1-3l-2-1-1-13V49h3l4-2c0-2-9-3-10-1m48 1l-1 7c0 6-1 6-3 7-3 1-3 2 0 3 2 1 3 2 3 8l1 7h6l-2-2c-3-1-3-2-3-14s1-14 3-15l2-2c0-2-5-1-6 1m22-1c-1 1-2 3-2 8 0 6-1 7-3 7-3 0-3 3 1 3 2 1 2 1 2 7 0 7 1 9 5 9h4l-3-2c-3-3-3-3-3-8V54c0-5 0-5 2-6l3-2h-6m16 0l2 2c3 1 3 1 2 6l1 7v3l-1 6c1 6 1 6-2 7-4 2-2 4 2 3 3-1 3-1 3-9 0-5 1-6 3-6 3-2 3-4-1-4-2-1-2-1-2-7 1-4 1-6-1-7-1-2-6-3-6-1m22 0l2 2c2 1 2 2 2 7l1 7v1l-1 7c0 6 0 7-2 8-3 0-3 2 0 2 4 0 5-2 5-9 0-6 0-6 3-7 3 0 3-3 0-3-2 0-3-1-3-7 0-5-1-7-2-8h-5m45 0c-1 2 0 3 3 3h2v28h-3c-2 0-3 1-3 2l5 1h4V45h-4l-4 1m22 0l2 3c2 2 5 9 5 14 0 4-3 11-5 13-2 1-3 4-1 4 1 0 7-6 8-9V55c-1-3-7-10-8-10l-1 1M135 63v16h5l4-1-3-1h-3V48h3l3-1-4-1h-5v17\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/b9913877db7acc2c61cdb0f6bb6ddf86/f2fbe/DraggedImage-11.webp 200w,
/blogs/static/b9913877db7acc2c61cdb0f6bb6ddf86/17a12/DraggedImage-11.webp 374w&quot;
          sizes=&quot;(max-width: 374px) 100vw, 374px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/b9913877db7acc2c61cdb0f6bb6ddf86/9ec3c/DraggedImage-11.png 200w,
/blogs/static/b9913877db7acc2c61cdb0f6bb6ddf86/08863/DraggedImage-11.png 374w&quot;
          sizes=&quot;(max-width: 374px) 100vw, 374px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/b9913877db7acc2c61cdb0f6bb6ddf86/08863/DraggedImage-11.png&quot;
          alt=&quot;DraggedImage 11&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
可以看到这些括号都是彩色的。当然如果仅仅只是这么一个花哨的功能的话，对编码幸福感提升不大。其实我最看重的是它的&lt;strong&gt;范围高亮功能&lt;/strong&gt;，嗯这个名字是我乱取的。就像这样：
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/1ce670f817f4157b59c32b142b47fd99/6e872/DraggedImage-12.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 448px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 54.46428571428571%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;218\&apos;%3e%3cpath d=\&apos;M0 109v109h401V0H0v109m319-71v23H46v140h18v-46H48V62h289v-3c0-3 0-4 2-4s2-1 2-16 0-16-2-16-2-1-2-3v-4h-18v22m2 0v22h15V18l-8-1h-7v21m-64-7l-7 2c-1 1-2 7 0 8v2c-1 2 1 4 4 4 4 0 6 2 5 4h-8c-2-3-3-1-2 1s2 2 6 2c9 0 11-8 1-9-4-1-5-2-1-3 5 0 6-2 6-6-1-2-1-3 1-3 1 0 2-2 0-2h-5m-76 1c-8 2-7 16 1 16 6 0 9-6 7-12-1-3-5-5-8-4m19 0h-4l-1 8c0 10 2 11 3 1 0-6 1-7 3-7h3v7c0 6 0 7 2 7l1-8c-1-8-2-10-7-8M69 34c-6 8 2 18 9 12 5-5 2-14-4-14-3 0-4 1-5 2m199 40c-1 1 0 2 2 2s2 1 2 8 0 8-2 8l-2 1c-1 1 1 1 5 1l7-1-2-1c-3 0-3 0-3-8 0-7 0-8 2-8l3-2c0-1-11-2-12 0m-72 7c-5 6 1 16 9 13 3-1 2-3-2-2-3 0-4 0-5-2-2-3-1-3 5-3 4 0 5 0 5-2 0-3-4-7-7-7-2 0-4 1-5 3m127-2c-2 1 0 2 3 1 2 0 5 1 5 3l-4 2c-6 1-8 5-4 8 2 1 3 2 4 1h5c3 0 3 0 2-6 0-8-2-10-7-10l-4 1m17 7c0 6 0 8 2 8l1-6c0-6 0-6 3-7 3-2 4 0 4 7 0 5 0 6 2 6 1 0 2-9 0-13-1-3-6-4-8-2h-1l-1-1c-2 0-2 2-2 8m-72 35l2 1c3 0 3 16 0 16-5 1-2 3 4 3l6-1-3-2c-2 0-2-1-2-8 0-8 0-8 3-8l2-1-7-1c-4 0-6 0-5 1m-72 5c-6 7 1 18 9 14 3-1 2-2-1-2-2 1-4 1-5-1-3-2-2-3 4-3 5 0 5 0 5-3s-4-7-7-7l-5 2m128-1c-2 1-1 2 3 2 5 1 6 4 1 4l-5 2c-5 4 1 10 7 7h3c1 2 2 0 1-7-1-8-4-11-10-8m17 0c-2 1-1 16 0 16 2 0 2-2 2-6 1-7 2-9 5-8 2 1 2 2 2 8 0 8 2 8 3-1 0-8-2-11-7-9h-5M48 179v21h14v-43H48v22m3-16c0 1 1 2 3 2h2v23h-2c-2 0-3 1-3 2l4 1h4v-28l-4-1-4 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/1ce670f817f4157b59c32b142b47fd99/f2fbe/DraggedImage-12.webp 200w,
/blogs/static/1ce670f817f4157b59c32b142b47fd99/e227a/DraggedImage-12.webp 400w,
/blogs/static/1ce670f817f4157b59c32b142b47fd99/3d5c2/DraggedImage-12.webp 448w&quot;
          sizes=&quot;(max-width: 448px) 100vw, 448px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/1ce670f817f4157b59c32b142b47fd99/9ec3c/DraggedImage-12.png 200w,
/blogs/static/1ce670f817f4157b59c32b142b47fd99/c7805/DraggedImage-12.png 400w,
/blogs/static/1ce670f817f4157b59c32b142b47fd99/6e872/DraggedImage-12.png 448w&quot;
          sizes=&quot;(max-width: 448px) 100vw, 448px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/1ce670f817f4157b59c32b142b47fd99/6e872/DraggedImage-12.png&quot;
          alt=&quot;DraggedImage 12&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
注意到了吗，这对 &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt; 之间是一条折线，来表明这个括号所表示的范围。这个功能在较长代码和嵌套的时候，特别有用。&lt;/p&gt;
&lt;h3 id=&quot;auto-close-tag&quot;&gt;&lt;a href=&quot;#auto-close-tag&quot; aria-label=&quot;auto close tag permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auto Close Tag&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/f042e1918db50d4f0fe60e49be37b59f/ef000/DraggedImage-13.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 498px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 30.120481927710845%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;120\&apos;%3e%3cpath d=\&apos;M0 60v60h401V0H0v60m25-37l-5 13c0 2 3 1 4-1 0-1 1-2 3-2l3 2c0 2 3 3 3 1 0-7-6-16-8-13m34 4c-4 4-1 10 4 10 4 0 7-7 3-10-2-3-5-2-7 0m40 0c-4 4-1 10 4 10 4 0 7-7 3-10-2-3-5-2-7 0m69-1c-2 1-3 7 0 9 1 2 2 2 4 1s3 0 1 2h-4c-2-1-3 0-2 2 2 1 7 1 8-1 2-1 2-3 2-7 0-6-1-9-3-6h-6m11 28c0 2 0 3-2 2-5-1-7 5-5 9 1 2 2 2 5 2h4v-8l-1-7-1 2m13 0c0 2 0 3-3 2-3 0-5 2-5 6s2 5 6 5h4v-8l-1-7-1 2m41-1v14l1-5 1-5 1 5c3 6 4 6 7 0l2-4v4c0 8 2 6 2-2 0-9-1-10-5-2l-3 6-2-5c-2-6-3-7-4-6m51 0v14l1-5 1-4 2 4 3 5 3-5 2-4v4l1 5 1-7c0-11-1-10-6 2-1 2-1 2-3-3-3-5-4-7-5-6m80 26c-1 2-1 2-3 1s-4 1-3 3 1 2-1 3l-2 2 2 2c2 1 2 1 1 3s1 4 3 3 2-1 3 1l2 2 2-2c1-2 1-2 3-1s4-1 3-3-1-2 1-3c3 0 3-3 0-4-2-1-2-1-1-3s-1-4-3-3-2 1-3-1c-1-3-4-3-4 0\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/f042e1918db50d4f0fe60e49be37b59f/f2fbe/DraggedImage-13.webp 200w,
/blogs/static/f042e1918db50d4f0fe60e49be37b59f/e227a/DraggedImage-13.webp 400w,
/blogs/static/f042e1918db50d4f0fe60e49be37b59f/35c86/DraggedImage-13.webp 498w&quot;
          sizes=&quot;(max-width: 498px) 100vw, 498px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/f042e1918db50d4f0fe60e49be37b59f/9ec3c/DraggedImage-13.png 200w,
/blogs/static/f042e1918db50d4f0fe60e49be37b59f/c7805/DraggedImage-13.png 400w,
/blogs/static/f042e1918db50d4f0fe60e49be37b59f/ef000/DraggedImage-13.png 498w&quot;
          sizes=&quot;(max-width: 498px) 100vw, 498px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/f042e1918db50d4f0fe60e49be37b59f/ef000/DraggedImage-13.png&quot;
          alt=&quot;DraggedImage 13&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个不解释了，就是自动帮你填充对应的 Tag。如果你对 emmet 用的很熟练的话，这个插件可能出场率不高。&lt;/p&gt;
&lt;h3 id=&quot;auto-rename-tag&quot;&gt;&lt;a href=&quot;#auto-rename-tag&quot; aria-label=&quot;auto rename tag permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Auto Rename Tag&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/b1dd5/DraggedImage-14.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 25.718608169440245%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;103\&apos;%3e%3cpath d=\&apos;M0 52v51h401V0H0v52m160-35c0 2 0 7 2 7l1-3 1-3 1 3 2 4 1-4c0-4 2-4 2 0s2 5 3 2l1-1c0 3 4 4 6 2 1-2 1-2-1-1l-3-1 3-1c2 0 2 0 2-2-1-3-6-4-7-2 0 2 0 2-2 1-2-2-11-2-12-1M4 28l27 1 26-1-26-1-27 1m3 19l3 1H7l-3 1a704 704 0 0 0 59-2l-30-1-26 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/f2fbe/DraggedImage-14.webp 200w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/e227a/DraggedImage-14.webp 400w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/0cbce/DraggedImage-14.webp 800w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/6bc95/DraggedImage-14.webp 1200w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/fac13/DraggedImage-14.webp 1322w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/9ec3c/DraggedImage-14.png 200w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/c7805/DraggedImage-14.png 400w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/8ff1e/DraggedImage-14.png 800w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/6ff5e/DraggedImage-14.png 1200w,
/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/b1dd5/DraggedImage-14.png 1322w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/d9451876d2a67a0beb4a8ad48cf93f0a/8ff1e/DraggedImage-14.png&quot;
          alt=&quot;DraggedImage 14&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和上面一个算是兄弟插件吧。嗯，作者也是同一个人。作用很明显，自动帮你改对应的 tag！同样的，如果你的结构比较复杂的话，这个还是会有点小 bug 的话，不过在时间的节省上，这个插件显然是必装的。emmet 也提供了这个功能，搜索 &lt;code class=&quot;language-text&quot;&gt;emmet: update tag&lt;/code&gt;，这个功能的稳定性应该会高于这个插件，但是要主动去设置快捷键。&lt;/p&gt;
&lt;h3 id=&quot;html-css-support&quot;&gt;&lt;a href=&quot;#html-css-support&quot; aria-label=&quot;html css support permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTML CSS Support&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/bdab489283bc25b9e8067114fcb87cbe/00171/DraggedImage-15.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 494px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 28.74493927125506%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;115\&apos;%3e%3cpath d=\&apos;M0 58v57h11l11-1 2-1 1 1 23 1a103 103 0 0 0 29-2l6 1a91 91 0 0 0 29 0h22l134 1h133V0H0v58m16-38c0 6 0 7 2 7l1-3c0-3 0-3 4-3 3 0 3 0 3 3 0 2 1 3 2 3l1-7-1-8c-1 0-2 1-2 3 0 3 0 3-3 3-4 0-4 0-4-3l-1-3c-2 0-2 2-2 8m31-7c-2 1-1 14 1 14l1-5v-4l2 3c3 7 4 7 6 2l2-4v4c0 3 0 4 2 4l1-7c0-10-2-11-5-3l-3 6-1-3-2-5c-1-3-3-4-4-2m54 0c-4 2-2 6 2 8l4 2c0 2-3 2-4 1-2-1-4-1-4 1 0 3 9 4 11 0 1-3 0-5-4-7l-4-2h8c0-3-6-5-9-3m14 1c-3 2-2 6 3 7 3 1 4 4 1 4l-2-1h-4l2 3c6 3 13-3 8-7l-4-2-3-1c0-2 3-2 5-1h3c0-4-7-5-9-2m20-1c-4 2-2 6 2 8l4 2c0 2-3 2-4 1-2-1-4-1-4 1 0 3 9 4 11 0 1-3 0-5-4-7l-4-2h8c0-3-6-5-9-3m25 11c0 6 0 7 2 7l1-2c0-2 0-3 3-2 4 0 5-1 5-6 0-4-1-5-7-5h-4v8m14 0c0 6 0 7 2 7l1-2c0-2 0-3 3-2 3 0 5-2 5-5 0-4-2-6-7-6h-4v8m15-6c-4 3-2 9 3 9 4 0 6-2 6-5 0-6-6-8-9-4m65 27c0 2 0 3-3 2-3 0-5 2-5 6s2 5 6 5h4v-8l-1-7c-1-1-1 0-1 2m-44 6l1 7 1-5v-5l2 5c3 6 4 6 6 0l3-5v5l1 5 1-7c0-10-2-11-5-2l-2 6-3-6c-4-8-5-8-5 2M87 55l1 7 1-2c0-2 0-3 3-2 3 0 5-2 5-5 0-5-2-6-6-6h-4v8m13 0l1 7 1-2c0-2 0-3 3-2 4 0 6-3 4-8 0-2-1-3-5-3h-4v8m262 15c-1 2-1 2-3 1s-4 1-3 3 1 2-1 3l-2 2 2 2c2 1 2 1 1 3s1 4 3 3 2-1 3 1l2 2 2-2c1-2 1-2 3-1s4-1 3-3-1-2 1-3l2-2-2-2c-2-1-2-1-1-3s-1-4-3-3-2 1-3-1c0-3-3-3-4 0\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/bdab489283bc25b9e8067114fcb87cbe/f2fbe/DraggedImage-15.webp 200w,
/blogs/static/bdab489283bc25b9e8067114fcb87cbe/e227a/DraggedImage-15.webp 400w,
/blogs/static/bdab489283bc25b9e8067114fcb87cbe/a4c00/DraggedImage-15.webp 494w&quot;
          sizes=&quot;(max-width: 494px) 100vw, 494px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/bdab489283bc25b9e8067114fcb87cbe/9ec3c/DraggedImage-15.png 200w,
/blogs/static/bdab489283bc25b9e8067114fcb87cbe/c7805/DraggedImage-15.png 400w,
/blogs/static/bdab489283bc25b9e8067114fcb87cbe/00171/DraggedImage-15.png 494w&quot;
          sizes=&quot;(max-width: 494px) 100vw, 494px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/bdab489283bc25b9e8067114fcb87cbe/00171/DraggedImage-15.png&quot;
          alt=&quot;DraggedImage 15&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;刚写前端的时候，或者为了方便，我们偶尔会把 CSS 写在 HTML 里，但是那样的话是没有直接创建 &lt;code class=&quot;language-text&quot;&gt;.css&lt;/code&gt; 文件强大的自动补全特性的，这个插件让一切都回来了。&lt;/p&gt;
&lt;h3 id=&quot;settings-sync&quot;&gt;&lt;a href=&quot;#settings-sync&quot; aria-label=&quot;settings sync permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Settings Sync&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/00171/DraggedImage-16.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 494px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 27.530364372469634%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;110\&apos;%3e%3cpath d=\&apos;M0 55v55h401V0H0v55m18-35c-3 2-2 6 2 7l4 3h-8c-2 1 2 4 5 4 8 0 8-8 1-9l-3-2c0-2 2-2 5-1 3 2 4 0 1-2s-4-2-7 0m94 0c-4 2-2 6 3 8 2 0 3 1 3 2h-8c0 2 2 4 6 4 6 0 8-7 2-9-4 0-6-3-4-4l3 1h4c0-2-4-4-6-4l-3 2m-31 3c-2 1-3 7 0 9 1 2 2 2 4 1h2c0 2-2 3-6 2-2 0-2 0-1 1 1 2 5 3 8 1 3-1 3-15 1-15l-2 1h-6m123 32c-4 4-1 10 3 9 2-1 3 0 3 1 0 2-3 3-5 1h-2c1 3 4 3 6 2 3-1 3-1 3-8v-6l-3-1c-3 0-4 1-5 2m66 6l1 7 1-2c0-2 0-2 2-1 2 0 3 0 4-2 4-5 1-9-5-9h-3v7m12-7l1 14 1-2c0-2 0-2 2-2 5 2 9-4 6-9-2-2-8-3-10-1m80 22c0 2-1 2-3 2-3 0-4 0-3 3 1 1 0 2-1 2l-2 3 2 2c1 0 2 1 1 2-1 3 0 3 3 3 2 0 3 0 3 2 1 3 3 3 4 0 1-1 2-2 3-1 3 0 4-1 3-3s-1-2 1-3c3-2 3-4 0-5-1 0-2-1-1-2 1-3 0-3-2-3l-4-2c-1-3-3-2-4 0\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/f2fbe/DraggedImage-16.webp 200w,
/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/e227a/DraggedImage-16.webp 400w,
/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/a4c00/DraggedImage-16.webp 494w&quot;
          sizes=&quot;(max-width: 494px) 100vw, 494px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/9ec3c/DraggedImage-16.png 200w,
/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/c7805/DraggedImage-16.png 400w,
/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/00171/DraggedImage-16.png 494w&quot;
          sizes=&quot;(max-width: 494px) 100vw, 494px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/ecd09958faef608f6794cac3bc5e6d9f/00171/DraggedImage-16.png&quot;
          alt=&quot;DraggedImage 16&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同步你在 VSCode 中的所有设置和下载过的插件，Snippet，快捷键绑定。对于有多台电脑的朋友，这个插件是必备的。不过它是基于 &lt;strong&gt;gist&lt;/strong&gt; 来保存你的配置，而这个在国内需要翻墙… 同时这个插件第一次设置的也比较繁琐，需要一定的耐心。总的来说，当你必须换一台电脑的时候，一定要花点时间到这个插件上。可以节省你大量的时间！&lt;/p&gt;
&lt;h3 id=&quot;path-intellisense&quot;&gt;&lt;a href=&quot;#path-intellisense&quot; aria-label=&quot;path intellisense permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Path Intellisense&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/b1189f788c88c0ba1841df121e97482b/333b7/DraggedImage-17.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 492px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 23.17073170731707%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;93\&apos;%3e%3cpath d=\&apos;M0 47v46h401V0H0v47m16-34c0 6 0 8 2 8l1-2c0-2 1-3 3-3 8-1 7-9-1-10h-5v7m107 26c0 3 0 3-2 2-4-3-8 4-5 9 1 1 2 2 5 2h4v-8l-1-8-1 3m64 0c0 2 0 2-2 1-5-1-8 7-4 10 1 1 2 2 5 2h3v-8l-1-8-1 3m-18 2c-4 3-2 11 2 11 5 0 8-6 4-10-2-2-4-2-6-1m42 0v15l1-2c0-3 0-3 3-2 2 0 3 0 4-2 4-5 0-11-5-9h-3m32 0c-3 2-3 9 0 10h4c2-1 2-1 2 1l-4 1c-4 0-4 0-3 2 2 1 5 1 7-1 2-1 3-12 1-13h-7m121 22l-4 2c-2 0-2 0-2 2 0 3-1 4-2 4-3 0-2 3 0 4 2 0 2 1 2 3 0 3 0 4 3 3 1-1 2 0 2 1l3 2 2-2c0-1 1-2 2-1 3 1 3 0 3-3 0-2 0-3 2-3 2-1 3-4 0-4l-1-4c0-2-1-2-3-2l-4-2-2-2-1 2\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/b1189f788c88c0ba1841df121e97482b/f2fbe/DraggedImage-17.webp 200w,
/blogs/static/b1189f788c88c0ba1841df121e97482b/e227a/DraggedImage-17.webp 400w,
/blogs/static/b1189f788c88c0ba1841df121e97482b/8abd3/DraggedImage-17.webp 492w&quot;
          sizes=&quot;(max-width: 492px) 100vw, 492px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/b1189f788c88c0ba1841df121e97482b/9ec3c/DraggedImage-17.png 200w,
/blogs/static/b1189f788c88c0ba1841df121e97482b/c7805/DraggedImage-17.png 400w,
/blogs/static/b1189f788c88c0ba1841df121e97482b/333b7/DraggedImage-17.png 492w&quot;
          sizes=&quot;(max-width: 492px) 100vw, 492px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/b1189f788c88c0ba1841df121e97482b/333b7/DraggedImage-17.png&quot;
          alt=&quot;DraggedImage 17&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提供 URL 的自动补全功能，这个必须装吧。支持任何语言，触发条件一般是在一对引号中，输入 &lt;code class=&quot;language-text&quot;&gt;./&lt;/code&gt; ，&lt;code class=&quot;language-text&quot;&gt;../&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt; 这些表示路径的前缀，就会跳出来了。像我们的 JS，HTML 中引用文件，CSS 中 &lt;code class=&quot;language-text&quot;&gt;url&lt;/code&gt; 就再也不用担心了。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/2053a/DraggedImage-18.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 77.44186046511628%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;310\&apos;%3e%3cpath d=\&apos;M0 59v59h25l25 1H0v45l2-1c2 0 2 0 1-1-2 0-3-2-1-2s4 2 4 5c0 2 0 3-3 3-3-1-3-1-3 5 0 5 0 5 2 4h3c2 1 0 4-2 4H2l2 1c2 0 2 0 1 1H1c-1-1-1 2-1 21 0 20 0 22 2 21 0-1 2-2 3-1 1 0 1 1-1 1s-2 1-2 2c0 2 1 2 3 2v1H2c-2-1-2-1-2 3l1 4 1 1 2 2c1 0 2 0 2 3l-1 4-1-4-1-2-1 2-1 4-1 6c0 6 0 6 2 5 2 0 2 0 1-1-2 0-3-2-1-2s4 2 4 5c0 2 0 3-3 3-3-1-3-1-3 5l1 5h1l2 1v-2l-1-1c3 1 4 4 1 4l-2 1 2 1c2 0 2 0 1 1H2c-2-1-2 0-2 13v14h3c2 0 3 0 2 1l-3 1c-1-1-2 0-2 1 0 2 1 2 4 2s3 0 3-4c0-5 3-7 3-3v3l1-3c1-4 2-2 3 3l1 2 2-3h3l-3-1c-2 0-2-1-1-1 2-1 5 1 5 5l2 2v-2c-2-2 1-6 4-5 2 0 1 2-1 2l-1 2 1 1 2 1 1 1 1-4c0-5 1-7 4-5 1 1 2 2 2 5-1 2 0 4 1 4v-3c0-2 0-3 2-4s4 1 4 4c-1 2 0 3 1 3 2 0 2 0 1-2s-1-3 1-4c2-3 5-1 5 3v3l1-4 1-4 1 2h1c2-2 3-1 2 1-2 2 1 5 6 5 4 0 4 0 4-4l1-4 1 2 2 1 1-2h1c2 1 0 4-3 4l-1 2c0 2 6 1 7-1v-4c-1-1 0-1 1-1h3l1 1-1 1c-2-1-3 2-2 4 2 2 5 1 4-2 0-3 2-5 4-4s2 2 2 4l-1 3h6c6 0 10-3 9-6-1-1 1-1 9-1 12 0 12 0 9 4v3l2-3c2-5 4-6 4-1 0 4 0 4 2 4 3 0 5-2 5-5 0-4 1-3 1 1 0 3 1 4 3 4l2-1h-1l-2-1 2-1c2 0 3-2 1-4l1-1c2 0 3 1 2 2l1 3 2 1-1 1h-2c0 2 4 1 5-1l-2-3c-2-1-2-1 0-1l3-1c1-1 1 0 1 3l1 4 1-2 1-1 2-2c1-3 4-2 4 2 0 2 1 3 3 3v-1c-4-2-2-6 3-7l1 4c0 3 0 4 2 4s4-4 3-6v-1c1-1 1 0 1 3 0 4 0 4 3 4 2 0 2-1 2-4s1-3 3-3c3 0 3-1 1 3l-1 4 3-4c2-3 6-6 5-2l1 2c3 2 3 3 0 2l-2 1h6l-2-3-1-2 2-1c1-3 3 0 3 4 0 3 0 3 1 1 1-5 3-5 3-1 1 3 1 3 1-1s0-4 2-3c3 2 3 5 1 6-1 1-1 1 2 1 2 0 3 0 2-1v-6c2-1 4 1 4 4 0 2 1 3 3 3v-1c-3-1-3-5 0-5 2-2 13-1 14 0 1 0 1 2-1 3l-1 3h176V0H0v59m56-17v9l1 7h12v-6c0-5 0-7-2-8h-1v2l-1-2c0-2 0-3-4-3l-5 1m2 7v7h10v-4c0-5 0-5-2-5s-3 0-3-2 0-3-2-3c-3 0-3 0-3 7m-2 17v9l1 7h12v-6c0-6 0-7-2-9-3-2-10-3-11-1m2 8v6h10v-4c0-5 0-5-2-5s-3-1-3-2l-2-2c-3 0-3 0-3 7m-2 16v9l1 7h12v-6c0-6 0-7-2-9-3-2-10-3-11-1m2 8v7h10v-5l-1-5c-2 1-4 0-4-2l-2-2c-3 0-3 0-3 7m-2 24v8h13v-6c0-8-2-10-8-10h-5v8m2 0v7h10v-4c0-4 0-5-2-5s-3-1-3-3c0-1-1-2-3-2s-2 0-2 7m-2 24v8h13v-6c0-8-2-10-8-10h-5v8m2 0v7h10v-4c0-4 0-5-2-5s-3-1-3-3c0-1-1-2-3-2s-2 0-2 7m-2 17v9l1 7h12v-6l-1-7h-1l-1 1-1-2c0-2 0-3-4-3l-5 1m2 7v7h10v-4c0-5 0-5-2-5s-3 0-3-2 0-3-2-3c-3 0-3 0-3 7m-2 17v9l1 7h12v-6c0-6 0-7-2-9-3-2-10-3-11-1m2 8v6h10v-4c0-5 0-5-2-5s-3-1-3-2l-2-2c-3 0-3 0-3 7m-2 16v9l1 7h12v-6c0-6 0-7-2-9-3-2-10-3-11-1m2 8v7h10v-5c0-5 0-5-2-5s-3-1-3-2l-2-2c-3 0-3 0-3 7m-2 24l1 8h12v-6c0-8-2-10-8-10h-5v8m2 0v7h10v-4c0-4 0-5-2-5s-3-1-3-3c0-1-1-2-3-2s-2 0-2 7m-2 24v8h13v-6c0-8-2-10-8-10h-5v8m2 0v7h10v-4c0-4 0-5-2-5s-3-1-3-3c0-1-1-2-3-2s-2 0-2 7m-1 17l-1 8v7h13v-6c0-8-2-10-8-10l-4 1m1 7v7h10v-4c0-4 0-5-2-5s-3-1-3-3c0-1-1-2-3-2s-2 0-2 7\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/f2fbe/DraggedImage-18.webp 200w,
/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/e227a/DraggedImage-18.webp 400w,
/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/0cbce/DraggedImage-18.webp 800w,
/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/4f9f9/DraggedImage-18.webp 860w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/9ec3c/DraggedImage-18.png 200w,
/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/c7805/DraggedImage-18.png 400w,
/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/8ff1e/DraggedImage-18.png 800w,
/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/2053a/DraggedImage-18.png 860w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/6c313d49f82f3cd880af2fb5d5804df8/8ff1e/DraggedImage-18.png&quot;
          alt=&quot;DraggedImage 18&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;css-peak&quot;&gt;&lt;a href=&quot;#css-peak&quot; aria-label=&quot;css peak permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS Peak&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/31916/DraggedImage-19.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 16.063548102383056%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;64\&apos;%3e%3cpath d=\&apos;M0 32v32h401V0h-13l-15 1h-2L185 0H0v32m23-16c-5 1-10 5-12 11-7 15 10 32 26 25 4-2 4-2 7 0 2 2 2 2 4 1 1-2 1-2-1-5-2-2-2-2-1-5 8-15-7-33-23-27m-2 4c-10 6-11 20-2 27 11 9 26 1 26-13 0-12-14-20-24-14\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/f2fbe/DraggedImage-19.webp 200w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/e227a/DraggedImage-19.webp 400w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/0cbce/DraggedImage-19.webp 800w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/6bc95/DraggedImage-19.webp 1200w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/ded3f/DraggedImage-19.webp 1600w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/177df/DraggedImage-19.webp 2266w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/9ec3c/DraggedImage-19.png 200w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/c7805/DraggedImage-19.png 400w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/8ff1e/DraggedImage-19.png 800w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/6ff5e/DraggedImage-19.png 1200w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/2f950/DraggedImage-19.png 1600w,
/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/31916/DraggedImage-19.png 2266w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/0b0cbd23a4236f22f6570d41b569f6cc/8ff1e/DraggedImage-19.png&quot;
          alt=&quot;DraggedImage 19&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这插件的功能就是在我们看到 HTML 或者 JSX 等代码中，如果出现了 &lt;code class=&quot;language-text&quot;&gt;class/className&lt;/code&gt; 的话，可以通过 &lt;code class=&quot;language-text&quot;&gt;Cmd/Ctrl&lt;/code&gt; ➕ 左键点击某个 class 直接跳转到对应 CSS 的定义。非常方便，但是&lt;strong&gt;并不是每个时候都有用&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;live-server&quot;&gt;&lt;a href=&quot;#live-server&quot; aria-label=&quot;live server permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Live Server&lt;/h3&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/6c73592240d9ad5c9ac39239dca439c8/31916/DraggedImage-20.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 18.00529567519859%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;72\&apos;%3e%3cpath d=\&apos;M0 36v36h401V0H0v36m78-26c-2 4 0 9 3 6h6c1-2 1-2 1 0 1 1 1 1 1-1 0-3 2-3 3 0 0 2 2 3 2 1h2c3 1 6 1 6-2 1-3 0-4-1-2H82c0-2-3-3-4-2M13 20c-4 7-3 22 3 24 3 1 3-2 1-6-4-5-4-11-1-16 2-3 3-4 2-5-2-2-3-1-5 3m26-3l2 5c3 4 3 11 0 16-3 6-1 8 3 4 4-6 5-16 1-22-3-4-5-5-6-3m38 28v3h16v-7H77v4\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/6c73592240d9ad5c9ac39239dca439c8/f2fbe/DraggedImage-20.webp 200w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/e227a/DraggedImage-20.webp 400w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/0cbce/DraggedImage-20.webp 800w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/6bc95/DraggedImage-20.webp 1200w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/ded3f/DraggedImage-20.webp 1600w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/177df/DraggedImage-20.webp 2266w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/6c73592240d9ad5c9ac39239dca439c8/9ec3c/DraggedImage-20.png 200w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/c7805/DraggedImage-20.png 400w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/8ff1e/DraggedImage-20.png 800w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/6ff5e/DraggedImage-20.png 1200w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/2f950/DraggedImage-20.png 1600w,
/blogs/static/6c73592240d9ad5c9ac39239dca439c8/31916/DraggedImage-20.png 2266w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/6c73592240d9ad5c9ac39239dca439c8/8ff1e/DraggedImage-20.png&quot;
          alt=&quot;DraggedImage 20&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个神器，如果你还不会使用 &lt;code class=&quot;language-text&quot;&gt;webpack 或者 parcel&lt;/code&gt; 的话。它提供了自动保存文件后自动刷新的功能。虽然这个功能看上去并不是很起眼，和 &lt;code class=&quot;language-text&quot;&gt;browser-sync&lt;/code&gt; 似乎也差不多，但它能内置到 VSCode 中就大大简化了操作。&lt;/p&gt;
&lt;p&gt;对于刚写前端的朋友有一个很重要的问题，他们往往喜欢直接通过浏览器打开某个 HTML 文件，在浏览器顶部会显示这个 URL 是 &lt;strong&gt;file&lt;/strong&gt; 开头的。file 也算是一个协议，和我们知道的 HTTP 协议一样。如果直接通过 file 来打开 HTML 的话，很多 JS 的功能是不能实现的。比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Web Worker&lt;/li&gt;
&lt;li&gt;Service Worker&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过使用这个插件，就再也不用担心这个问题。使用方式也很简单，安装好后，点击需要的启动的 HTML 文件中底部 tab 的&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/c755ad342baefc7ad5f4e6d46b13e721/9ec3c/DraggedImage-21.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 200px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 30%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;120\&apos;%3e%3cpath d=\&apos;M0 59v59h401V0H0v59m124-11c-14 5-22 22-16 35 2 5 9 13 11 13s1-4-2-7c-8-7-9-19-3-28 12-18 40-10 40 12 0 7-1 11-7 17-3 3-3 4-2 5s2 0 6-4c16-16 6-43-17-44l-10 1m5 10l-7 4c-6 5-7 11-5 17 3 4 3 3 4-5 0-9 5-14 13-13 7 2 10 6 10 14 0 7 1 9 3 4 5-11-5-23-18-21m55 4c-8 7-8 20 0 27 8 8 21 4 24-6 2-7 1-8-7-8-5 0-6 1-6 2s1 2 4 2c5 0 5 3 2 7-3 5-14 3-16-3-4-10-1-18 8-20 3-1 9 2 10 4l2 2c4-1 3-4-2-8-5-5-13-5-19 1m73-3v18l1 16h10c9 0 10-1 10-2 0-2-1-3-8-3h-8V74c0-13 0-15-2-15h-3m-35 8c-8 3-11 16-4 22 3 3 4 4 8 4 13 0 16-20 3-26l-3-1-4 1m107 0c-5 2-7 5-8 11-1 9 4 15 12 15 5 0 12-5 9-7l-5 1c-4 3-7 2-9 0-4-4-2-5 7-6h9l-1-4c0-4-3-9-6-10h-8m-45 1v13c0 11 1 12 3 12s3-25 0-26l-3 1m11 0c-1 1 8 23 9 24 3 2 4 0 9-12 4-11 4-13 1-13-1 0-3 3-6 13l-2 7-3-7c-4-12-6-16-8-12m-167 1l-1 5c1 3 0 4-2 5-3 3-3 8 0 10 1 2 2 3 2 7 0 5 1 7 6 7 4 0 5-2 5-8 0-4 0-5 2-6s1-9-1-10-3-2-2-3c2-3 0-7-4-8l-5 1m93 4c-2 2-3 10 0 13 1 3 7 3 10 1 2-3 2-11 0-14-3-3-7-3-10 0\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/c755ad342baefc7ad5f4e6d46b13e721/f2fbe/DraggedImage-21.webp 200w&quot;
          sizes=&quot;(max-width: 200px) 100vw, 200px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/c755ad342baefc7ad5f4e6d46b13e721/9ec3c/DraggedImage-21.png 200w&quot;
          sizes=&quot;(max-width: 200px) 100vw, 200px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/c755ad342baefc7ad5f4e6d46b13e721/9ec3c/DraggedImage-21.png&quot;
          alt=&quot;DraggedImage 21&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在短暂的等待后，就会自动打开你的默认浏览器跳入由该插件启动的服务器。&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/540d5a716800cdbfda68f156e6800d98/3a666/DraggedImage-22.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 434px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 12.903225806451612%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;52\&apos;%3e%3cpath d=\&apos;M17 12C5 15 5 35 18 36c5 0 7 0 11-3 9-9 1-24-12-21m-1 3c-7 4-6 15 1 18 9 3 17-8 10-15-3-3-7-4-11-3m43 2c-2 2-2 4 0 4l1-1c0-2 2-3 5-2 2 1 1 4-3 9-6 7-6 7 1 7 7-1 9-2 3-3h-4l3-4 4-7c0-4-7-7-10-3m33 1c-4 5-1 16 5 16 4 0 6-4 6-11-1-8-7-11-11-5m21-1c-4 5-1 17 5 17 4 0 6-3 6-9 0-9-6-13-11-8m73 1c-4 5-2 14 3 16 3 1 5-1 7-5 3-10-5-18-10-11m16 0c-4 5-1 16 4 16s8-7 6-13-6-8-10-3m2 1c-3 4-2 13 2 13 3 0 4-3 4-8 0-7-3-9-6-5m57 2c-1 2 0 3 2 2 2-2 5-1 5 1s-1 2-3 2c-4 0-6 3-5 5 0 2 5 4 6 2h3c1 2 2-10 0-12h-8m15 1c-3 2-2 8 0 10 6 6 13-3 8-10-1-3-6-3-8 0m44 0c0 2 0 12 2 12l1-6c0-5 1-5 3-5s3 0 3 6c1 6 2 5 2-2 0-4 1-4 3-4s3 0 3 5c0 8 2 8 2 0 0-7-1-9-6-7h-3c-3-1-9-1-10 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/540d5a716800cdbfda68f156e6800d98/f2fbe/DraggedImage-22.webp 200w,
/blogs/static/540d5a716800cdbfda68f156e6800d98/e227a/DraggedImage-22.webp 400w,
/blogs/static/540d5a716800cdbfda68f156e6800d98/250f3/DraggedImage-22.webp 434w&quot;
          sizes=&quot;(max-width: 434px) 100vw, 434px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/540d5a716800cdbfda68f156e6800d98/9ec3c/DraggedImage-22.png 200w,
/blogs/static/540d5a716800cdbfda68f156e6800d98/c7805/DraggedImage-22.png 400w,
/blogs/static/540d5a716800cdbfda68f156e6800d98/3a666/DraggedImage-22.png 434w&quot;
          sizes=&quot;(max-width: 434px) 100vw, 434px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/540d5a716800cdbfda68f156e6800d98/3a666/DraggedImage-22.png&quot;
          alt=&quot;DraggedImage 22&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下次要进去的话，可以直接通过 &lt;code class=&quot;language-text&quot;&gt;localhost:5500&lt;/code&gt;进去。值得一提的是，这个插件仅仅只是一个很方便的功能，但不代表它很强大。需要更强大的开发流程还是需要考虑 parcel 或者 webpack。&lt;/p&gt;
&lt;h2 id=&quot;更多&quot;&gt;&lt;a href=&quot;#%E6%9B%B4%E5%A4%9A&quot; aria-label=&quot;更多 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;更多&lt;/h2&gt;
&lt;p&gt;如果还想继续提升开发的幸福感，可以考虑学习&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://emmet.io&quot;&gt;Emmet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/editor/codebasics&quot;&gt;VSCode 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;谢谢阅读 🌚&lt;/p&gt;</content:encoded></item><item><title><![CDATA[PureComponent Considered Harmful]]></title><description><![CDATA[这篇文章有点标题党, 其实主要要强调的是  到处使用 PureComponent 是不对的 . 和 Component…]]></description><link>https://github.com/thoamsy/blogs.git/PureComponent is harmful/PureComponent is harmful/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/PureComponent is harmful/PureComponent is harmful/</guid><pubDate>Mon, 21 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;这篇文章有点标题党, 其实主要要强调的是 &lt;strong&gt;到处使用 PureComponent 是不对的&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;和-component-的区别&quot;&gt;&lt;a href=&quot;#%E5%92%8C-component-%E7%9A%84%E5%8C%BA%E5%88%AB&quot; aria-label=&quot;和 component 的区别 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;和 Component 的区别&lt;/h2&gt;
&lt;p&gt;其实, &lt;code class=&quot;language-text&quot;&gt;PureComponent &amp;amp; Component&lt;/code&gt; 的区别不大, &lt;code class=&quot;language-text&quot;&gt;PureComponent&lt;/code&gt; 自己实现了 &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt; 方法, 大概的实现类似于&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;shouldComponentUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nextState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shadowEquals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shadowEquals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在有一个能组件, 能在不需要更新的时候, 自动帮我们做出这个判断, 不是很好嘛?
先想象一个很常见的场景. 比如下面的界面&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/ea81edfa33b834ffe435293adf8025ba/1e6a7/88C8D2C2-A934-41FF-BAAE-830CB990718A.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 48.74696847210995%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;195\&apos;%3e%3cpath d=\&apos;M8 9c0 2 0 3 2 3 3 0 6-2 6-3 0-2 2-2 3 1 0 3 2 3 2 0l2-2 2 2c0 3 2 3 2 0 1-3 3-4 3-2l2 4c0 2 2 0 2-4l1-3H8v4m88 24v21l104 1c118 0 105 1 105-11 0-13 13-12-105-12L96 33m1 2v10l1 8h204V34H200L97 35m70 75v33h66V76h-66v34m19 46c-1 3-1 3 1 2l3 1c1 1 3 1 4-1 2-1 2-1 2 1h5l2-1h2c1 1 1 1 2-1h2c0 3 5 3 5-1 0-2 0-2-2-1l-2-1h-3l-2 1h-2l-1-2-1 1-1 1h-5c0-1-2-1-3 1-2 1-2 1-2-1-1-3-2-3-4 1M47 168l-1 14v13h99v-13l-1-14c-2-1-96-2-97 0m104 0l-1 14v13h99v-27l-49-1-49 1m105 0l-1 14v13h99v-27l-49-1-49 1m-201 9v14l8 1h7v-16h-7l-8 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/ea81edfa33b834ffe435293adf8025ba/f2fbe/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 200w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/e227a/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 400w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/0cbce/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 800w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/6bc95/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 1200w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/ded3f/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 1600w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/aaced/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 2400w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/7855d/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 2474w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/ea81edfa33b834ffe435293adf8025ba/9ec3c/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 200w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/c7805/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 400w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/8ff1e/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 800w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/6ff5e/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 1200w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/2f950/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 1600w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/2fb56/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 2400w,
/blogs/static/ea81edfa33b834ffe435293adf8025ba/1e6a7/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 2474w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/ea81edfa33b834ffe435293adf8025ba/8ff1e/88C8D2C2-A934-41FF-BAAE-830CB990718A.png&quot;
          alt=&quot;88C8D2C2 A934 41FF BAAE 830CB990718A&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设上面的搜索框和下面的内容是&lt;strong&gt;同胞组件&lt;/strong&gt;, 理想情况下, 每一次修改输入框的值都会调用 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;, 也就会导致整个页面重新渲染. 对于下面庞大的组件来说, 显然是很浪费的.
如果让下面的组件继承 PureComponent 的话, 很大程度的解决了这个问题.&lt;/p&gt;
&lt;h2 id=&quot;shadowequals-不是免费的&quot;&gt;&lt;a href=&quot;#shadowequals-%E4%B8%8D%E6%98%AF%E5%85%8D%E8%B4%B9%E7%9A%84&quot; aria-label=&quot;shadowequals 不是免费的 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;shadowEquals 不是免费的&lt;/h2&gt;
&lt;p&gt;这仅仅只是 PureComponent 美好的一面，我们在享受这种美好的时候，很容易被忽略的它的副作用：&lt;strong&gt;每一次 setState 所有的组件都会进行一次 shadowEquals。&lt;/strong&gt;
换句话说，在期望它更新的时候，这些计算都是不可避免的。我做了一个 &lt;a href=&quot;https://codesandbox.io/s/v6y1m1yjk7&quot;&gt;demo&lt;/a&gt;，仅仅一个组件，它的 props 是一个有 3000 个字段的对象, 并且保证真正需要更新的 prop 会在最后才被比较到，将 shadowEquals 的优化完全抵销。&lt;/p&gt;
&lt;p&gt;可以看到，通过 &lt;code class=&quot;language-text&quot;&gt;componentDidUpdate&lt;/code&gt; 每次更新花在 shadowEquals 的时间, 在我的 16 年 13 寸 MacBook Pro 上平均每次需要花费 1.5ms. 当我尝试降低速度四倍的时候, 你猜怎么着? 平均花费的时间达到了 7ms. 可能你会觉得 7ms 似乎也不是多恐怖, 而且我这里是故意捏造了一个 3000 字段的对象.
不过, 在现实情况中, 大量的组件在一次 &lt;em&gt;reconciliation&lt;/em&gt; 后, 发生 re-render, 它们的 props 和 state 的字段长度之和应该有 3000 的数量级.&lt;/p&gt;
&lt;p&gt;再考虑下动画, 要达到 60FPS. 至少要求每一帧能在 17ms 之内运行完毕, 那么仅仅一个 &lt;code class=&quot;language-text&quot;&gt;showComponentUpdate&lt;/code&gt; 方法就会占据 7ms 的时间, 剩下的解析代码, 生成 V-DOM, DOM 的一系列更新操作要在 10ms 之内完成的话, 实在太难. 所以很容易出现动画掉帧的情况.&lt;/p&gt;
&lt;p&gt;这里还有几个佐证: Reactjs 团队的成员建议不要大量使用 PureComponent 的警告 ⚠️.
这个 &lt;a href=&quot;https://news.ycombinator.com/item?id=14418576&quot;&gt;hacknew&lt;/a&gt; 的帖子的作者, 发表了大致的观点:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要到处使用 PureComponent, 如果我们建议这种行为的话, 为什么不让这是默认选项呢?
那么 15.3 推出 PureComponent 的原因到底是什么呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt; 在 Github 中解释了这个原因&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We added a base class because we wanted an official way of marking component as compatible with shadow equality checks, with using mixins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是这段话的完整截图. 这段话具体出自哪个 issue 我并不清楚, 这个截图其实是由 Dan 在 Twitter 中发出来的. 这个&lt;a href=&quot;https://twitter.com/dan_abramov/status/759383530120110080&quot;&gt;推&lt;/a&gt;发布于 2016 年 6 月底&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/faad0289183eae0293db5dd94a588c91/a66cd/ConfSkDXEAAleG5.jpg-large.jpg&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 177.86666666666667%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;711\&apos;%3e%3cpath d=\&apos;M378 6h-10v10h12c6 0 11 0 10-1-2 0-3-2-2-7 0-3 3-1 3 3s0 4 2 3c1-2 2-5 0-5l-1-1c0-2-3-4-3-3l-11 1M33 75c0 5 1 7 4 6l1 1c0 1-1 2-3 2h-2v10l1 10h33V71l-17-1H34l-1 5\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/faad0289183eae0293db5dd94a588c91/f2fbe/ConfSkDXEAAleG5.jpg-large.webp 200w,
/blogs/static/faad0289183eae0293db5dd94a588c91/e227a/ConfSkDXEAAleG5.jpg-large.webp 400w,
/blogs/static/faad0289183eae0293db5dd94a588c91/41df4/ConfSkDXEAAleG5.jpg-large.webp 750w&quot;
          sizes=&quot;(max-width: 750px) 100vw, 750px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/faad0289183eae0293db5dd94a588c91/f544b/ConfSkDXEAAleG5.jpg-large.jpg 200w,
/blogs/static/faad0289183eae0293db5dd94a588c91/41689/ConfSkDXEAAleG5.jpg-large.jpg 400w,
/blogs/static/faad0289183eae0293db5dd94a588c91/a66cd/ConfSkDXEAAleG5.jpg-large.jpg 750w&quot;
          sizes=&quot;(max-width: 750px) 100vw, 750px&quot;
          type=&quot;image/jpeg&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/faad0289183eae0293db5dd94a588c91/a66cd/ConfSkDXEAAleG5.jpg-large.jpg&quot;
          alt=&quot;ConfSkDXEAAleG5 jpg large&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接着在 2017 年 1 月, Dan 又发了&lt;a href=&quot;https://twitter.com/dan_abramov/status/820668074223353858&quot;&gt;一条&lt;/a&gt; 来强调这个观点. 所以, 可以确定的是, &lt;strong&gt;任何地方都是用 PureComponent 被认为是有害的.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;降低可读性&quot;&gt;&lt;a href=&quot;#%E9%99%8D%E4%BD%8E%E5%8F%AF%E8%AF%BB%E6%80%A7&quot; aria-label=&quot;降低可读性 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;降低可读性&lt;/h2&gt;
&lt;p&gt;接下来, 还有一个问题. 比如平时有一个组件 &lt;code class=&quot;language-text&quot;&gt;Button&lt;/code&gt;, 我们想给它加一个 &lt;code class=&quot;language-text&quot;&gt;style&lt;/code&gt; prop, 如果仅仅只是加一个 &lt;code class=&quot;language-text&quot;&gt;margin&lt;/code&gt; 的话, 我们可能会这样写&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginTop&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;This is a Component&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这没有问题, 对于一个小小的需求, 这里用这种写法其实在性能上问题不大, 虽然 style 在每次 render 的时候都是一个新的对象, 但是其实没我们想象的那么糟糕. 因为在普通的 Component, 如果没有特殊处理 &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt; 的话, 这个组件肯定是会重新被 render, 生成一个 VDOM 的, 在 VDOM 转化为 DOM 的过程中, 因为 style 的内容没有变化, 所以最后不会更新 DOM, 这个操作的损耗并不大.
但是如果 Button 是 PureComponent 的话, 那么这样写的话每次都会带来一次无用的 &lt;code class=&quot;language-text&quot;&gt;shadowEquals&lt;/code&gt;. 所以要写成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginTop&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;This is a PureComponent&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的话, 确实会有一些好处. 因为 style 作为 props 没有变化, &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt; 会返回 false, 连 render 都不会发生, 在性能上&lt;strong&gt;可能&lt;/strong&gt;会有点提升. 可是每一次这种小小的变化, 都需要想一个名字, 作为一个常量真的不痛苦吗?&lt;/p&gt;
&lt;p&gt;这个例子可能还不够突出, 思考一下现在正火的 &lt;code class=&quot;language-text&quot;&gt;render props&lt;/code&gt;, 本来一个普通的 Component, 可以写成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Link
	render&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AnotherComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是如果 Link 是 PureComponent 的话, 要改成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AnotherComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token spread&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是这样真的更好吗? 我们为什么要把一个 render 放在离 Link 那么远的地方? 这对于理解代码显然是不够的, 这让一个本来应该直观的 render 变得不那么直观.
在 React 文档的 &lt;a href=&quot;https://reactjs.org/docs/render-props.html#caveats&quot;&gt;render props&lt;/a&gt; 一章有对应的介绍.&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#%E7%BB%93%E8%AE%BA&quot; aria-label=&quot;结论 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;结论&lt;/h2&gt;
&lt;p&gt;所以该在什么时候使用 PureComponent 呢? 一个通用的建议是: 在一个 List 有关或者 Form 相关的组件外部包一个 PureComponent, 这样可以起到不错的效果. 如果使用了 &lt;code class=&quot;language-text&quot;&gt;recompose&lt;/code&gt; 的话, 可以很容易完成这个任务 &lt;code class=&quot;language-text&quot;&gt;pure(&amp;lt;MyListComponent /&amp;gt;)&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[使用 lodash/fp]]></title><description><![CDATA[这篇文章主要是介绍 lodash 的  fp  模块, 通过它的特点来让 React 的   少写很多代码. 同样的原理也能放在 redux 的   上, 但是因为 lodash/fp 的缺陷, 这篇文章不会深入. 删除数组的某个值 开门先来一个例子.
假设我们的 state…]]></description><link>https://github.com/thoamsy/blogs.git/lodash-fp/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/lodash-fp/</guid><pubDate>Mon, 02 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;这篇文章主要是介绍 lodash 的 &lt;a href=&quot;https://github.com/lodash/lodash/wiki/FP-Guide&quot;&gt;fp&lt;/a&gt; 模块, 通过它的特点来让 React 的 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt; 少写很多代码. 同样的原理也能放在 redux 的 &lt;code class=&quot;language-text&quot;&gt;reducer&lt;/code&gt; 上, 但是因为 lodash/fp 的缺陷, 这篇文章不会深入.&lt;/p&gt;
&lt;h2 id=&quot;删除数组的某个值&quot;&gt;&lt;a href=&quot;#%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%90%E4%B8%AA%E5%80%BC&quot; aria-label=&quot;删除数组的某个值 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;删除数组的某个值&lt;/h2&gt;
&lt;p&gt;开门先来一个例子.
假设我们的 state 的结构是这样&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  posts&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1234567&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;abc&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;4343434&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;def&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们想删除特定的 id 的 post 话, 最原生的写法会是&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; posts &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	posts&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; postId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用普通的 lodash 会是&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; posts &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  posts&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; postId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样看起来, 普通的 lodash 并没有做多少事情, 只不过在 &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt; 的时候, 通过内置的 &lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt; 少写了一些代码.
那么, 我们再看下 lodash/fp 的写法&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;posts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; postId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rejectWithPostId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;posts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;propEq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;rejectWithPostId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;postId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从表面上看, 我们已经少写了很多重复的代码. 比如之前两个代码中都会出现三次的 &lt;code class=&quot;language-text&quot;&gt;posts&lt;/code&gt;, 在这里只出现了一次, 而且也没有嵌套和大括号的出现, 这明显能增加代码的可读性.&lt;/p&gt;
&lt;p&gt;而下面那个使用 compose 的方式, 虽然看上去总代码多了, 但是进一步提高了代码的复用性.&lt;/p&gt;
&lt;h2 id=&quot;具体的解释在下文说明&quot;&gt;&lt;a href=&quot;#%E5%85%B7%E4%BD%93%E7%9A%84%E8%A7%A3%E9%87%8A%E5%9C%A8%E4%B8%8B%E6%96%87%E8%AF%B4%E6%98%8E&quot; aria-label=&quot;具体的解释在下文说明 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;具体的解释在下文说明&lt;/h2&gt;
&lt;h2 id=&quot;lodashfp-的变化&quot;&gt;&lt;a href=&quot;#lodashfp-%E7%9A%84%E5%8F%98%E5%8C%96&quot; aria-label=&quot;lodashfp 的变化 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;lodash/fp 的变化&lt;/h2&gt;
&lt;p&gt;那么这个模块和普通的 lodash 区别在哪呢？分为以下几点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;都是纯函数&lt;/li&gt;
&lt;li&gt;参数的顺序调整&lt;/li&gt;
&lt;li&gt;iteratee 参数受限&lt;/li&gt;
&lt;li&gt;完全柯里化&lt;/li&gt;
&lt;li&gt;没有可选参数下面一一解释这几点&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;pure&quot;&gt;&lt;a href=&quot;#pure&quot; aria-label=&quot;pure permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pure&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;都是纯函数&lt;/em&gt;这句话, 如果你稍微了解过函数式编程, 就知道它的意义何在.
我们看这个例子.
如果我们使用 lodash 的 &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;, 执行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prevState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;posts[0]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的操作会修改 prevState 的, 肯定会导致的 bug 的出现. 当然这种用 set 的方式确实有点怪, 有点像强行捏造的出来的代码 🌝
但是如果用 lodash/fp 下的 &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;prevState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&apos;posts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prevState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里没有用到柯里化的写法, 仅仅是为了变现 set 的 Pure 和参数顺序的调整.
另外, 你可以用 Jest 运行下面代码, 可以确定它是纯的, 这样也就保证了 setState 的正确性&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;The set function should be pure&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;posts[0]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;rearranged-arguments&quot;&gt;&lt;a href=&quot;#rearranged-arguments&quot; aria-label=&quot;rearranged arguments permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rearranged Arguments&lt;/h3&gt;
&lt;p&gt;最显著的一点就是, 由 /data-first/ 变成了 /data-last/.
除了上面的 set, 还有 &lt;code class=&quot;language-text&quot;&gt;map, reduce, filter&lt;/code&gt; 都是这样.
&lt;code class=&quot;language-text&quot;&gt;map([1,2,3], a =&amp;gt; a * 2)&lt;/code&gt; 调整成了 &lt;code class=&quot;language-text&quot;&gt;map(a =&amp;gt; a * 2, [1,2,3])&lt;/code&gt;
这个调整目前看上去没有什么用, 等描述完柯里化后我们会继续对比&lt;/p&gt;
&lt;h3 id=&quot;capped-iteratee-arguments&quot;&gt;&lt;a href=&quot;#capped-iteratee-arguments&quot; aria-label=&quot;capped iteratee arguments permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Capped Iteratee Arguments&lt;/h3&gt;
&lt;p&gt;将迭代器函数做限制, 主要是为了规避一些常见 bug&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// The `lodash/map` iteratee receives three arguments:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// (value, index|key, collection)&lt;/span&gt;
_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;6&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;10&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parseInt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// ➜ [6, NaN, 2]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// The `lodash/fp/map` iteratee is capped at one argument:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// (value)&lt;/span&gt;
fp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parseInt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;6&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;10&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// ➜ [6, 8, 10]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这似乎出现了问题, 我们在 React 中需要&lt;em&gt;更新&lt;/em&gt;某个数组内特定 index 的用法就用不了.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; posts &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	posts&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;post&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;good&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; posts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然函数本来提升了一个方法 &lt;code class=&quot;language-text&quot;&gt;convert&lt;/code&gt;, 可以用来去除这个限制.
&lt;code class=&quot;language-text&quot;&gt;const mapWithIndex = map.convert({ cap: false })&lt;/code&gt;
之后再将 &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; 替换成 &lt;code class=&quot;language-text&quot;&gt;mapWithIndex&lt;/code&gt; 就行了.&lt;/p&gt;
&lt;p&gt;可是真的有必要这样做吗? 我们想一下, 难道 cap 仅仅只是为了减少这种 bug 吗? 在我看来还有一个原因, 我们应该使用更加 &lt;em&gt;functional&lt;/em&gt; 的方式来完成这个任务&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`posts[&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;]`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wow&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样看上去就十分清晰了. 不过, 有一点需要注意. 如果我们将 &lt;code class=&quot;language-text&quot;&gt;set(&amp;#39;content&amp;#39;, &amp;#39;wow&amp;#39;)&lt;/code&gt; 替换成 &lt;code class=&quot;language-text&quot;&gt;assign({ content: &amp;#39;wow&amp;#39; })&lt;/code&gt; 或者 &lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt; 行不行呢?
恩这里是不行的, 同样的, 原因在后面再解释.
不过, lodash/fp 其实还提供了很多同名函数, &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; 的同名函数有 &lt;code class=&quot;language-text&quot;&gt;assoc&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;assocPath&lt;/code&gt;. 用法都一样, 不过在其他库中, 后面两个函数更为普遍.
&lt;code class=&quot;language-text&quot;&gt;assoc&lt;/code&gt; 的用法其实就是不嵌套的 &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;, 就像上面例子那样.
&lt;code class=&quot;language-text&quot;&gt;assocPath&lt;/code&gt; 则是需要深入某个路径里, 像 &lt;code class=&quot;language-text&quot;&gt;set(&amp;#39;a.b.c.d[0]&amp;#39;)&lt;/code&gt; 这种情况就应该用 &lt;code class=&quot;language-text&quot;&gt;assocPath&lt;/code&gt;.
Lodash 偷了懒, 没有在实现上区别它们. 不过它提供了一个 &lt;code class=&quot;language-text&quot;&gt;eslint-plugin-lodash-fp&lt;/code&gt; 来提供 lint 的支持, 帮助使用者加以限制.&lt;/p&gt;
&lt;h3 id=&quot;currying&quot;&gt;&lt;a href=&quot;#currying&quot; aria-label=&quot;currying permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Currying&lt;/h3&gt;
&lt;p&gt;终于到了重点咯. 先来解释下柯里化吧.
英文 /Currying/, 之所以这么叫是因为有一个数学家叫, &lt;a href=&quot;https://en.wikipedia.org/wiki/Haskell_Curry&quot;&gt;Haskell Curry&lt;/a&gt; , 他提出了一种化简高阶函数的方法, 所有后人就给这种方法命名为 Currying 咯. 我初学的时候, 一直没搞懂这是什么意思, 因为它的直译就是&lt;em&gt;咖喱&lt;/em&gt;(那个时候, 库里还没那么火)&lt;/p&gt;
&lt;p&gt;假设我们有一个函数, &lt;code class=&quot;language-text&quot;&gt;add&lt;/code&gt;. 通常的写法应该是 &lt;code class=&quot;language-text&quot;&gt;add(a, 10)&lt;/code&gt;, 说明我们给变量 a 加 10.
下一次我们要给变量 b 加 10, 就 &lt;code class=&quot;language-text&quot;&gt;add(b, 10)&lt;/code&gt;, 如果还有变量 C……
如果一个被柯里化过得 add, 就可以这样写 &lt;code class=&quot;language-text&quot;&gt;add(a, 10) add(a)(10), add(__, 10)(a), add(__)(a)(10)&lt;/code&gt;
你可能会问这样有什么用 0.0, 而且那个 &lt;code class=&quot;language-text&quot;&gt;__&lt;/code&gt; 是什么意思?
最简单的方式就是, 我们可以写出一个新的函数&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addTen &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样的话, 要计算 a, b, c 只需要调用 &lt;code class=&quot;language-text&quot;&gt;addTen(a)&lt;/code&gt; 这样就行咯.
那么 &lt;code class=&quot;language-text&quot;&gt;__&lt;/code&gt; 呢? 官方的解释是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The placeholder argument, which defaults to &lt;code class=&quot;language-text&quot;&gt;__&lt;/code&gt;, may be used to fill in method arguments in a different order. Placeholders are filled by the first available arguments of the curried returned function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么意思, 我们举过一个例子. 上面的加法改成减法, 但是目的还是一样, 将一个数减 10.
想一想, 我们还能用 &lt;code class=&quot;language-text&quot;&gt;sub(10)&lt;/code&gt; 吗? 显然不行, 因为减法不是加法, 是不能交换的. 如果这样的话就会变成 10 - a 而不是 a - 10 咯.
这个时候就可以用到 &lt;code class=&quot;language-text&quot;&gt;__&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;const subTen = sub(__, 10)&lt;/code&gt;, 这样的话就能满足要求咯.
同时, 使用占位符, 上面的代码&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`posts[&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;]`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wow&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实可以改成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`posts[&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;]`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wow&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以之前的 &lt;code class=&quot;language-text&quot;&gt;assign&lt;/code&gt; 不行的原因是因为, lodash/fp 并没有调整它的顺序. 本来是后面的参数覆盖前面的参数, 这种很符合人类思考方式的习惯, 但是如果硬要交换的话, 反而就会看上去很奇怪.&lt;/p&gt;
&lt;p&gt;现在我们大概了解了柯里化的作用, 但是看上去效果还不是那么明显. 但是如果结合参数顺序的对调呢?
再看一个例子. 这个代码可能有点抽象, 有点长 :）&lt;a href=&quot;http://fr.umio.us/favoring-curry/&quot;&gt;例子来自一个 ramda 的教程&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getIncompleteTaskSummaries&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;membername&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;tasks&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;username&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;complete&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
				task&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;priority&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;abbreviatedTasks&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sortBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;abbreviatedTask&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们先不管它的应用场景, 光看代码的话, 可以意识到, 这里写了太多重复的 tasks 了, 而这也是我们日常编程中的常见写法. tasks 作为中间变量, 需要不断地的传递.
我们剥离这里的 Promise, 改成这个样子&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sortBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;tasks&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;username&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;complete&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;task&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;priority&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我稍微做了一点格式的调整, 但是这些整个思路就很明显了, 这不就是函数嵌套吗? 只不过可读性不是那么好 :-(, 我们根本不可能一眼看出来它是对哪个变量进行操作, 最先运行的函数又是哪个&lt;/p&gt;
&lt;p&gt;大学数学的离散数学里应该提高一个概念, &lt;em&gt;函数组合&lt;/em&gt;. &lt;em&gt;f(g(x)) = f • g&lt;/em&gt; 所以上面的写法如果可以改为 &lt;em&gt;sortBy • map • reject • filter • get&lt;/em&gt; 这种形式的话, 看上去应该会简单很多啦, 那么我们可以做到吗? 尝试下 &lt;code class=&quot;language-text&quot;&gt;compose&lt;/code&gt; 函数.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;sortBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;priority&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;complete&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;username&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;tasks&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 不要运行这段函数&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实这样看上去已经好多了不是吗? 至少我们一眼就能看出来, 我们的逻辑顺序了.
至于为什么这么多 &lt;code class=&quot;language-text&quot;&gt;__&lt;/code&gt;, 那是因为它们都是 data 被处理后的结果, 也就是上面提到的中间变量. 所以我们仅仅只需要调整函数参数的顺序, 就可以省去这些占位符.
变成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;sortBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dueDate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;priority&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;complete&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;username&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;tasks&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是参数需要调整顺序的原因啦.&lt;/p&gt;
&lt;p&gt;再解释一下柯里化在这里的重要性. 如果函数没有柯里化的话, 从第一步 &lt;code class=&quot;language-text&quot;&gt;get(&amp;#39;tasks&amp;#39;)&lt;/code&gt; 开始, 这个函数只会被解释成 &lt;code class=&quot;language-text&quot;&gt;get(&amp;#39;tasks&amp;#39;, undefined)&lt;/code&gt;, 那么很显然, 后面的过程就没有进行下去的意义咯. 而通过柯里化, 这里返回的是一个函数, 一个需要收集它另外一个参数的函数.&lt;/p&gt;
&lt;p&gt;同样的 &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt; 也需要一个数组来填充进来, &lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt; 和后面的函数都一样. 因为它们现在都是函数, 所以 compose 不会抱怨, 它将这些函数&lt;em&gt;组合在了一起&lt;/em&gt;, 变成了一个新的函数.
当我们将 data 传入这个新函数的时候, 先运行 &lt;code class=&quot;language-text&quot;&gt;get(&amp;#39;tasks&amp;#39;)(data)&lt;/code&gt;, 得到一个新的数组, 这个数组传给 &lt;code class=&quot;language-text&quot;&gt;filter(&amp;#39;usename&amp;#39;)&lt;/code&gt; 又得到一个新的数组. 就这样反复的执行最后得到我们的结果&lt;/p&gt;
&lt;p&gt;顺便一提, 这种 &lt;code class=&quot;language-text&quot;&gt;a(b(c(d(e, f)))))&lt;/code&gt; 的形式其实很像 &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; 的操作, 所以再看看 compose 的实现吧&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;fns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; fns&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;no-optional-arguments&quot;&gt;&lt;a href=&quot;#no-optional-arguments&quot; aria-label=&quot;no optional arguments permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;No Optional Arguments&lt;/h3&gt;
&lt;p&gt;最后再解释一下为什么需要固定参数? Lodash 的那些可选参数的函数全部都挂了, 为什么呢?
其实这是因为 &lt;code class=&quot;language-text&quot;&gt;curry&lt;/code&gt; 不支持可选参数的. JS 原生不支持柯里化, 那么我们无非就是使用一个函数来模拟这个过程.
一个简单的 curry 方法可以写成&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意看实现就可以发现, 我们必须了解到函数的长度, 才能决定是返回函数的运行结果还是一个新的函数.
看完这些再回过头看之前的例子的话, 应该就很容易理解了.&lt;/p&gt;
&lt;h2 id=&quot;更多例子&quot;&gt;&lt;a href=&quot;#%E6%9B%B4%E5%A4%9A%E4%BE%8B%E5%AD%90&quot; aria-label=&quot;更多例子 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;更多例子&lt;/h2&gt;
&lt;p&gt;上面已经举了使用 lodash/fp 配合 setState 更新和删除的例子, 再看看在末尾添加的例子吧.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 末尾添加&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addPost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;posts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 更新数组特定下标的值, 这个类似于井字棋的游戏中很有用.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`posts[&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;]`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;不足&quot;&gt;&lt;a href=&quot;#%E4%B8%8D%E8%B6%B3&quot; aria-label=&quot;不足 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;不足&lt;/h2&gt;
&lt;p&gt;lodash/fp 其实还有很多不足, 它不过是将 lodash 里的函数改成了 fp 的形式, 所以它相比 lodash 没有任何新函数.
比如, 它不能同时修改一个对象的多个值. 同样的也不能使用多个函数来修改一个对象的多个值.
简单的说就是, &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; 都仅仅只支持修改一个参数.
同时, 针对数组的方法也不是很多, 比如没有类似于 &lt;code class=&quot;language-text&quot;&gt;insert&lt;/code&gt; 的方法. 这可能是因为原生 js 有了 &lt;code class=&quot;language-text&quot;&gt;splice&lt;/code&gt;, lodash 也没有加强的必要.&lt;/p&gt;
&lt;h2 id=&quot;ramda&quot;&gt;&lt;a href=&quot;#ramda&quot; aria-label=&quot;ramda permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ramda&lt;/h2&gt;
&lt;p&gt;最后, 如果真的尝试使用这种风格的话, lodash/fp 仅仅是入门, 建议还是使用 &lt;a href=&quot;http://ramdajs.com&quot;&gt;Ramda&lt;/a&gt; 来获得更加纯粹的体验和享受.
关于 Ramda 的使用可以参考这些&lt;a href=&quot;http://fr.umio.us&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Object.assign 的一些问题]]></title><description><![CDATA[在  immutable struct  或者说  functional programming  的影响下,   和  Object Spread  是我们离不开的操作. 不过它的功能真的是  shadow copy…]]></description><link>https://github.com/thoamsy/blogs.git/object-assign/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/object-assign/</guid><pubDate>Wed, 31 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在 &lt;em&gt;immutable struct&lt;/em&gt; 或者说 &lt;em&gt;functional programming&lt;/em&gt; 的影响下, &lt;code class=&quot;language-text&quot;&gt;Object.assign&lt;/code&gt; 和 &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Object Spread&lt;/a&gt; 是我们离不开的操作. 不过它的功能真的是 &lt;em&gt;shadow copy&lt;/em&gt; 吗? 这里我列出一个例子来记录这个问题, 以防以后碰到坑.&lt;/p&gt;
&lt;p&gt;下面是一个对象, 包括了几种典型的属性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;普通属性&lt;/li&gt;
&lt;li&gt;get 属性&lt;/li&gt;
&lt;li&gt;set 属性&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__GETTER__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__SETTER__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;cool&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;good&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先提出问题, 哪种类型的属性会被成功 copy? &lt;code class=&quot;language-text&quot;&gt;get 和 set&lt;/code&gt; 时候会被运行呢?&lt;/p&gt;
&lt;p&gt;首先可以确定的是, 连续两次打印 &lt;code class=&quot;language-text&quot;&gt;obj.hh&lt;/code&gt; 的话, 一定会得到 &lt;code class=&quot;language-text&quot;&gt;2, 3&lt;/code&gt;. 因为每次 &lt;code class=&quot;language-text&quot;&gt;hh&lt;/code&gt; 都会被运行对吧.&lt;/p&gt;
&lt;p&gt;OK, 现在开始对它 &lt;code class=&quot;language-text&quot;&gt;assign&lt;/code&gt;, 有下面代码&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shadow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;obj &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hh&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hh&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候得到的值是多少呢(假设这串代码紧接上面的代码)
最后的结果是 &lt;code class=&quot;language-text&quot;&gt;4, 4&lt;/code&gt;
这说明 GET 只被运行了一次后, 就再也没有运行了.
那我们打印一下 shadow 的内部看看,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;shadow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/27b78/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 27.54491017964072%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;110\&apos;%3e%3cpath d=\&apos;M0 5v5h5l5 1-5 1c-4 0-5 0-5 2s0 2 1 1c2-1 3 4 2 5H2l-1-1-1 4c0 3 0 4 1 3 1-2 2-1 2 2l-1 2c-2 0-2 1-2 4s0 4 1 3c1-3 1-2 2 2 0 4 0 4-2 3-1-2-1 2-1 33v35h401V0H0v5\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/f2fbe/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.webp 200w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/e227a/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.webp 400w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/0cbce/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.webp 800w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/6bc95/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.webp 1200w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/52e4b/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.webp 1336w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/9ec3c/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.png 200w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/c7805/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.png 400w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/8ff1e/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.png 800w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/6ff5e/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.png 1200w,
/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/27b78/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.png 1336w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/b0dd709a206bcde06de0b0ffc0157ef2/8ff1e/06FE5C2C-8A1B-45EE-B45D-D3DB0774F9FA.png&quot;
          alt=&quot;06FE5C2C 8A1B 45EE B45D D3DB0774F9FA&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意到, 这个时候 hh 只是一个普通的属性, 而不再属于 get set. 作为对比, 我们看下 obj 会输出什么.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/73ccd330d70754382a3ed1d85ee766e1/884f2/336C40D7-A962-48C0-B485-B81EDD28B4EA.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 26.794871794871796%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;107\&apos;%3e%3cpath d=\&apos;M0 53v54h401V0H0v53m0 1v54l1-50A570 570 0 0 1 2 1H0v53\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/73ccd330d70754382a3ed1d85ee766e1/f2fbe/336C40D7-A962-48C0-B485-B81EDD28B4EA.webp 200w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/e227a/336C40D7-A962-48C0-B485-B81EDD28B4EA.webp 400w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/0cbce/336C40D7-A962-48C0-B485-B81EDD28B4EA.webp 800w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/6bc95/336C40D7-A962-48C0-B485-B81EDD28B4EA.webp 1200w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/063e3/336C40D7-A962-48C0-B485-B81EDD28B4EA.webp 1560w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/73ccd330d70754382a3ed1d85ee766e1/9ec3c/336C40D7-A962-48C0-B485-B81EDD28B4EA.png 200w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/c7805/336C40D7-A962-48C0-B485-B81EDD28B4EA.png 400w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/8ff1e/336C40D7-A962-48C0-B485-B81EDD28B4EA.png 800w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/6ff5e/336C40D7-A962-48C0-B485-B81EDD28B4EA.png 1200w,
/blogs/static/73ccd330d70754382a3ed1d85ee766e1/884f2/336C40D7-A962-48C0-B485-B81EDD28B4EA.png 1560w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/73ccd330d70754382a3ed1d85ee766e1/8ff1e/336C40D7-A962-48C0-B485-B81EDD28B4EA.png&quot;
          alt=&quot;336C40D7 A962 48C0 B485 B81EDD28B4EA&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以结论就是, 普通属性和 Symbol 会被 Copy. 至于 Symbol 时候还是原来那个, 自己测试一下可以发现肯定是的.&lt;/p&gt;
&lt;p&gt;那么, 另外一个问题. 这些 GET 和 SET 是在什么情况下被执行的呢? 我们可以看到, 上面只打印出了 &lt;strong&gt;&lt;em&gt;GETTER&lt;/em&gt;&lt;/strong&gt; 而没有 &lt;strong&gt;&lt;em&gt;SETTER&lt;/em&gt;&lt;/strong&gt;, 先引用 MDN 的文档&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Object.assign() method only copies enumerable and own properties from a source object to a target object. It uses [[Get]] on the source and [[Set]] on the target, so it will invoke getters and setters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说, 第二个参数的 GET 会被调用, 第一个参数的 SET 会被调用. 而因为 &lt;code class=&quot;language-text&quot;&gt;{ …obj }&lt;/code&gt; 就相当于 &lt;code class=&quot;language-text&quot;&gt;Object.assign({}, obj)&lt;/code&gt;, 所以只有 GET 会被调用。&lt;/p&gt;
&lt;p&gt;如何证明 SET 会被调用呢? 这个简单, 使用 &lt;code class=&quot;language-text&quot;&gt;Object.assign(obj, obj)&lt;/code&gt; 就行.
如果现在的代码是这样的&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; symbol &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;cool&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__GETTER__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__SETTER__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;symbol&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;good&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hh&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hh&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; aha &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ownKeys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aha&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会出现下面的结果.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/306e2f20608f2abb12380067efc28b5f/26dcc/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 538px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 115.98513011152416%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;464\&apos;%3e%3cpath d=\&apos;M0 15v15h13l13 1-13 1H0v25h14l13 1-14 1H0v405h401V0H206A8900 8900 0 0 0 3 1L0 0v15m95 5l1 8 1-3c0-6 5-5 7 1l2 2c1 0 1-1-1-4l-1-4c3-4 0-8-5-8h-4v8m0 27l1 8 1-3c0-3 0-4 2-4 1 0 3 1 4 4l3 3c1 0 1-1-1-4s-2-4-1-6c2-3-1-7-7-7-2 0-2 1-2 9m41 79v9h4c4 0 5-1 5-3 2-5 0-9-4-9-3 0-3 0-3-2l-1-3-1 8m26 27v9h4c5 0 6-1 6-6s-2-7-5-6c-2 0-3 0-2-2l-1-3c-2 0-2 1-2 8m27 27v9h4c5-1 6-2 6-7 0-4-2-6-6-6-2 1-2 1-2-1l-1-3-1 8m-105-3c-2 1-3 9-1 11 3 3 9 0 9-6 0-5-4-7-8-5m53 1c-4 4-1 12 4 11h2c0 2-3 3-5 3h-2 8l1-9v-7h-3c-3 0-4 1-5 2m-68 54c-3 5 0 11 4 10 3-1 3 0 3 1l-4 2c-3 0-3 2 0 2 5 0 6-2 6-10v-7h-4c-3 0-4 0-5 2m161-1l-1 5c0 4 1 6 5 6s5-2 5-6-1-6-5-6l-4 1m53 1c-3 5 0 11 4 10 3-1 3 0 3 1l-4 2c-3 0-3 2 0 2 5 0 6-2 6-10v-7h-4c-3 0-4 0-5 2m-52 26c-2 1-3 8-1 10s7 1 8-1c2-4 0-11-4-11l-3 2m-69 29l1 8 3 1c4 0 6-1 6-7 0-4-2-7-6-6-1 1-2 1-1-1l-1-3c-2 0-2 1-2 8m28 19l-1 9c0 7 1 7 3 8 4 0 7-2 7-6 0-5-2-7-5-7-3 1-3 1-3-2s-1-3-1-2m-107 5c-2 3-1 10 1 11 6 3 11-6 6-10-1-2-5-2-7-1m54 1c-4 3 0 12 4 10 2-1 2-1 2 1l-4 2c-4 0-4 2 0 2 5 0 6-2 6-10v-7h-3l-5 2m-55 28v9h4c4 0 6-1 6-5 0-5-2-7-5-7-3 1-3 0-3-2l-1-3-1 8m14-1c-3 6 3 14 8 9v-10c-2-2-7-1-8 1m54 0c-2 2-2 7 1 9 4 4 10-2 7-8-1-3-6-4-8-1m13 0c-3 5-1 10 4 10 4 0 5-2 5-6l-1-5c-2-2-7-1-8 1m60 23c0 2 0 2-2 2-4-2-8 7-4 10l5 2h3v-9l-1-8-1 3m-46 3c-4 4-1 12 4 11 2-1 2 0 2 1l-4 2c-3 0-3 1 0 2 4 0 6-2 6-10l-1-7h-3c-1-1-3 0-4 1m14 0c-1 1-2 2-2 5 0 4 1 6 5 6 5 0 7-7 3-11-2-2-3-2-6 0m13 0c-4 4-2 11 3 11 4 0 5-2 5-6 0-6-4-9-8-5m-68 29v9h3c4 0 7-3 7-7 0-3-4-6-6-5-2 0-2 0-2-2l-1-3-1 8m26 19v9c0 7 1 7 3 8 5 0 7-1 7-6s-2-8-5-7c-2 1-3 1-2-1 0-3-2-5-3-3m27 34v9h3c4 1 7-1 7-6 0-4-2-6-5-6-3 1-3 0-3-2l-1-3-1 8m-106-2c-2 2-1 9 1 10 5 4 9-2 7-8-1-3-6-4-8-2m53 1c-3 5 0 11 4 10 3-1 3 0 3 1l-4 2c-3 0-3 2 0 2 5 0 6-2 6-10v-7h-4c-3 0-4 0-5 2\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/306e2f20608f2abb12380067efc28b5f/f2fbe/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.webp 200w,
/blogs/static/306e2f20608f2abb12380067efc28b5f/e227a/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.webp 400w,
/blogs/static/306e2f20608f2abb12380067efc28b5f/95923/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.webp 538w&quot;
          sizes=&quot;(max-width: 538px) 100vw, 538px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/306e2f20608f2abb12380067efc28b5f/9ec3c/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.png 200w,
/blogs/static/306e2f20608f2abb12380067efc28b5f/c7805/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.png 400w,
/blogs/static/306e2f20608f2abb12380067efc28b5f/26dcc/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.png 538w&quot;
          sizes=&quot;(max-width: 538px) 100vw, 538px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/306e2f20608f2abb12380067efc28b5f/26dcc/7F67AD27-E0D9-42B7-AB4C-D67D9A4C7241.png&quot;
          alt=&quot;7F67AD27 E0D9 42B7 AB4C D67D9A4C7241&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里, GET 和 SET 都被调用了一次, 分别是 source 和 target 调用的. 而这个时候 a 变成 12 也不难解释.
因为 &lt;code class=&quot;language-text&quot;&gt;obj.a&lt;/code&gt; 原来是 3. 当 assign 被调用的时候, 内部会有一个 &lt;code class=&quot;language-text&quot;&gt;obj.a = obj.a&lt;/code&gt; 的过程. 先 GET, 就让 &lt;code class=&quot;language-text&quot;&gt;obj.a&lt;/code&gt; 变成了 4, 然后是 SET, 也就是 &lt;code class=&quot;language-text&quot;&gt;obj.a += obj.a * 4&lt;/code&gt; 就成了 12.&lt;/p&gt;
&lt;p&gt;不过, 值得注意的是, 这里 hh 还是 GET 和 SET, 并没有像上面的 assign 所做的一样，被替换成普通的属性.
不知道这是不是有意为之.&lt;/p&gt;
&lt;p&gt;那么我们该如何复制含有 get 和 set 的对象呢? 如果用到 ES8 的特性的话, 会很简单&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; realShadow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/af279db6c89a2d5d7aa85a971678507a/6087b/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 26.848249027237355%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;107\&apos;%3e%3cpath d=\&apos;M0 54v53h401V0H0v54m0 0v54l1-50a583 583 0 0 1-1-4\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/af279db6c89a2d5d7aa85a971678507a/f2fbe/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.webp 200w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/e227a/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.webp 400w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/0cbce/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.webp 800w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/6bc95/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.webp 1200w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/ab58e/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.webp 1542w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/af279db6c89a2d5d7aa85a971678507a/9ec3c/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.png 200w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/c7805/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.png 400w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/8ff1e/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.png 800w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/6ff5e/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.png 1200w,
/blogs/static/af279db6c89a2d5d7aa85a971678507a/6087b/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.png 1542w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/af279db6c89a2d5d7aa85a971678507a/8ff1e/1A25BA7A-053A-42D7-91AB-2184F28CFAA5.png&quot;
          alt=&quot;1A25BA7A 053A 42D7 91AB 2184F28CFAA5&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里 a 的值还是 3, 说明这个 get 根本没有被执行, 完成没有副作用. 这才是真正的浅拷贝嘛!&lt;/p&gt;
&lt;p&gt;OK, 那么这里可以得出一个结论: 对于普通的纯对象, 比如 redux 里保存的那些, 使用 &lt;code class=&quot;language-text&quot;&gt;assign&lt;/code&gt; 没有任何问题. 但如果是自己定义的复杂对象, 带了很多 get 的话, 最好的方式还是采用下面这种最安全的方式吧.&lt;/p&gt;
&lt;p&gt;值得一提的是, 这也是 MDN 推荐的方式:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whereas the Object.assign() method will only copy enumerable and own properties from a source object to a target object, you are able to use this method and Object.create() for a shallow copy between two unknown objects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Deep Learning Quick Guide（翻译）]]></title><description><![CDATA[原文 AI(Artificial Intelligence)  和 ML(Machine Learning) 是当下最热的话题. 我们每天都能看到 AI 的字眼, 那些有抱负的程序员都说自己想学点 AI. 你也听到高层说他们想在服务中集成 AI…]]></description><link>https://github.com/thoamsy/blogs.git/deep-learning/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/deep-learning/</guid><pubDate>Sun, 28 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/8281600941e9adcae8c522d9bd13a3a6/4aca8/1*1mpE6fsq5LNxH31xeTWi5w.jpg&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 66.64999999999999%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;267\&apos;%3e%3cpath d=\&apos;M163 20l-3 5-1 4v1c2 0 2 1 2 3l1 1-1 2v3l1 2-1 4c0 2 0 2-1 1h-2v3l1-1 1 2 2 3 2-8 2-8 3-1c2 0 4 5 7 18l1 3-3-2c-4-2-10-1-12 2s-4 2-4 0 0-2 1-1l1 1v-3h-2l-1 2-1 2-1-1c0-2 0-2-2-1l-2 2 1 2h1c0-2 3-1 3 1-1 1-1 1 0 0 1-2 2-1 1 2 0 3-2 4-2 1l-1 1c-1 2-4 3-4 1l-2 1c-2 3-8 4-7 1 0-1-1-1-2 1l-2 1-1-1-1 1-1 2c-1 1-1 1 1 1h2l2 1c2 0 2-1 1-1-1-2 5-4 7-3l2-1c2-2 3-1 2 2 0 3 1 3 2-1l3-3h1l2-1 2 1-2 3-2 2 3-1 3-1-1 2-1 1 1 1v5c1 2 1 2 1 0v-1l1-1v-2l1-1c1-2 2-3 4-3s3 1 4 6l3 4c1-1 1-1 1 1h1l1-1 2 2-1-3c-1-2-1-2-2-1s-1 0-1-1l-1-4 1-2v-2c-2-1-1-2 2-1l3 4v4c-2-1-1 1 1 2 1 1 1 2-1 4l-3 1h-2c-2-2-1 0 0 4 2 3 2 4 0 4l-1-1-1-1h-10c-3 1-7-1-7-4h-1c-1 0-5-3-5-5h-2l3-4 3-4v-3c0-2 0-2-1-1l-1 3-2 4-2 3 1-3c0-3 0-3-2 0l-2 5-2 5v4l2-3 1-5c0-1 1-1 2 1 2 1 3 2 2 3l-2 1c-1-1-1-1-1 1s-3 4-4 2h-2l-1 1 1 1-1 1c-2-1-3 1-1 1v3c0 2 0 2 1 1s1-1 1 1v1h1c1 1 0 4-2 5s-3 0-1-2v-3c-1-1-1-1-2 2l-2 3-2-2c-2 0-2 0-1 2 2 2 2 2-1 2l-2 1c-1 1-4 0-4-2l-1-1v-1c0-2 0-2-1 0h-1c0-2 3-5 4-3h2l1 1-1 1c-1-1-1 0-1 1l1 3 1-2 1-2v-2l-4-5-2-1h-1c-2-1-2-2 0-4l3-3 1-1v-2l-1-1h-2c-1 1-4 0-4-2h-1c-1 2-1 2-2 0v-4h1v-2l-2-3 1-3-1-4c0-2-1-3-2-3l1 3v3l-2-5-1-5 1-2-1-2c-2-4-1-5 2-2 4 4 5 4 1 0s-3-5 2-5l4 1-4-1c-5-2-4-5 2-7l5-2-6 1c-4 1-4 1-7-1-5-6-15-2-15 5 0 3 0 3-5 4l-4 2 5-1c4-1 6 0 4 2-1 2 0 3 2 1h1l-1 2c-2 1-3 3-1 3h1l1 1 1-2-1-1c-1 1-1 0 0 0 0-1 1-2 4-1 4 0 4 0 6 7l3 7c2 5 0 7-3 5-4-3-7-2-10 1l-3 3-6-1c-6-2-6-2-7-1l1 1 7 1c4 1 5 2 5 3l2 7 1 1v3h1c-1-1 0-2 4-2s4 0 5 3l2 4v1c0 2 0 2 1 1h2l-2-3v-3l1-1-1-1h-2c-1-2 1-3 2-2 2 2 3 1 2-1-1-1-2-2-1-3l4 1h1l3 2 1 1 1-2c1 0 1 1-1 4l-2 1c0-2 0-2-1-1h-2c-3-1-3 0 0 2 2 1 2 6 0 4l-1 2 1 2 2 1v3h2l2 3c2 2 1 3-1 3-1 0-3-2-4-6l-4-4h-1c-1-1-1 0-1 1v3l-1 2h1c1-1 2-1 2 1 1 2 1 2 2 1 1-2 1-2 3 3 3 4 3 8 1 6l-1 3c0 3-1 5-3 4-2 0-2 0-1 2s4 3 4 1v-3l1-2 1 2v3l-2 3c-1 2-3 3-3 1l-2-3-2-2v11c-2 4-2 5 0 3l1-1h1c1-1 1-1 2 1 0 2 1 3 2 3l-1-3c-1-3-1-3 1-7l3-3 2 2v4h-3l-1 1c0 2 1 2 3 1 1-1 1-1 1 1h1c3-5 5-2 2 3 0 2-1 2-3-1s-3-2-1 2c2 2 2 3 1 3l-1-2-3 1c-3 4-9 4-5 0v-2l-1 1-2 1v-2l1-2-1 1h-2l-3 1-7 1h-1c-1 0-2 0-1 2 0 2 0 2-4 2l-6-3c-3-1-6-1-4 1l-1 1-1 2h1c2-2 2-2 3 1l2 3v-3c-1-3-1-3 2-2 5 1 7 2 7 4 0 3-6 4-8 1h-1v4c3 0 5 5 3 7s-1 3 1 1c3-3 5-5 3-5-1 1-2 0-3-1-1-2-1-3 1-3h5l3 3h13l1 3c-1 3 0 7 1 6l1 1-1 3-1 1h2c2-2 2-2 3-1v5h1c0-2 0-2 1-1v4l-1 3-1-3-1-2v2c-1 3-4 5-5 3-1-1 0-2 2-4l3-3-4 3c-3 2-3 2-3 0v-2h-1l1-1h1l1 1 1-2-1-1-1-2 1-2h1l-1-3h-1l-1 4v1l-2 2c-1 3-2 4-4 4-4 1-4 0-6-5l-4-5 1 3v3h-1l2 1v1l1 2 1 2h-2c-2-3-4-2-2 0 1 1 2 2 1 3v4c-1 3-6 5-7 3h-1c-1 3-1 3 4 2 2-1 4-1 6 1 3 3 7 4 12 2 3-1 3-1 1 7-4 12-4 12-8 12-3 0-4-1-3-2h-1v3l-1 1-1 2-5 1-4-1 4 1c3 1 4 2 4 5 1 7 11 10 15 5 2-2 3-3 6-2h4l-4-1c-4-1-4-5-1-6 2-1 2-1 0-1-3 0-3 0-3-2 1-2 0-2-1-2-2 1-1 0 2-4 2-3 3-5 1-3s-2 0 0-3c1-3 2-7 0-4h-1l1-3h1l1 2c2-1 3 0 2 1-2 2-1 3 1 2 2-2 2-5 0-5l-1-2c0-2 0-2-1-1l-2 1-1-2-2-1v-2l1 1h1c1-1 1-1 1 1v2l1-2v-5c1-4 2-5 2-1l-1 3 1-4c2-3 6-6 5-3l-1 4c3-4 5-6 8-7h3l2 1c1-1 3 0 4 1l2 2-2-3-3-3h7c2-2 3-2 3 1 0 2 0 2 1 1l2 1v2l-1-1c-1-1-1-1-1 1 0 3-1 3-3-1-2-3-2-3-2 0l1 4 1 2v1c3 2 5 10 3 10l-3-4c-1-2-1-3-2-2l1 3v3l3 2h1c0-2 3-1 4 2 2 6 2 6-4 6-3 1-4 1-1 3h1c0-3 3-2 5 3l3 3-1-4c-2-3-3-6-1-4l2 5a2297 2297 0 0 0 3 11l-1 1c-2-2-1 0 1 3s3 4 1 3c-1 0-2 0-1 2 0 2 0 2-4 2l-4-1 3 1c3 1 4 2 4 5 1 5 5 7 10 7 4 0 8-4 8-7l22-1h22l1 3c3 6 13 7 16 1v-10c-2-1-1-2 1-5 3-4 3-6 0-3l-1 1v-5l2-5 1-4c-1-1-1-1-1 1h-1l-4 7c-2 8-3 9-5 10-2 0-2-1-6-15l-2-6 2 1c5 3 14 2 14-3 0-2 2-1 3 2 0 2 0 2 1 0l2-1 2 1 6 1 5 1-2-2-3-1h-2l-3-1c0-1-1-2-2-1-2 0-2 0 0-4 2-5 3-7 1-5-2 1-2 1-2-1-1-1-1-1-1 1l-2 2c-3 1-3-1-1-4l1-2-2 2-2 1v-5h1c1 1 1 1 1-1v-1h2c2-2 1-3-1-2-1 1-1 1-1-1v-1l-2 1-2 3c-1 4-2 5-5 5s-3 0-4-6l-3-5v-1c0-3 0-3-1-2h-1c0-3 3-5 7-4 4 0 10-2 10-4l2-1c1 0 2 1 1 2 0 2 0 2 2 1 1-2 1-2 2-1h2l2 1-4 5-1 1v4c-1 1-1 1 0 0 3-3 4-2 3 1l-3 5v4h1l2-4 2-2-1 3c0 2 0 2 2-2l5-7 1-2-2 1h-1l-1 1-2 1c-1-1 1-9 2-9l1-1 2-4v4c-1 1-2 2-1 3s2 0 3-2l1-1v-8l1-1 1-2 1-2 1 2 2 1c0-1 1-1 2 1v1c-2-1-2-1-1 3l1 3c0 2 2 1 3 0v-2l-2-2c0-2 2-3 3 0l2 2 1 3h1l2-1-1 2-1 2h2c1-2 1-2 1 0l1 3 1-4-1-4-2-2-1-1c0 1 0 2-1 1-1 0-1-1 1-2 1-2 2-2 3-1s1 1 1-1v-2c2 1 2 2 1 5v2l1-1 1-2 1 1 1 3-1 1h-1l1 2 1-1h1l1 1-1 1h-1l1 2 1 2-1 1-1 1c1 2-1 2-3 1l-2-1-2-1h-2l-1-1-2-2-2 1h-6l3 1c2 1 3 2 2 3 0 2 0 2 1 1h3l-1-1 1-1 3 1 1 2 2 5-1 1h-2l-6 2-5 2h4l4-1 2-1c2-1 4 3 3 6l1 1c0-1 2 0 2 2l2 1c0-2 0-2 1-1v2l-1 1 1 4c-3-2-2 0 1 4l1 3-1-1-2-1v2l1 2-1 3v3l-6 3-5 2 6-1c5-2 5-2 8 0 5 6 13 4 15-3v-6c-1-1-1-2 1-4l1-2-2 2-2 1v-2c2-2 3-3 1-2l-1-1 1-3-2 3v1l-1 1-4 1c-3 0-3 0-5-9-4-11-4-11-2-10 7 2 10 1 13-2l3-6v-2c1 0 1-1-1-1v-3c1-2 0-3-2-1h-1c1-1 0-2-1-2-7 0-8 0-9-2l-1-3-1-1v-3h-2v-5c2-3 2-4 0-2-1 1-1 1-1-1l-1-3c-2-2-1-3 1-3l1 2c0 1 0 2 1 1l2 1a2993 2993 0 0 1 13-2l4-2-1-1c-2-1-2-4 1-5 1-1 1-1-1-1s-5-3-4-5h-9c-1 0-2 0-2-2h-1c-1 1-1 1-1-1l-2-1 1 3c2 4 1 4-2 1-2-2-2-3-1-5l2-2c1 1 1 0 1-2l-1-2v-3h1c0 1 0 2 1 1l1-3v-1h1c1-2 9-2 11 0 1 2 2 2 2 1l-1-2v-4l2-2 1-1c-2 0-3-4-1-4l1-1-1-1c-2 1-2-1 0-3 1-2 0-3-2-1h-3l-6-1c-2 1-4 0-5-1v1c0 2 0 2-1 1-2 0-3-3-1-3l1-1 2-8c3-6 3-7 6-7l4 1 1 1c1-1 1 0 0 0l3 8 3 4-2-5-1-4 1-1-2-1v-1l-1-2c-1-1 2-5 4-5s2 0 0-1-2-4 0-5v-1l-4-2c-3-4-7-5-10-3l-4 1v-5l3-7c2-7 3-7 5-7 3-1 4 0 7 6s4 6 1 1c0-2 0-2 1-1h2l-3-2v-1l-1-3v-2l1-2c0-2 1-2 7-1 3 1 3 1-1-1-4-1-5-2-6-4-1-8-10-11-15-5l-4 2c-2 0-2 0-1 1 2 0 3 5 1 5l-2 1 2 1 2 1 1 1c2-1 1 2-1 5-3 4-4 6-1 4 1-1 1-1 1 1v1l1 1-1 3-1-1c-1-2-1-2-1 0l-3 3-1 1c2 2-1 6-3 5l-10-1 3 1c3 0 2 1 0 5l-2 4c1-1 2-1 3 1 2 2 2 2 0 2-5 2-8 2-9 0 0-2 0-2-1-1h-2l-2-2 2 3c3 3 3 3 1 4l-3-1h-1c0 3-3 2-3-1-1-2-1-2-2-1v5a440 440 0 0 0-7-1c-1-2-1-2 1-2h1c-1-2 1-3 3-2 1 1 1 1 1-1-1-1 0-2 1-3 2-2 2-2 3 0 0 2 0 2 1 1v-3c-1-1 1-3 2-2 2 1 1-3-1-5l-1-2v2c1 4-2 6-3 3l-1-1-1 1c-1-1-2 0-2 1h1l1 1v1c2-2 0 2-3 4-2 2-2 2-3 1s-1 0-1 2c-1 3-3 4-7 3-3-1-11 0-10 1l-1 2-2-2c0-2 0-2-1-1h-1l1-2c2 1 4-5 3-7l1-1 2-4c1-4 2-4 5-4 2 0 3 0 4 4 1 3 1 4 2 3h1l1 1v-2h3l-1-2h-2l-1 1-1-2h1l1-1-2-1c-1 1-1 0-1-1 0-2 1-3 2-2v-2c-1-4 4-3 5 1s1 5-1 2l-3-1 3 3c4 4 5 3 3-1-2-5 0-6 2-2 1 3 1 3 1 1-1-4 1-4 3-1 1 2 1 2 2 1h4c3 0 3 0 1 2v2l2-2h2l1 1v-3c1-2 0-2-1-2h-3c-2 2-7-1-10-6-2-5-2-5 0-5 1-1 2 0 3 1l2 2-1-2c-1-2 0-2 4-3l5-1c2 1 1-1-1-3h-2c0 2-4 3-8 3l-2 1c-1 2-3 1-4-2l-2-1 1 3v2h-2v-1c0-3 0-3-1-1-1 1-1 1-1-3s0-4 2-2v-3c-2-2-2-2-2 0h-1v-2l1-1-1-5c2 2 1 0-1-3s-3-5-1-3 3 1 2 0c-2-3 0-4 3-3h4l-4-1c-2-1-3-2-3-4 0-9-14-11-17-2l-1 2h-22c-21 0-22 0-23-2-1-6-9-8-14-4m16 8l-1 2-1 2v2l-1 2v4l1 4 2 6c-1 2 0 5 1 5l1-1v-1c1 2 3 1 2-1h1c2 2 3 4 1 3l-2 1c0 2 2 6 4 6v-3l-1-3c1 0 2 1 2 3 2 3 3 3 6 3l4-1h14c0 2 4 1 4-1l1-3v-2l-3-2v-1h3c0 3 2 2 4-3s3-8 0-4c-2 4-3 3 0-1 1-3 1-3 2-2s1 1 1-1v-1c1 1 1 1 1-1l-1-3v-1c1-2 0-3-2-2-3 2-4 1-1-1 2-1 2-2 1-3-1-2-40-3-43-1m48 14l-3 15 1-1c0-1 5-3 8-2l5 3c3 3 3 3 2-2a5189 5189 0 0 1-9-19c-1 0-2 1-4 6M41 54l-4 5-1 3H22L9 63h13c13 0 14 0 14 2 0 3 4 6 9 6h3l8 16 7 16v1l2 1c-1 1 1 2 3 0 1-1 1-1-1-1l1-3 2-3-2 1-3 3-2-4-2-4 2-1c1 0 3 0 4 2 1 1 1 1 1-1-1-1 0-2 2-3l4-1-4 1-6-1h-1c1 2-2 4-3 3-2-4-2-8 1-7v-2c-1-1-2-1-3 1-1 1-1 1-3-4-3-5-4-6-2-5 1 0 1-1-1-3v-3l1-1c-1-3 0-3 5-2l6 1-5-2c-5-1-6-1-5-4l3-3 4-1-4 1-5-1c0-2-6-5-8-5l-3 1m310 1l-3 3-2 1c-2 0-2 0-1 1 3 0 2 4 0 5s-2 1 0 1c4 0 4 1 1 4l-1 2 2-1c2-3 3-2 2 0-2 3-3 4-1 4h1c1 1 1 0 2-1 1-2 2-3 5-3s7-3 9-6c0-2 2-2 14-2l14-1h-14c-12 0-14 0-14-2-2-5-9-8-14-5M187 65l5 10v1l1 4v2l-2-3c-1-3-2-3-3 2v1c1-1 1-1 1 1 1 2 1 2 4 0l4-1c0 1-1 2-3 2-2 1-3 3-2 3l-1 2h-1l-1-1-1 4c2 6 4 5 3 0 0-2 0-2 1-1h1v-2l1-2 1-2h3l-1 2v2l-1 2h-1l2 1v1l1 1 2 1 1 1 1-5c2-3 2-3 0-6s-3-4-3-2h-1v-3l-1-1v-1h4c1-1 1 0 1 1v2l1 1 2 1 2-1v-2c2-3 2-2 1 1l-1 3 2 1 2-1 1-2v-3l1-3 1-2c0-1-1-1-3 1l-2 2h-2l-3 1 2-2 3-3h1l1-1h1c1 2 3 0 4-5l2-4h-4l-4 1h-1l-4-1c-3 0-3 0-2 2l1 2-2-2c-1-1-2-2-3-1h-9l-2-1c-2 0-2 0-1 2m86 23l-2 1h-4c-2 0-3 1-2 2v1h-2l-2 1h-2c1-1 0-2-1-2v3l3 6c1 5 1 5 3 3 1-1 1-1 1 1-1 2 0 3 1 3 2 1 3 1 3-1l-1-3-1-1v-2l-1 1c-1 1-1 0-1-1v-6l2 1v-1l-1-1 2-1 2 2 1 2h2l1-1v-3l1-3 1-2c1-2-1-1-3 1M40 91c-2 0-3 2-4 4 0 2 0 2-10 2l-16 1 13 1c11 0 13 0 13 2s5 6 9 6l4 1h1v1l1 3h3c2 2 1 0-1-3s-3-4 0-3v-4l1-4c0-1 0-2 3-3l3-1h-4c-3 1-5 0-3-3h-1l-3-1c-1-1-6-1-9 1m312-1h-4c-2 0-2 0-1 1 2 3 0 4-3 3h-3l3 1c5 2 4 5-2 6l-6 2 1-2h-1l-2 1v1l-1 1-1 3-1 4c-2 1-2 1 0 2l2 1c-1-2 1-8 3-8h1c-1-1 0-2 4-3 5-1 7-1 6 1 0 1 1 2 2 1l-2 4c-4 6-4 6-6 3l-1-2-2 2c-1 2-1 2 1 2h2c1 3 0 5-2 4-2 0-2 0-1 2l2 2 2-3c2-2 2-2 2 0 1 2 7-9 6-11 0-2 0-2 1-1 1 3 11-1 13-6 1-2 1-2 14-2 10 0 12 0 9-1l-13-1c-8 0-8 0-10-3-3-5-8-6-12-4m-205 7c-1 3-1 4 1 5h1l1-2c1-1 1 0 1 2-1 2 0 4 1 6l2 2 3-2 4-3-3 4-3 4h-1l-2-1-1-1-1-1c2-3-2-4-3-1l-2 1 1-3v-2c-2 1-3 5-1 7 1 1 1 1-1 3v2c1 1 3 0 3-1-1-2 2-4 4-3v5c1 1 0 2-2 0-1-1-3 3-2 6l-1 1v1h2l2-1h1v3l-1 2h-4v-2c-2 0-3 3-2 5v2c-1 2 0 5 1 5 2 0 4-4 5-7 1-2 1-2 3 3 3 7 4 9 1 5-2-2-2-2-3-1l-2 1-1 1-1 4-1 2h-1l1 1c1-1 2 0 3 1v1l1 1v3h-1c0-2 0-2-2-2l-2 1 1 3c0 2 0 2-1 1-1-2-1-2-3 0s-3 3 0 3l1-1v-1c1-1 1 0 1 1 0 4 5 2 6-2 0-2 0-2 1-1s1 1 1-1v-2c2 1 4-2 3-4l-3-1v-2l1-2 3-1 4-4c3-1 1-3-2-3l-3 1 2-1c4-2 4-6 1-6-2 0-2 0 1-1l2-2s3-4 4-3h4c4 0 5 0 6-2l1-2v2h1c2-1 2-1 0-4s-1-6 0-3h2l-1-1-1-2h3l1-1 1-2c2-2 2-3 0-4v-1c2-1 0-6-2-6s-3 3 0 5v1c-4-2-4-2-4 2-1 5-2 6-3 3 0-4-7-4-8-1h-2v-3l-1-1-1-1v-2l-1-3c0-3-1-4-5-4-2 1-3 0-3-1-1-2-4-1-5 3m71 5v3l-1 3-2 3h-1l-1-2c-1 1 0 2 1 4 2 3 0 3-2 0-2-2-2-2-2 0h-1l-2-1 1 2c1 0 2 4 0 4l-2 6c1 1 3-1 3-3-1-2 0-3 1-2s1 0 1-2c1-2 1-2 2 0l-1 3v2l1 1c-1 1 0 4 1 3v-3c3 1 5-3 2-5v-4c1-1 2-2 1-4h3l1 2c-1 2 0 3 1 1v1l1 5c2 4 2 5 0 3l-1-1 1 3v1l-1-1h-1l-1-2h-2v3h2c0 2 2 3 4 3v-2h2c0-1 6-2 8-1h4c-1 3 0 2 4-1s4-3 3 0l-1 1c-1-2-5 3-4 5v3l1 3v1c-2 0-2 1-2 2 1 2 0 2-1 2h-1c-1 2-11 2-11 1h-1l-1-1c0-1-1-2-2-1-2 0-2 0-1-1 3-2 2-5-2-5-2 0-2 0-1 3 0 2 0 2-1 1-2-2-2-2-2 0v3c3 3 2 4 0 3-4-1-4 2 0 5 2 2 3 4 0 4v4c1 1 2 2 1 3l1 1 3 1-1 1h-3c-1-2-1-1-1 4h-2c-2 1-1 2 2 2 2 0 3-1 2-3v-2l1 2c1 3 4 4 5 1 0-1 0-2-2-3-1-1-1-1 1-1 1 1 2 0 2-1h1l1-1c0-3 0-5 1-3 0 2 2 2 4 3 3 0 4 0 5-4 1-2 2-3 3-2h2l-1 3-2 1-1 1c0 2 1 3 2 2v2c0 2 0 2 2 2s2 0 1 1l-2 2c1 4 3 4 5 0l1-2-1 3c0 3 1 4 3 1 1-2 1-2 1 0-1 4 2 4 3 0 1-2 1-2 2-1v-1c0-3 0-3 1-2s5-2 5-4-3-1-4 1l-1 1c0-1 0-2-1-1v1l-1 1-2 1-2 2 1-3c1-2 1-2-1-1l-2 1h-4l2-1 2-2 1-2v2l1 1c1 0 1-2-1-5-1-2-1-2-3 0l-3 1 3-3c2-2 2-2 3-1h2c1-1 1-1 1 1v4c1 1 1 1 2-2 2-4 1-6-2-5-2 0-2 0-1-1v-2l1-1 2-3 1 1h1l-2-4c-1-3-1-3-3-1v-2c1-2 1-2-1-2-2 1-3 0-3-1l1-2 1 1 2 1-1-2-1-3c-1-3-1-3-4-2-3 0-3 0-1-1s3-2 2-3l3 2 2 1 2-4 2-3 1-3h-2v-1l-1-1-2 1c-2 2-3 3-4 2l3-3 2-3-2-1h-3c-2 1-1-3 1-5 2-1-1-6-4-7-4-1-5 1-1 4 3 4 2 4-2 0l-3-1 1 2 1 1-1 1h-2c-2-3-8-3-9 0 0 2-2 3-2 3-2 0-3-2-1-2l1-2h-3l1-2c2-2 1-3-1-2v-1l1-3c-2-2-4-1-5 2m-117 6l-2 3-2 2v5c-1 0-1 1 1 1 1 2 1 2-1 5l-2 3 3-2c4-4 4-3 0 2-3 4-4 5-5 4v-3c1-1 1-1-1-1l-3 3c-1 2 0 3 2 1l2 1v3l-1 2 5-6 5-7 5 1c5 1 5 0 6-1l1-1 1-1c-1-2 0-3 3-2 2 0 2 0 0-1l-2-3c1-3 2-3 4-1v-3c-1-3-2-3-2-2l-2 2-1-1c0-3-9-5-14-3m-33 5c-1 1-3 2-4 1-2-1 0 3 3 4 2 1 2 1 0 4-2 5-4 6-6 6l-3 1c-1 1-6 2-6 0l2-2v-2l-1 1-2 1v-2l1-2-1 1-5 1c-5 0-10 3-10 6 0 2-1 2-14 2H9l13 1h13l2 3c1 4 6 7 10 6h4c1 1 1 1 1-1v-2c1 1 1 1 0 0l2-3 1-1c-2 0-1-5 2-5l5-1c1-2 2-1 1 0l-1 1v3l2-2 2-2 1-1 3-2h4v1l1-1 2 2 2 7c-1 2-1 2 1 1h1v2c1 0 2 1 2 3l2 1-1-3v-3c2-2 1-3 0-2-2 2-3 0-2-3v-4l-3-1-2-2h2a7624 7624 0 0 0 5-1l-1 3c1 1 1 0 2-1 1-3 1-3 3-1h1l-1-2 2-2c3-1 3-1 1-1-3 1-3 1-3-2v-2l-1 2c0 2-3 4-6 5-3 0-3 0-2-2l-2 1h-4v1c1 1 0 2-3 3h-3l3-5 1-1 1-1 1-3-1-3-1-1c0-2-1-1-3 1m281 12v2l-1 2-2 1c-3 0-5-1-4-3h-1l-3 1v2l2 1c1-2 7 1 7 3l-1 2c-1 0-1 1 1 1v4c-1 1-1 1 1 1l2-1-2 3c-2 3-5 3-4 0v-1c-1-1-2 0-2 1-1 2-1 2-2 1-2-1-2 0-1 2h5v3l-2 2c0 2 1 1 5-4 3-6 4-6 7-5 4 0 8-1 10-5l1-4h13l14-1h-14c-13 0-13 0-14-2-1-4-4-6-9-6h-6m-30 9l1 2 1 1h-1l-2-1c-1 0 0 2 2 3l3 4h-7l-2 1-5 3-3 1h3c2-1 3-1 3 1l1-1h2l1 1v-1c0-2 4-4 7-4 2 1 5 6 5 8l1 2 1 2-2-1c-1-1-1-1-2 1l-2 3h-2l-1 1c3 0 2 1-1 4-3 2-4 4-1 2 2-1 2-1 2 1l2-2c1-2 2-3 3-2h1c0-2 6 0 8 2s2 2 2-1c0-2-1-3-4-3-6 0-8-1-5-3 2-2 3-2 4 1 2 3 2 2 1-1s-1-3 2-5l1-3-3 2c-3 3-4 1-2-4l1-3c-1 2-2 2-4 0l-2-2 2-1 1-1-2-1h-1c-2 1-2 0-4-3-2-5-3-6-3-3m-141 2c-1 1 0 2 1 3h-1c-2 0-2 0-1 2 0 2 0 2-1 1h-7l-6 1c-1 1-1 1-1-1l1-2-2 2-3 4-1 1c-2-2-3 0-2 2 1 1 2 1 4-2l2-1-1 1v3l-1 1h-1v1l1 2h-1c-2-1-4 1-2 3l-2 1-1 2c0 4 1 5 5 6 3 0 3 0 3-2-1-2 0-2 1-2 1 1 2-1 0-1l-1-2 1-1h1v1h1l1 1 4 1c3-1 4-1 5-3 1-4 3-1 1 2l1 1c1-1 1-1 1 1v3c-1 2 2 4 5 4 2 0 3-1 3-2h1l2 2v-2l-2-3-2-2c-1 0-2-1-1-2l-1-3c-2-1-2-1 0-3l2-1-1 2v2c2 2 2 2 2-1 1-2 1-3-1-5l-1-2 3 1-1 1 1 1c2-1 2 0 2 1l1 2c1 1 2-1 2-4 0-1 0-2 1-1l1-1c0-2-4-2-4 1h-2c-2 0-1-1 1-3v-3l-1-3c-1-1-1-1-1 1 1 1 0 2-1 2l-1-1-1-1-3-1h2c3 0 3 0 4-2 1-3 2-2 2 2 1 4 3 3 3-2l1-4v-1l-1 1-1 1h-2c0-2-2-3-2 0l-1 1-2 1v-1c0-3 0-3-2-3l-3 2M49 160l-4 1c-4 0-8 2-9 6-1 2-2 2-14 2l-13 1h13l14 1c0 7 13 9 16 3h6l4 1 1-1c-2 0-2 0-2-2l1-3-2 3h-3c-4-1-4-5 0-6l4-1h-4c-4 1-7-1-6-4l-1-1h-1m296 1l2 1c2 1 1 3-1 4-2 0-2 1-1 1l2 5c1 7 11 9 15 3l3-4 13-1 14-1h-27l-1-3c-2-5-12-8-14-4l-3-1h-2m-198 5c-1 1 0 6 4 12 2 4 3 4 4 3l2-2v2l-2 3h-2l-1 1 1 4 8 8v-11c1-1 1-1 2 2 3 7 3 8 6 8s3-1 5-7 3-7 3-5v-1c0-5-2-6-6-5-4 0-10-2-10-3l-1-2c-2 0-3 2-1 4v1l-2-1-1-3-1 3v2l-1-3-2-1c-1 0-2 0-1-1l1-2h1l1 1c2 0 0-7-2-8-2 0-2 0-1 2l1 3-2-2c-1-2-2-3-3-2m190 3l2 3-2 2c-1 1-1 1 1 1 1 0 3 2 6 8 4 8 5 12 2 6l-3-2 2 4c2 2 2 3 3 2h1v5l-1-1-2-1 1 2v4c-2 0-2 1-1 1l1 2-1 2c-1 0 3 5 6 6 6 3 12-1 12-8 0-5-3-9-8-9-4 0-4 0-8-8s-4-8-2-10l2-2-3 1c-2 2-2 2-3 0-1-3-1-3 2-4 2-1 2-1-1-1h-3l-2-3h-1m-139 6l-1 6-1 1-1-3c0-1-1-1-3 1v3c-2-1-5 5-4 8 2 1 2 1 3-2 1-4 2-4 1 0v2l3-2c3-2 4-3 2-3v-3h1l3 2c2-1 4 0 2 1v2c2 1 2 2 0 3h-2c0-2-1-2-2-1h-1l-4 1-2 3c2 2 1 3-1 2h-3c0-2-2-1-3 2s-1 3-2 2c-1-2-1-2-2 1v3l1-2 1 1 1 3 1-3c1-3 2-4 2-1-1 3 2 3 4 0h1c-1 2 0 2 3 2 2 0 3 0 2-2h1l3 2c2-1 3 0 2 1-1 2-4 2-6 1s-6-1-8 1h-1c0-3-2-2-4 2-1 2-2 2-2 1l-1-2h-2l2 3 3 2-3-1c-1 0-2 0-2 2h1c2-3 1 1 0 4l-1 3h2l-1 3h-4v3l1 2v4c-2 2 0 2 3 1l4-2-3 3c-3 1-4 2-3 3 0 3 44 3 45 0l-2-3c-1-1-1-1 1-1 2 1 3-2 1-6v-3l-5-12-1-1c2 0-1-6-3-6-1 0-2 0-1 2s-1 1-3-3l-2-4 2 2c1 2 4 2 4-1 0-1 1-1 2 1l1 3v-3c0-3 0-3 1-2h1c0-2-2-4-2-2l-2-1c-1-4-3-4-2-1v3l-1-3-2-2-1-1-1-2v-1c1-2 2-2 2 0 0 1 1 1 3-1l1-4c-1-1-1-1-1 1l-2-2c-3-5-4-7-5-6v2c2 3 2 4-1 4v-2c0-2 0-2-1 0-3 2-2 0 0-4 2-3 2-3 0-4-1-1-1-1-1 1v2l-1-3v-1l-1-2c-1-1-1 0-3 3M51 194h-1l-1 1-4 1c-4 0-9 3-9 6 0 2-2 2-14 2l-13 1h11c11 0 16 1 16 3l2 4c4 3 9 3 13-1 2-2 4-3 5-2h3l-3-1-2-3 2-3c2-1 2-1-1-1s-4-1-2-3v-1c-2 1-3 0-1-1l1-2-1-1h-1v1m104 2l2 5 4 12c6 19 5 19 8 18 2 0 3-2 7-18l1-3-3 2c-3 3-7 3-10 0-3-2-6-10-4-10s1-4-2-6l-3-2v2\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/8281600941e9adcae8c522d9bd13a3a6/f2fbe/1*1mpE6fsq5LNxH31xeTWi5w.webp 200w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/e227a/1*1mpE6fsq5LNxH31xeTWi5w.webp 400w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/0cbce/1*1mpE6fsq5LNxH31xeTWi5w.webp 800w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/6bc95/1*1mpE6fsq5LNxH31xeTWi5w.webp 1200w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/ded3f/1*1mpE6fsq5LNxH31xeTWi5w.webp 1600w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/b7abf/1*1mpE6fsq5LNxH31xeTWi5w.webp 2000w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/8281600941e9adcae8c522d9bd13a3a6/f544b/1*1mpE6fsq5LNxH31xeTWi5w.jpg 200w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/41689/1*1mpE6fsq5LNxH31xeTWi5w.jpg 400w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/a296c/1*1mpE6fsq5LNxH31xeTWi5w.jpg 800w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/c35de/1*1mpE6fsq5LNxH31xeTWi5w.jpg 1200w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/8179c/1*1mpE6fsq5LNxH31xeTWi5w.jpg 1600w,
/blogs/static/8281600941e9adcae8c522d9bd13a3a6/4aca8/1*1mpE6fsq5LNxH31xeTWi5w.jpg 2000w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/jpeg&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/8281600941e9adcae8c522d9bd13a3a6/a296c/1*1mpE6fsq5LNxH31xeTWi5w.jpg&quot;
          alt=&quot;1 1mpE6fsq5LNxH31xeTWi5w&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.org/want-to-know-how-deep-learning-works-heres-a-quick-guide-for-everyone-1aedeca88076&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI(Artificial Intelligence)&lt;/strong&gt; 和 ML(Machine Learning) 是当下最热的话题.&lt;/p&gt;
&lt;p&gt;我们每天都能看到 AI 的字眼, 那些有抱负的程序员都说自己想学点 AI. 你也听到高层说他们想在服务中集成 AI. 但是, 大多数人其实不理解什么是 AI.&lt;/p&gt;
&lt;p&gt;一旦你读过了这篇文章, 你就会理解基础的 AI 和 ML 知识. 最重要的是, 你将会理解什么是 &lt;em&gt;[深度学习](&lt;a href=&quot;https://en.wikipedia.org/wiki/Deep&quot;&gt;https://en.wikipedia.org/wiki/Deep&lt;/a&gt;&lt;/em&gt;learning)_—最流行的 ML 方法, 是怎么工作的.&lt;/p&gt;
&lt;p&gt;这篇介绍面向所有人, 所以不需要任何数学基础.&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#%E8%83%8C%E6%99%AF&quot; aria-label=&quot;背景 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;理解深度学习的第一步是分清两个重要术语的区别.&lt;/p&gt;
&lt;h3 id=&quot;人工智能-vs-机器学习&quot;&gt;&lt;a href=&quot;#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-vs-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot; aria-label=&quot;人工智能 vs 机器学习 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;人工智能 VS 机器学习&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;人工智能&lt;/strong&gt; 是人类智能在计算机中的模拟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当 AI 研究首次开始的时候, 研究者会尝试去复制人类在特定行为下的思考方式—比如玩游戏&lt;/p&gt;
&lt;p&gt;他们会描述出计算机需要遵守的大量规则. 计算机有一个特定的动作集, 并且根据这些动作集作出决策.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;机器学习指的是机器具有一种在大规模数据集下学习的能力, 而不再需要提前规定各种规则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ML 允许计算机自主学习. 这种学习方式充分利用了现代计算机的处理力, 能够轻松的处理&lt;strong&gt;大规模&lt;/strong&gt;数据集.&lt;/p&gt;
&lt;h3 id=&quot;监督性学习-vs-非监督性学习&quot;&gt;&lt;a href=&quot;#%E7%9B%91%E7%9D%A3%E6%80%A7%E5%AD%A6%E4%B9%A0-vs-%E9%9D%9E%E7%9B%91%E7%9D%A3%E6%80%A7%E5%AD%A6%E4%B9%A0&quot; aria-label=&quot;监督性学习 vs 非监督性学习 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;监督性学习 VS 非监督性学习&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;监督性学习需要使用标记过的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你使用监督性学习训练 AI 的时候, 你需要给它一个输入和希望得到的结果(输出)&lt;/p&gt;
&lt;p&gt;如果 AI 得到的结果是错的.它会自动调整它的计算方式. 这个过程通过不断地遍历数据集, 指导 AI 得到的结果和期望输出值没有任何出入后, 才停止.&lt;/p&gt;
&lt;p&gt;一个监督性学习的例子是天气预测 AI. 它会使用历史数据来学习预测. 训练数据包括了输入(气压, 潮湿度, 风速)和输出(气温)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非监督性学习是使用没有特定结构的数据的一种训练方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你打算使用非监督性学习来训练 AI 的时候, 你需要让 AI 自己决定如何对数据分类.&lt;/p&gt;
&lt;p&gt;一个监督性学习的例子是电商网站的行为预测 AI. 它不能用标记过的数据来训练.&lt;/p&gt;
&lt;p&gt;取而代之的是, 它会对输入数据创建自己的分类, 它会告诉你哪种用于最可能买的东西.&lt;/p&gt;
&lt;h2 id=&quot;那么-深度学习呢&quot;&gt;&lt;a href=&quot;#%E9%82%A3%E4%B9%88-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%91%A2&quot; aria-label=&quot;那么 深度学习呢 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;那么, 深度学习呢&lt;/h2&gt;
&lt;p&gt;你要开始准备理解深度学习, 和它工作的方式咯.&lt;/p&gt;
&lt;p&gt;深度学习是一种&lt;strong&gt;机器学习的方法&lt;/strong&gt;, 它让你训练 AI 来针对输入给出对应的输出. 无论监督性学习还是非监督性学习都可以用来训练.&lt;/p&gt;
&lt;p&gt;我们通过假象一个&lt;strong&gt;飞机票预测服务&lt;/strong&gt;来学习深度学习的公粥方式. 我们使用监督性学习来训练它.&lt;/p&gt;
&lt;p&gt;我们希望我们的机票预测器能够使用下面的输入(去掉了剩余票来保证简单)来预测价格:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出发地&lt;/li&gt;
&lt;li&gt;目的地&lt;/li&gt;
&lt;li&gt;出发时间&lt;/li&gt;
&lt;li&gt;航空公司&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;神经网络&quot;&gt;&lt;a href=&quot;#%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&quot; aria-label=&quot;神经网络 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;神经网络&lt;/h3&gt;
&lt;p&gt;让我们来深入我们 AI 的大脑.&lt;/p&gt;
&lt;p&gt;就像动物一样,我们的预测 AI 的大脑拥有神经元. 用圆来表示它们. 这些神经元是互相连接的.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/f2724/1*LaEgAU-vdsR_pClMcgbikQ.jpg&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 791px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 49.05183312262958%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;196\&apos;%3e%3cpath d=\&apos;M133 14c-4 1-10 7-11 12-1 3-1 4-5 4l-3 1v1a398 398 0 0 0-21 7l21-5c0 1-1 3-4 5-4 3-3 4 2 0 4-3 4-2-2 5-6 8-5 9 2 1l7-7 2-2c0-2 0-2 2 2 4 7 13 10 20 8 4-1 10-7 11-11 0-2 2-3 2-1l3 4 5 7 4 4-2-5c-4-5-3-5 2-1l4 3-6-6-6-6a205 205 0 0 1 24 9l-5-3-13-6-7-3h35c36 0 39 0 31 4-4 1-4 3 0 1 5-2 6-1 3 2s-3 4 0 2h1l-1 2-1 1 2-1c2-2 2-2 1-3v-1h1c0 1 4 0 5-2s1-1 3 3c7 12 27 9 31-4 0-2 1-3 2-2v-1l-1-2-1-4c-2-8-12-14-21-12-5 1-11 7-12 12l-1 3-7-1-38 1-37-1c1 0-2-7-4-9-4-5-11-7-17-5m0 2c-12 6-13 21-2 27 6 3 8 3 14 0 13-6 9-26-5-28l-7 1m116 0c-10 3-13 15-7 23 8 11 26 5 26-8 0-11-9-18-19-15M26 36c-16 7-11 32 7 32 4 0 15-4 13-5l2-4 2-4 7 8 8 9c1 2 0 2-7 8-9 7-9 7-9 3l-4-6-2-3 1-2-2 1h-3c-10-6-25 6-22 18 2 10 12 17 21 13 5-1 10-7 11-11 0-3 0-3 3-1 7 4 14 10 13 11l3 1h3l-2-2a214 214 0 0 0-14-11c2-1 16 2 16 4h7l6 1-8 6c-6 6-9 9-4 6 1-1 2-1 6 2l4 4-8 3c-5 1-8 3-7 3l10-2c7-3 9-3 10-1 3 2 5 1 3-1-2-1-2-2-1-2 1-1 0-1-1-1-2 0-11-5-12-7l2-3 6-5c1-1 1-1 5 3 1 2 3 3 3 2l-1-2c-3-2-2-3 1-3l3-1h-4l-3-3c1-1-1-2-1 0H76c-1 0-1-1 1-3l1-3 3 3 3 3-2-4-3-3 3-4c2-3 4-4 5-3 1 0 2 0 1-1 0-1 2-2 7-3 7-2 11-4 8-4l-6 1-6 2-3 1 2-3c3-4 2-5-1-1l-5 4-1 1-5 2c-4 1-4 1-7-2s-4-2-1 2l2 2-4 1a386 386 0 0 0-14 4l13-11c1-1-1-3-3-6-6-8-7-10-1-6l3 1-5-4c-9-7-9-7 3-4l9 1-4-2-11-2-5-1 10-4c5-1 9-3 7-3l-7 2c-11 4-13 4-15-1-3-9-13-13-22-10m-1 3c-6 4-8 12-6 18 6 12 22 12 28 0 5-13-10-25-22-18m185 2a1726 1726 0 0 0-16 6c-3-2-5-1-3 0 2 2 2 2-3 4-3 1-5 2-7 1l-2 1c1 3-4 4-6 1l-2-1 1 3c1 1 2 1-2 3-3 2-2 2 3 0l4 3 3 4h-11c-6 0-10 0-9-1l2-1 3-2c3-2 0-1-5 1-4 2-6 2-6-1 0-2-4-8-7-9-3-2-12-4-12-3l-2 1c-4 0-9 6-12 13 0 2 0 2-1 1-1-2-5-3-6-2s-12 0-14-2l-5-1c-7 0-7-1-5-4l2-2c-2 0-11 8-11 9l3-1c2-2 2-2 7-1l5 2h1l9 1c9 2 10 4 2 6-4 2-4 2-1 1l6-1c2-1 1 3-2 5l-3 3 4-2c2-2 4-3 5-2l3-3c1-2 1-2 2-1 2 11 17 17 25 11l6-8 2-4 2 2 2 2 4 3 6 4-4-4c-8-7-7-8 6-9h11l2 4c3 5 8 10 8 8l-1-2c-3-2-2-4 2-7l3-2 3 2c4 4 5 4 2 0l-3-3h5l5 1h1c2-1 19-1 20 1l-4 2c-5 3-4 4 1 2 4-2 5-2 3 1v1l2-1c0-1 1-1 2 1h1l1-4c1-2 2-1 4 3 6 13 27 11 31-3 0-2 1-3 2-3l15 3-10-4c-6-1-7-1-8-5-2-8-12-14-19-12-6 3-11 7-12 11l-2 3h-1l-1-1c-1-2-2-2-4-2h-5l-4-2 3 3c7 3 6 4-3 4s-10 0-8-3l1-2-3 2c-1 3-2 3-7 3-4 0-6 0-5-1h-3l-3-1-3-3 1 3 2 2h-5c-6 0-6 0-9-4-4-4-4-5 0-6l5 1c2 3 4 2 1 0-2-2-2-2 5-5 6-3 6-3 9-2l4 2-2-2-3-2 4-1c7-3 14-7 12-7l-4 1m-79 12c-5 3-9 12-7 18 4 13 23 14 28 1 2-5 1-12-4-17-4-3-11-4-17-2m116 1c-7 4-10 14-6 21 6 9 21 8 25-2 7-12-6-26-19-19m99 14c-5 2-8 6-9 10v3l-2-3c-1-2-3-3-3-2l-4-1c-3-3-4-2-1 1 4 4 1 4-13 0l-16-3 15 5c16 3 15 3 15 5l-6 4-5 2 6-1c6-2 8-2 5 1v2l2-1 2-1c1 1 2 0 3-2l1-2 1 3c4 11 20 15 28 6 2-3 5-8 5-11 0-4-4-11-7-14-4-3-13-4-17-1m-1 2c-12 8-7 27 8 27 9 0 14-6 14-14 0-12-12-19-22-13m-171 6c6 3 6 3 4 5s0 3 2 0c2-1 2-1 7 1l6 3c0 2-11 5-12 4-2-2-3-1-2 1 1 1 2 1-3 3l-3 2 5-1c3-2 5-2 5-1l1 1v-1c-1-1 0-2 4-4l5-1h6v-2c-1-1 1-2 4-3l3-3-4 2c-3 1-4 0-1-2l1-2c0-1-2 0-3 2-3 4-4 4-4 2h-6c-4-3-19-9-20-9s1 2 5 3M25 76c-12 8-7 27 8 27s20-19 8-27c-4-3-11-3-16 0m39 9c-12 3-12 3-1 6l10 2 2-3 2-3-2-3-2-2-9 3m68 3c-5 2-9 6-10 10 0 4-1 4-3 1-1-2-2-3-4-3-3 0-3 1-2 2 2 3 2 3-7 1l-9-1c-1 1 2 1 13 4 6 1 4 3-4 5l-8 3-2-2-2-1 1 2c2 1 1 2-2 3h1c4 0 4 0 9 6l6 6-4-6-5-7c1-2 13-4 14-3s2 0 4-2c3-2 3-2 4 2l4 6c9 11 24 7 28-7l2-2a785 785 0 0 0 23 11l-4 5c-3 2-4 4-3 4l7-6c4-3 6-6 5-6l-1 1c-1 1-7-1-7-2l1-2 1-2-2 2c-1 2-1 2-8-1-11-5-11-5 1-5 11 0 11 0 10 2v2l2-2c0-2 1-2 7-2h6l-3 3-3 3 4-2c2-2 3-3 5-2l2-1c-1-1 0-1 3-1h5l-4-1c-5 0-5-1-2-4l3-2 2 2 2 1-2-2c-2-2 2-6 6-5 2 0 2 0 1-1l-13-5 4 2c4 3 4 3 2 4-2 2-2 2-4-1l-3-3 2 4 2 3-3 3c-4 4-4 4-8 0-4-3-4-4-1-6l2-3c0-2-4 1-5 3 0 1-1 2-2 1l-1 1c1 1-1 6-3 7l-13 1h-11l5-3 4-3-3 1c-3 2-2 0 2-4 4-5 3-5-3 0-8 7-8 7-10 4-2-9-13-14-21-10m112 2l-6 7c-2 3-2 3-3 1l-2-1-3-1c-2-3-3-2-2 0 1 3 0 3-7-1l-6-2 6 4 8 4c-1 2-18 2-19 1h-2v2c1 0 3 1 3 3l3 2-1-2c-2-3-1-3 8-3 6 0 8 0 8 2l-1 1-3 1 2 1h3l4-1 2-3 1 2c5 17 29 17 33 0v-3a380 380 0 0 0 5-3l-4 1-2-5c-3-7-7-9-14-10-6 0-7 0-11 3m-115 2c-9 6-7 20 3 25 7 3 18-1 20-8 5-14-11-26-23-17m117-1c-10 6-9 21 1 25 15 8 29-12 16-23-4-5-12-5-17-2M28 109c-9 3-14 13-10 22 5 14 25 14 30 1 2-5 3-6 7-5l29 6c32 6 30 6 30 7l3 1c3 0 4 0 5 4 4 8 7 10 15 12 7 1 15-5 17-13l1-3h37a207 207 0 0 1 41 1c3-1 3-1 4 2l1 3c0 3 10 10 16 10 7 0 16-8 16-15l6-7 5-5-6 4-4 4-2-3c-3-7-9-11-16-11-6 0-9 1-14 8-3 4-3 4-3 2s-1-2-2-2l-4-3c-2-4-4-5-4-3l1 2c2 1 1 2-1 1-1 0-1 1 1 3 4 4 3 4-7-1l-9-3c-1 1 5 3 14 7 4 2 5 4 3 4a490 490 0 0 1-67-2c2 0 24-9 22-10l-10 4-11 5 4-5 4-6-3 3c-4 4-6 4-3 0l3-5-8 8-4 6-2-4a17 17 0 0 0-31 3l-1-2c-1-2-2-3-3-2 0 1-2 0-4-4l-5-4 3 5c3 3 4 7 2 4-2-2-3-1-2 1 4 4 3 4-32-3l-26-6 5-2 6-2-2-1c-9 2-9 2-3-2 5-5 5-7-1-2-4 3-4 2 0-3 6-7 3-5-4 2l-5 7-2-4c-4-7-13-11-20-9m0 2c-7 2-12 12-9 20 6 13 24 12 28-3 4-10-8-20-19-17m106 15l-7 4c-11 12 4 31 18 23 11-6 10-21 0-26-5-2-6-2-11-1m115 0c-17 6-11 31 6 29 15-2 18-22 5-28-5-2-7-2-11-1m-22 53l-3 3c-5 2-4 8 2 8l3-1v-1l1 1 4 1h3v-6c0-5 0-6-1-5l-4 2-2 3c0 2 0 2-1 1l-1-3v-3h-1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/f2fbe/1*LaEgAU-vdsR_pClMcgbikQ.webp 200w,
/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/e227a/1*LaEgAU-vdsR_pClMcgbikQ.webp 400w,
/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/8420a/1*LaEgAU-vdsR_pClMcgbikQ.webp 791w&quot;
          sizes=&quot;(max-width: 791px) 100vw, 791px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/f544b/1*LaEgAU-vdsR_pClMcgbikQ.jpg 200w,
/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/41689/1*LaEgAU-vdsR_pClMcgbikQ.jpg 400w,
/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/f2724/1*LaEgAU-vdsR_pClMcgbikQ.jpg 791w&quot;
          sizes=&quot;(max-width: 791px) 100vw, 791px&quot;
          type=&quot;image/jpeg&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/35eee33de47a56b9757fd77ba4b2c6f1/f2724/1*LaEgAU-vdsR_pClMcgbikQ.jpg&quot;
          alt=&quot;1 LaEgAU vdsR pClMcgbikQ&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些神经元被分成三种不同的层:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入层&lt;/li&gt;
&lt;li&gt;隐藏层&lt;/li&gt;
&lt;li&gt;输出层&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注: 就是因为隐藏层的行为是黑盒的, 连创造这个 AI 的人都不知道为什么会这样. 这也就是为什么有些大佬针对 AI 会有一些担心. 虽然目前的 AI 还处于比较弱智的阶段, 但是就像互联网的发展一样, 没人能预测到 20 年后的 AI 会到怎样的程度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入层&lt;/strong&gt;接受输入数据. 在我们的场景下, 我们的输入层有四个神经元: 出发地, 目的地, 出发时间, 航空公司. 输入层将这些输入传给第一个隐藏层.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隐藏层&lt;/strong&gt;会对输入的数据执行数学运算. 一大挑战是: 决定使用多少层隐藏层以及每一层有多少个神经元(越多越慢, 但是效果也越好)&lt;/p&gt;
&lt;p&gt;深度学习中的 &lt;strong&gt;Deep&lt;/strong&gt; 指的就是多于一层的隐藏层.&lt;/p&gt;
&lt;p&gt;输出层就会返回输出的数据. 在我们的案例下, 它会告诉我们价格预测.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/b2a12/1*6PjhO0kPciY_f5XbghnZsQ.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 630px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 47.61904761904761%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;190\&apos;%3e%3cpath d=\&apos;M201 2l-2 4-9 7-8 6 7-3c6-4 8-5 6-2l-1 12c0 3 0 3-1 2v1l-1 7c-1 2-2 2-2 1l-1-2h-3c-2-1-3-1-3 2v1c3-3 5-1 5 3v1c2-4 2-4 3 2l-1 3c-1-2-1-2-1 0s-3 4-3 1h-1c-1 2-1 2-2 0l-2-2 1 3c1 2 0 6-2 4l-1 1-1 1-1-2c0-3 2-8 3-8l1-2c0-2 0-2-2 0l-1 2-3-9-2-5c0-2 0-2 4 0 7 4 7 3 1-1s-8-5-8-7c0-1-6-6-8-6-4 0-8 3-9 6l-4 5c-3 1-4 2-1 1 2 0 2 0 1 2v4h-2c1 1 0 5-1 7l-1 6 1-1c0-1 1-1 1 1 1 1 1 1 1-1v-3l2-7 2-8 2 3c4 5 12 4 15-1 1-2 1-1 3 10 2 9 2 13 1 14l-1 1h2l1-1-1 3v1l2 2c0 2 0 2-2 1l-2-2c1-2 0-3-1-2h-1c0-2-4-5-6-6-4-1-9 1-11 4-1 2-2 3-3 2-2 0-2 0-1 1 2 2 2 2-1 4-4 2-4 2-4 0-1-1-1-1-1 1l-2 3c-2 1-2 1-1-2l1-4-2 3c0 4-1 4-3 0l-2-2 2 4 1 3-5 3c-2-1-2-5-1-5h1l2-6 2-5-2 1-1 1-1 1v3c-1 1-1 1-2-1l-1-4c-2-3-1-5 1-2 0 2 1 3 2 3l-3-6-3-6c2 0 11 6 11 7l1 1c1-2 4 1 3 4v4l1-3 2-3v3c0 2 0 3 1 1l1-2c2 0 2 0 1-2l-2-2c-1 1-1 0-1-2l1-4-1 3c-1 2-2 3-3 2-2-1-2-2-1-3 2-3 1-4-1-1l-1 2-7-4-6-4 11-6 10-7-11 6-11 5c-2-8-14-9-17-1l-1 3H92l-14-1-1-3c-2-1-2-1-1 3 1 8-7 12-13 7-5-6-1-14 7-13h3c-3-3-11 0-13 5-1 1-2 2-5 2l-3 1h3c3 0 4 1 5 2 3 8 14 9 17 2 0-2 0-2 2 1l1 6c0 2 0 2 1 1h1v-6l-2-4c-1-2 0-2 12-2 11 0 12 0 11 1l-1 3v8c1 1 1 0 2-4l1-6 2 2c5 6 14 5 16 0 0-3 1-1 3 7l2 5v3c0 2 0 2 1 1v1l-2 5c-2 4-1 5 1 2 2-2 2-2 2 0s-4 5-4 3h-1c0 1-2 0-3-2-3-3-5-4-7-4-3 0-9 4-9 7l-2-1-3-3 1 3c2 2 2 2-1 2s-4 0-3-2l1-4c1 0 1-2-1-3-2-3-3-4-3-2v4l-1 3 1-3c2-3 3-1 2 3-1 5-4 6-3 1v-2l-1 2-2 1v1h-5l-4 1-3-1c1-1 0-1 0 0l-2-1c0-3-5-6-9-6-3 0-8 4-8 6s-1 2-4 2l-4 1 4 1c3 0 3 0 5 3 2 6 9 7 14 2 3-2 3-3 4-1h1v-3c-1-1 0-1 3-1s4 0 4 2h1l1-2c1 0 2 1 1 2h1c1-1 1 0 2 3 2 5 2 10 0 7h-2v-2l-1 2v3c1 1 0 2-1 3-2 2-2 2-3 0s0-7 2-5v-3c0-2 0-2 1-1s1 1 1-2c0-5-2-5-2-1l-2 2-1 1c2 4 0 5-2 3l-1-2 1 2v6c0 2 0 2 1 1s1-1 1 1c1 2 1 3-1 5l-2 3 3-3 2-2 1 3 1 4v3l-1-2v-2l-1 2c-1 2-2 2-5 2s-3 0-2-1v-4c-1-1-1-1-1 1-1 2-1 2-4-1-4-5-11-4-14 2-2 2-3 3-6 3l-3 1h3c3 0 4 0 5 3s2 3 1-2c-1-7 7-11 12-7 7 5 2 14-6 13-4-1-4-1-3 1 4 2 11 0 13-5l1-2 2 2 2 2-2-3c-1-2-1-2 2-2 4 0 4 0 3 3l-1 3c-1 1 0 4 1 4l1 1 3 3 1 3-1 2h1c1-1 2-1 3 1l2 1c0-2-3-5-5-7l-2-4-1-2c-1 1-1-1-1-5l3-3c2 0 2 0 1 2l-1 3 1-1 2-1 1-1c0-2 3-3 3-1h1l4-1c3 0 3 0 2 2l-1 2 2-2c1-1 2-1 3 2 4 6 12 6 16 0l2-2 1 3 1-1v-2c1 0 3 2 3 4s0 2 1 1c0-3 1-2 5 1l3 2c2 0 4 2 4 4s0 2 1 1c0-2 1-2 2-1 2 0 2 0 0-2l-3-4h-1c-1 2-3 0-2-2h1c1 1 1 0 1-2v-3l2 2c2 3 3 2 1-1v-5c2-4 2-5 1-5h-1c-1-1-1 0-1 2 0 3-1 5-2 3v2c0 2 0 2-1 1s-1-1-1 1l-1 4c-1 2-3-4-2-8 0-4 2-4 2 0 0 2 0 2 1 0v-4c-1-2-1-2 1-3h3l2-3c4-3 4-2 3 0l-1 3 3-3c1-3 1-3 2-1 2 6 11 7 15 2l3-3v3l2 3c2-2 0 19-3 22l-2-2c-4-4-10-4-13 0l-3 3a346 346 0 0 0-5-14v7l2 5v3c2 2 2 2 0 3l-2 2 3-1c2-1 2-1 3 1 2 6 9 8 14 3 4-4 4-4 6-4v-1c-1-2-1-2 1-3s2-1 2 1l-1 3v2l-1 2v1l-1 12c-3 13-3 13-5 10-4-5-10-5-14 0-2 2-2 2-4-6l-2-7v-2l-1-4c-1-3-1-3-1-1l-1 4c0 2 0 2 1 1 1-2 1-2 1 1v7l1 3-2-3c0-2-1-3-2-3l3 6 3 6-10-5-11-6 11 8c7 3 12 7 12 8l3 4c4 5 12 4 14-2l2-3 8 5 9 5-8-6-7-5 7-5c7-4 8-5 5-5h-2c0 2-9 8-10 7l2-5c3-5 4-8 1-5v-3c1-3 3-3 2 0l1 2h2v-2c-1-1 0-2 1-3 2-3 1-5-1-2s-4 1-2-3c1-4 3-4 4-1l1 2c0-1 1-1 1 1h1c0-3 3-1 3 2h1c0-2 9 3 9 6 0 2 6 6 9 6s7-2 8-6l4-2c3 0 3 0 2 4 0 3 0 3 1 1l1-2v2c1 2 1 2 1-1l3-4c2 0 2 0 1 2l-1 3 2-2c1-3 1-3 7-3 5 0 6 0 5 1-2 2-1 3 1 2 2-2 2-2 5 1 3 4 9 4 12 0l6-7 4-8 3-7-3 3c-1 3-2 4-2 2-1-1-1 0-2 5-2 4-2 5-3 3s-6-6-8-6c-3 0-9 4-9 6l-3-9c-1-5-2-11-1-12l-1-2h-1l2-1v-1h1l1-1c0-3 0-2 4 1 5 5 12 4 14-2l2-3 4 3c4 2 4 2 4 6l-1 4 1-4c1-2 2-3 3-2 2 1 2 1 0 4l-1 4c1 0 2-1 2-3l2-3 3 2a1884 1884 0 0 0 10 7l3 4c4 4 9 5 13 2l3-5 2-3 2-3-2 1h-2l-2-4c-4-3-10-3-13 1l-3 3-1-2-1-4h-1c-1 1-1 1-1-1v-2c-1 2-1 2-2-1l-2-2 3 6 3 6c-2 0-11-6-11-7l-1-1h-2c-2-2-2-2 2-12 0-1 1-1 2 1 0 2 1 3 2 3l-1-4-2-3 5-3c5-3 6-5 2-3l-3 1-1 1-1 1-1-2h1l1-2c-1-5 1-7 5-4l3 3v2h1c0-1 2 0 3 2 3 3 4 4 7 4 4 0 9-4 9-6s2-2 14-2h13l-2 2-2 4 3-2c2-3 3-4 3-2 0 3 5 6 9 6 3 0 8-4 8-6s1-2 4-2h5l-4-1c-3 0-4-1-6-3-1-4-5-6-8-6s-8 4-8 6l-2 1c0-1-1-1 0 0l-13 1-14-1c0-3-6-7-9-7l-6 3-4 4-1-4-3-3 1 3c2 3 1 3-4 0-3-2-5-3-4-4v-3c-2 2-2 2-3 0h-1c0 2-1 2-2 2h-1l3 2v2c0 2 2 3 3 1h2l-1 7-2 6-2-3c-1-2-2-4-1-5 0-2 0-2-1-1-2 0-3 4-1 4l2 3 2 3-3 2c-3 2-3 4 0 2 2-1 2-1 0 5l-1 5-4-2-4-2 3-2c3-2 3-4 0-2h-2c0-1-1-1-1 1h-2c0-3-6-7-9-7s-8 3-8 6-2-1-3-8a910 910 0 0 0-2-9l2-4c2-7 2-7 5-4 5 5 15 3 15-4l1 1h2c0-1 1-1 3 1l3 1-3-3c-4-2-4-2 0-5l4-1h1c0-2 3-4 5-2 1 1 1 1 1-1l-2-4h-2c1 2-2 5-2 4l-4-9c-1-5-2-8-3-7l2 8c4 9 4 9-1 11-5 4-5 4-5 1-2-7-14-7-17-1-2 5-5-7-4-12l2-11 1-5 2 3c4 5 11 5 15-1l2-3 1 5c1 4 1 4 2 2v-6c1-1 0-1-1-2l-3-3c0-2-4-5-6-6-4-1-9 1-11 4l-1 3-2-2-3-3 2 4 2 2h-6l-7-1h-1c-1 2-4 1-4-2l-1 1v-2c0-3 0-4-1-2l-1 1v1c0 4 0 4-3 4-2 0-3-1-4-3-2-4-7-6-10-5-3 0-7 4-7 6h-3c-2-2-2-2 0-15l2-14 4 3c4 4 11 3 14-2 1-1 1 0 2 4l4 17h1c2 2 1-1-1-6v-6l-1-5-1-4-1-3-2-3-3-4c-3-4-9-4-13-1m19 45l2 3c-2-1-2-1-1 2v5l-1 3v-4l-1-2-1-5-1-3-2 3c-4 5-10 5-15-1l-2-2-2 8-2 8c0-1-1-1-1 1l-1 2 1-1 1 2 1 6c1 1 1 1 0 0l-2-1c-2 4 5 6 7 3 3-6 10-6 14-2l4 3 1 1 3 1c3 0 3 0 3-2l-1-3-2 1h-2l2-2v-8l1 3 2 3-1-4c0-4 0-4 1-2 2 3 2 3 2-2v-2l-1-2-1-3c-2-1-3-3-1-2l1-1-1-5c0-2 0-2-3-2h-3l2 3m6 2c0 6 2 9 3 7s1-2 1 0c1 2 1 3 2 2l1 1c-1 3 2 7 3 5 1-1 1 0 1 2v3l1-3v-8l1 2c0 4 1 1 2-3l1-6c0-2 0-2-1-1-3 2-2 0 1-3l2-3h-6l-6 1h-1l-2-1c-2 0-2 1-1 3v4l-1-4-2-3 1 5m43-2l12 7 10 7-4 2c-2 2-2 2 0 2 1-1 2-1 2 2l-1 2v3c1 1 1 1 2-3 1-6 3-7 4-4 0 3 6 5 9 4l6-4 3-3-2-4c-4-8-13-9-17-2l-1 4-11-7-12-6M146 65l-3 4h-3l-1 2h2c1-1 1 0 1 2l1 3 1 2-1 2-4 6c0 2 3 2 4 1s1-1 1 1 6 6 6 4h3c0-2 5-6 8-6s6 2 8 4 2 2 3-1l1-2v-2h1l-2-13c-2-9-1-9-4-6-4 5-12 4-15-1-1-2-1-2-2 2l-2 3c-1-1-1 0-1 2v1l-1-1-2 2 2-6c4-5 3-6-1-3M23 72c0 2 0 2-1 1-1-3-1-3-1 1-1 2 0 2 6 2l9-1h1l2 1 2-1h6l1-1c0 2 0 2 1 1l1-2c-1-2-4-3-4-1h-5l-2-2-3 1h-1l-2 1h-5l-1-1v-1l-1 3c0 2 0 2-1 1 0-4-2-5-2-2m42-1c-4 2-5 9-2 13 5 4 13 1 13-6 0-6-5-9-11-7m70 1l-2 1-1 3c0 1 0 2-1 1 0-2-1-2-3 0-2 1-2 1 0 3v1c-2-1-3 0-1 2l2 6c0 3 0 4-1 3l-1-4v-1l-2-3c0-4 0-4-4 0s-8 4-13 0l-3-4-1 4-2 2-1-1c-2 1-1-1 1-4l2-2h-4c-3 0-4 0-4 3-1 4 0 6 2 5l-2 4c-4 4-4 6-1 7l2 3h-3c0 1 0 2 1 1l-1 7-1-2v-6c-1-2-2-3-2-1h-1c0-1-2 0-2 2h1c1-1 1-1 1 2 0 4 1 6 2 5l1 1c0 3 2 2 2 0v-2l1 2c1 1 2 2 5 2s3 0 2-2v-3h-1l-4-3 2 1c2 1 2 1 2-2l1 2 2 5 2-1c1-4 4-5 8-5s8 3 8 5 2 0 3-3c0-2 0-3 1-2s1 1 1-1v-2l1 1v-8c2-6 3-7 3-3 1 3 1 3 2 2 1-2 0-8-1-6-1 1-1 1-1-1l-1-4c-2-1-2-1 0-1 2 1 2 1 1-1 0-2 0-2 1 0l1 2v-6l1-2h1l1 4-1 4h-2l1 2h2l1-1c1 1 2-9 1-11h-4m54 4c-1 4 0 7 1 3l1-3v11c0 2 0 2-1 1h-1c-1 1-1 0-1-1 0-2 0-2-2-1v3l2 2c0 3 2 2 3 0 1-4 2-4 1 0l1 2c1-1 1 0 1 1l1 5c0 2 0 2-1 1-2-2-2-2-1 0 0 2 0 2-1 1l-2-3-1-1-1 2-2 3v2c1 1 2 0 2-1 1-2 1-2 1 0l3 5v1c-2-1-4 2-3 5 0 4 2 4 1-1 0-2 0-3 1-1 1 3 2 3 4 2l2-1-2-2-2-2 2 1c2 0 2 0 1-2-2-2-2-3-1-5s1-2 2 2l1 5 3-3c4-4 10-4 13 0 2 3 3 3 4 2l1-1v-1l1-4c1-1 1-1 1 1v3c2-2 1 0-1 3l-2 2h4c3 0 4 0 4-2h1l2 2 1-2v-1c1 1 2-2 2-7 0-3-2-5-2-2 0 2 0 2-1 1 0-2-2-2-2 1l1 1c1-1 1 0 1 2l-1 4-1-3c0-3-1-4-3-1h-2l2-2 1-3 1-2 3-1c1-2 1-2-1-4s-2-2-3 2l-1 2v-4l1-4c1-2 1-2 2 0 3 5 6 1 5-6-1-3-3-1-3 3l-1 2-1-4 1-3 1-1v-1l-2 1h-1l-4-1c-3 0-3 0-2 2v4c-1 1-1 1-1-1-1-4-1-4-5 0-5 5-11 4-14-2l-2-2v3l-2 3v1c0 2 0 2-1 0v-3c2-2 1-3-1-3h-1l3-2 1-1c0-1-4-3-5-2l-1-1c-2-2-2-2-2 1m31 39l2 4-3-3-2-2-1 3c-2 3-6 5-9 5-2 0-8-5-8-7l-1 1h-4c-2 1-2 2-1 4l3 13 2 11 3-3c4-4 9-4 13 0l3 3 1-5 3-4-1 4-1 4v2c-1 1-1 1 2 1 2 0 3 0 3-3l1-2v3c0 2 0 2 1 1h1c0 2 4 1 5-1l1-2v2c-1 2 0 2 5 2s5 0 4-2v-2l-4-10-1-4v-2c1 2 2 1 1-1 0-2-1-2-2-1h-1l1-2c2-1-1-9-3-9v3h1l1 2c0 5-2 5-2 0-1-4-3-3-3 2 0 2 0 2-1 1h-1v3c1-2 1-2 1 0 0 3 2 5 2 3 0-1 1-2 2-1v2c-1 2-1 2 1 4 1 2 2 2 2 1 1-1 1-1 1 1 0 4-1 4-4 0l-2-2-1 1c-2 0-4 4-4 7h-1c-1-2 1-9 2-8h2v-3c0-1-1-1-1 1-1 1-1 1-1-2v-3l-2 2v-1c0-4 0-4-3 2l-1 4 1-4v-6l1-3 2-3c0-3 0-3-4-3h-3l2 2m-88 6c-1 2-1 2-3 0h-1l2 5c0 2 0 2-1 1-1-2-1-2-1 0v2l-1 4-2 7-1 4-3-3c-3-4-9-4-13 0l-3 3-1-6-2-4h-2l2 4v4c-2-1-1 0 1 2 1 2 1 2-12 2H79l2-3 2-3c-3 2-2 0 0-4v-6l-1-3v7l-1 1-2 4c-1 5-1 5-3 3-3-4-8-5-12-3-1 2-1 2 3 1 8-1 12 7 7 13-6 5-14 1-13-7v-3l-1 2-4 1-4 1 4 1c3 0 4 0 4 2 1 6 11 8 15 3l3-4 14-1h14l2 3c3 6 10 6 15 0 1-2 2-3 3-2 2 2 4 1 2-1-3-1-3-1 4-5l5-4-6 3c-5 3-6 3-3 0v-3l1-6 3-5v3l-1 3 3-4 2-5-2 1c-1 3-2 1-1-3 0-4 0-5-1-2m59 27l-1 4-1-2-1 1v3l2 3v-1c0-3 0-3 1-2l2 5v4l1 2c0 7 1 11 2 13 1 1 1 1-1 1l-2-1 2 2 3 2 1 1c0 4 4 7 8 7 5 0 7-2 9-6l4-5c2-2 3-5 1-3-1 0-1-3 2-7 1-3 2-6 0-4v-9h-1l-5 23-1-2c-3-6-11-6-15-1-3 3-2 3-5-8-2-17-2-17 0-19h-1c-2 0-2 0-2-2s0-2-1 0l-1 1c0-2-1-1 0 0\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/f2fbe/1*6PjhO0kPciY_f5XbghnZsQ.webp 200w,
/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/e227a/1*6PjhO0kPciY_f5XbghnZsQ.webp 400w,
/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/eae19/1*6PjhO0kPciY_f5XbghnZsQ.webp 630w&quot;
          sizes=&quot;(max-width: 630px) 100vw, 630px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/9ec3c/1*6PjhO0kPciY_f5XbghnZsQ.png 200w,
/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/c7805/1*6PjhO0kPciY_f5XbghnZsQ.png 400w,
/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/b2a12/1*6PjhO0kPciY_f5XbghnZsQ.png 630w&quot;
          sizes=&quot;(max-width: 630px) 100vw, 630px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/5cc5d0c872bf7934abe030f7acfa5fec/b2a12/1*6PjhO0kPciY_f5XbghnZsQ.png&quot;
          alt=&quot;1 6PjhO0kPciY f5XbghnZsQ&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以, 这个价格预测是怎么算出来的呢?
这就是深度学习的&lt;strong&gt;黑魔法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个神经元都是以&lt;strong&gt;权重&lt;/strong&gt;来连接的. 权重指的就是某一个输入值的重要性. 初始权重是随机的.&lt;/p&gt;
&lt;p&gt;当我们预测飞机票的价格的时候, 出发时间是一个重要的影响因素, 所以和出发时间相连接的神经元, 都会获得一个很高的权重.
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/b2fe0db64884470d524228d265952875/86a13/1*_kudSKDXEScysTpYYowqFg.jpg&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 532px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 62.96992481203007%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;252\&apos;%3e%3cpath d=\&apos;M210 8c-24 8-29 33-9 48l4 3-4 1-4 1 3 1h2a288 288 0 0 1-34 29l-20 17c-1 1-4 0-18-3a543 543 0 0 0 13 6 526 526 0 0 1-32 28c-3 2-1 3-14-4l-14-6 11 7 13 6-5 5c-7 6-5 7 1 1 6-5 5-5 10-2l17 8c18 10 17 9 8 13-19 9-21 10-20 11l10-4 15-7 6-2 4 2 6 4 3 1a466 466 0 0 1 38 22l-2 1 3 1c2 0 2 0 1 2-4 4-6 18-4 23 2 4 2 4-3 0l-3-1 2 3h-1l-53-6-64-7h-8v-5c0-3 1-4 2-5a585 585 0 0 1 7-5c-10 5-10 4-10 11-1 6-2 9-7 14l-2 4c2 0 9-8 9-11 0-2 1-2 2-2a583 583 0 0 0 54 7 788 788 0 0 0 59 6c12 1 12 1 9 3-2 3 1 3 5 1 5-2 5-3 3-10-2-9 0-16 8-23l4-5-3 1-2-1c-2-4-5-4-3-1l1 2c-1 0-16-7-37-19-18-10-19-8 3-17l20-10c9-4 9-4 7 0-3 3-1 2 2-1 3-5 3-5 5-2l6 5c22 15 53 3 53-21 0-26-37-38-57-18-5 5-8 13-8 20 1 8 3 10 2 1 0-9 1-13 6-19 19-20 55-10 55 16 1 26-39 36-56 14l-4-3-5 1-4 1 3 1v1a1696 1696 0 0 1-45 21l-5-1a1238 1238 0 0 0-34-19l23-20c12-10 15-12 20-9l11 3a917 917 0 0 1 23 9c-2 1-2 1 2 1 6-1 7-2 3-6-3-3-6-4-3-1v2a10676 10676 0 0 0-39-10c-3-1-2-2 21-21a641 641 0 0 0 30-26c2-1 2-1 1 1-1 5 1 3 3-2l1-4 5 2 11 1c8-1 15-3 12-4l-4 1h-21c-6-2-14-9-17-14-5-9-3-21 5-28 9-9 25-12 37-7 20 10 23 32 5 45l-3 3c2 0 8-4 11-8 11-12 5-33-12-41-7-3-19-4-26-1m-29 14c3 2 3 2-3 4a459 459 0 0 1-9 4c8-2 14-4 15-3l-1 1c-1 0-2 3 0 3 1 0 7-7 6-8l-6-2c-4 0-4 0-2 1m-51 19l-8 2-12 4a1480 1480 0 0 1-50 17c-1 1-3-1-5-3l-6-4 4 5c4 4 6 5 6 4l1-1h2a4300 4300 0 0 0 68-24M15 61c-9 10-9 25 1 34 13 13 36 9 44-7 2-5 3-14 1-18-2-2-2-2-1 3 1 10-1 15-6 20-15 15-40 9-44-11-2-7 0-14 7-20 4-5 3-5-2-1m332 33c-10 2-21 9-25 17-4 7-4 14 0 21l4 7c2 0 1 2-1 3-3 0-4 1-1 3 2 3 3 2 4-1v-3l5 3c15 9 35 8 48-3 5-4 3-4-3 0-26 19-68-2-55-29 5-10 17-16 32-16 13 0 19 2 27 10 7 7 7 7 3 1-7-10-23-15-38-13M36 180c-20 4-29 27-15 41 9 9 24 11 34 5 3-2 2-2-3 0-16 7-36-5-36-21 0-17 17-28 34-22 7 3 9 2 3-1-6-2-11-3-17-2m217 16c12 13 8 31-9 40-6 3-18 4-25 2-6-3-8-2-2 1s20 2 27-2c19-8 24-28 11-42-5-4-6-4-2 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/b2fe0db64884470d524228d265952875/f2fbe/1*_kudSKDXEScysTpYYowqFg.webp 200w,
/blogs/static/b2fe0db64884470d524228d265952875/e227a/1*_kudSKDXEScysTpYYowqFg.webp 400w,
/blogs/static/b2fe0db64884470d524228d265952875/65bb3/1*_kudSKDXEScysTpYYowqFg.webp 532w&quot;
          sizes=&quot;(max-width: 532px) 100vw, 532px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/b2fe0db64884470d524228d265952875/f544b/1*_kudSKDXEScysTpYYowqFg.jpg 200w,
/blogs/static/b2fe0db64884470d524228d265952875/41689/1*_kudSKDXEScysTpYYowqFg.jpg 400w,
/blogs/static/b2fe0db64884470d524228d265952875/86a13/1*_kudSKDXEScysTpYYowqFg.jpg 532w&quot;
          sizes=&quot;(max-width: 532px) 100vw, 532px&quot;
          type=&quot;image/jpeg&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/b2fe0db64884470d524228d265952875/86a13/1*_kudSKDXEScysTpYYowqFg.jpg&quot;
          alt=&quot;1  kudSKDXEScysTpYYowqFg&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每一个神经元都有一个&lt;a href=&quot;https://en.wikipedia.org/wiki/Activation_function&quot;&gt;激励函数&lt;/a&gt;, 这些函数没有数学基础的话很难解释.
简单地说, 它的一个用处就是标准化这些神经元的输出值.&lt;/p&gt;
&lt;p&gt;一旦这些输入数据通过了所有的神经网络后, 它们就会通过输出层被返回出来.
一点都不难, 对吧?&lt;/p&gt;
&lt;h3 id=&quot;训练神经网络&quot;&gt;&lt;a href=&quot;#%E8%AE%AD%E7%BB%83%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&quot; aria-label=&quot;训练神经网络 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;训练神经网络&lt;/h3&gt;
&lt;p&gt;训练 AI 是深度学习最难的部分. 为什么?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你需要有大量的数据&lt;/li&gt;
&lt;li&gt;你需要有庞大的算力&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于我们的机票价格预测系统, 我们需要寻找历史机票价格的数据. 因为机场和出发时间又有大量的组合, 我们就需要非常庞大的数据集.&lt;/p&gt;
&lt;p&gt;为了训练 AI, 我们需要给他输入值, 然后将它的输出值和数据集中的输出值进行比较. 因为 AI 还没有训练完成, 这个输出肯定是错的.&lt;/p&gt;
&lt;p&gt;一旦我们遍历过一次所有的数据集后, 我们创造一个用来暂时 AI 的输出和预期输出之间的差别. 这个函数被称为&lt;strong&gt;开销函数&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;理想情况下, 我希望我们的开销函数是 0. 也就是 AI 的输出和数据集的输出完全一致.&lt;/p&gt;
&lt;h3 id=&quot;怎么降低开销&quot;&gt;&lt;a href=&quot;#%E6%80%8E%E4%B9%88%E9%99%8D%E4%BD%8E%E5%BC%80%E9%94%80&quot; aria-label=&quot;怎么降低开销 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;怎么降低开销&lt;/h3&gt;
&lt;p&gt;我们需要修改神经元之间的权重. 我们可以随机的改变他们直到开销很低. 但是这个方法显然不怎么高效.
相反, 我们会使用一个叫做 &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradient_descent&quot;&gt;梯度下降&lt;/a&gt; 的方法.&lt;/p&gt;
&lt;p&gt;深度下降是一种让我们能找到函数最小值的方法. 在我们的场景下, 我们需要寻找开销函数的最小值.&lt;/p&gt;
&lt;p&gt;它的工作方式是&lt;strong&gt;在每次遍历数据后&lt;/strong&gt;, 一点一点的&lt;strong&gt;修改权重&lt;/strong&gt;. 通过计算在某一特定数据集下, 开销和对应权重的函数的斜率, 我们可以知道哪个方向可以得到最小值.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/3fc5856380fb326d45c3303623ce7207/2f950/1*HrFZV7pKPcc5dzLaWvngtQ.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 54.1875%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;217\&apos;%3e%3cpath d=\&apos;M36 15v4c2 1 2 6 2 88v87h113a870 870 0 0 1 112 3l7-4-7-4v2c1 1-12 1-111 1H40v-87a513 513 0 0 1 1-91c-3-4-2-4-5 1m23 33c0 46 22 94 52 115 21 16 33 17 96 9a1697 1697 0 0 0-39 2c13-3 29-14 39-25l15-22h1c1 2 3-1 3-3v-2a263 263 0 0 0 15-46c1 0 2-4 1-5V57c1-14 1-16-1-16-1 0-2 3-2 11-1 11-3 29-5 31l-3-1c-10-5-19 6-11 14l2 3-3 8-4 7c-1-2-2 0-1 4v4l3-2c3-2 4-5 2-4-1 0-1-1 2-9 3-6 4-8 6-8 4 0 4-1 1 7-20 53-64 79-103 62-34-17-58-59-62-114-1-11-2-15-3-15l-1 9m134 98c-3 3-6 4-4 2l-1-1-2 4c-1 2-10 8-10 6s-2-1-3 2c-2 3-6 5-6 2l-3 2-3 3 3 1c3 1 6 1 5-1 0-2 2-3 6-3 3 0 4 0 4-2-1-2 4-5 10-7 3-1 4-1 3-2s0-3 3-5c3-3 4-5 2-5l-4 4\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/3fc5856380fb326d45c3303623ce7207/f2fbe/1*HrFZV7pKPcc5dzLaWvngtQ.webp 200w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/e227a/1*HrFZV7pKPcc5dzLaWvngtQ.webp 400w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/0cbce/1*HrFZV7pKPcc5dzLaWvngtQ.webp 800w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/6bc95/1*HrFZV7pKPcc5dzLaWvngtQ.webp 1200w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/ded3f/1*HrFZV7pKPcc5dzLaWvngtQ.webp 1600w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/3fc5856380fb326d45c3303623ce7207/9ec3c/1*HrFZV7pKPcc5dzLaWvngtQ.png 200w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/c7805/1*HrFZV7pKPcc5dzLaWvngtQ.png 400w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/8ff1e/1*HrFZV7pKPcc5dzLaWvngtQ.png 800w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/6ff5e/1*HrFZV7pKPcc5dzLaWvngtQ.png 1200w,
/blogs/static/3fc5856380fb326d45c3303623ce7207/2f950/1*HrFZV7pKPcc5dzLaWvngtQ.png 1600w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/3fc5856380fb326d45c3303623ce7207/8ff1e/1*HrFZV7pKPcc5dzLaWvngtQ.png&quot;
          alt=&quot;1 HrFZV7pKPcc5dzLaWvngtQ&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了最小我们的开销, 需要遍历数据集很多次. 这也是为什么你需要非常庞大的计算力.
使用梯度下降的方法来更新权重是&lt;strong&gt;全自动&lt;/strong&gt;的, 这也是深度学习的黑魔法.&lt;/p&gt;
&lt;p&gt;一旦我们训练好我们的 AI, 就能用来预测未来的机票价格了.&lt;/p&gt;
&lt;h2 id=&quot;在哪可以学到更多&quot;&gt;&lt;a href=&quot;#%E5%9C%A8%E5%93%AA%E5%8F%AF%E4%BB%A5%E5%AD%A6%E5%88%B0%E6%9B%B4%E5%A4%9A&quot; aria-label=&quot;在哪可以学到更多 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;在哪可以学到更多&lt;/h2&gt;
&lt;p&gt;还有很多其他类型的神经网络: 计算机视觉使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolutional_neural_network&quot;&gt;卷积神经网络&lt;/a&gt;, 自然语言处理使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Recurrent_neural_network&quot;&gt;递归神经网络&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;如果你想学习深度学习, 我建议还是去找在线课程.
当前最好的课程之一就是吴恩达的&lt;a href=&quot;https://www.coursera.org/specializations/deep-learning&quot;&gt;深度学习标准&lt;/a&gt;. 如果你对证书没兴趣的话, 可以不需要为这门课程付费. 你可以免费旁听.&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot; aria-label=&quot;总结 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;深度学习使用神经网络来模仿动物的智能&lt;/li&gt;
&lt;li&gt;神经网络有三种层: 输入层(Input Layer), 隐藏层(Hidden Layer) 和 输出层(Output Layer)&lt;/li&gt;
&lt;li&gt;神经元之间通过权重连接, 展现了输入数据的重要程度.&lt;/li&gt;
&lt;li&gt;神经元使用对数据使用激励函数来标准化输出&lt;/li&gt;
&lt;li&gt;为了训练神经网络, 你需要大量的数据&lt;/li&gt;
&lt;li&gt;遍历数据并且比较, 会有一个开销函数. 它表明了当前 AI 离可以用还差多远&lt;/li&gt;
&lt;li&gt;每次遍历数据后, 通过梯度下降来降低开销, 以调整神经元之间的权重&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[我进入编程世界的第一步（翻译）]]></title><description><![CDATA[原文, 需要翻墙 作为一个刚毕业的计算机科学学生，在课堂上学到的东西和你在真实世界看到的东西会存在 断层 。各种循环操作：  不在话下。你可以不费吹灰之力写一个基于命令行的井字棋(Tic-Tac-Toe)游戏. 你还可以在 X8…]]></description><link>https://github.com/thoamsy/blogs.git/first-step-software-world/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/first-step-software-world/</guid><pubDate>Tue, 16 Jan 2018 07:28:39 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.org/my-first-steps-into-the-world-of-software-development-and-what-they-taught-me-6ee748cffb8f&quot;&gt;原文, 需要翻墙&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/3725ce2ac53789957ff83556bc0368b6/0309e/1*xNwbQ2Ec0xoq_DMPbxR5yw.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 56.25%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;225\&apos;%3e%3cpath d=\&apos;M38 6l-2 25c0 16-2 25-4 25l-5 3c-7 5-12 4-14-2a276 276 0 0 0-5-19L4 27c-3-7-3-6 2-11 5-6 2-11-4-8-2 0-2 11-2 109v108h209v-7l-1-16c-1-11 1-27 3-27 3 0 3 12 2 19-2 7-2 15 1 27v4h187V120L400 7V0h-18v3c-1 4-4 4-5 0l-1-3h-12c-12 0-13 0-13 2l-2 4c-1 2-1 2 1 4 3 3 4 9 4 20 0 18 0 19-3 24-3 4-3 4-2 6 4 4 3 15-2 15-2 0-3 1-4 9-1 5-2 6-4 6l-4 1c-3 3-6-2-5-9 1-5 3-6 5-4 2 1 2 1 2-3v-4l-2 2c-2 2-4 2-9 2-6 0-8-1-10-6-1-1-2-3-4-3-4-2-5-4-5-18-1-13-3-16-9-13-4 2-5 6-3 16 1 10 1 13-4 16-6 3-11 2-11-3-1-3-1-4-4-3l-10-3c-10-5-22-6-32-1-11 6-17 15-17 25l-1 3-1-8 1-8-6-2c-7-1-11-5-11-10l-2-7-1-8c0-3 0-4-2-4-2-1-6 1-6 3h-1l-3 1c-1 3-2-9-2-28s-1-17-1 4a423 423 0 0 1-3 38c0 6-4 12-6 8-2-3-3-19-3-40V0h-21l-22 1h-2L80 0H38v6m4 9a346 346 0 0 1-4 29c0 5 0 5 7 10l4 7c3 5 4 5 12 4 10-2 12-7 3-11-4-3-7-7-7-12 0-4-1-7-6-8-1 0-2-1-1-5 1-9-5-19-8-14m116 7c-2 2-2 3-1 5v9l-1 8 3 2c6 5 6 4 5-12 0-8-1-12-2-14-2-3-2-3-4 2m222 32l-1 1-2 3c-1 1-1 6 1 9 1 1 5 0 5-1 0-2 3-4 6-4 2 0 3-2 1-6-1-3-6-4-10-2M54 79c-2 1-3 6-1 13l1 13c2 11 6 16 12 12l7-2c6-1 7-2 8-10 3-15-1-23-9-23l-10-2-6-2-2 1m168 9l-1 7-3 8-1 4c0 4 2 2 2-2l1 4 3 8c2 2 1 3-1 3-3-1-7 0-7 2s3 2 9 1c5-2 11-1 8 0l-1 3c0 2 0 2-6 2-7-1-9 0-9 4 0 2-1 3-4 4-6 2-14 13-17 23-1 4-1 4 1 6l2 4c0 3 1 4 11 4h5c0-1 12-10 13-9l1 4c-1 3 0 2 3-4 5-10 5-11 1-14l-2-2c1-1 0-3-1-5l-1-2-1 1c-1-1-1 0-1 2 0 4 0 4-3 3s-3-1-2-6c2-9 3-10 10-10l5-1 4-1c9 0 8-4-1-5-4-1-4-1-3-3l8-3c6-1 7-2 1-2-6 1-11-1-13-4-2-4-3-4 20-9 2 0 3-1 2-4 0-4-2-6-8-7l-4-2h-8l-4 1c-3 0-3 0-2-1 2-2 2-2 0-2h-6m90 5c-2 1-4 6-3 10 2 7 6 8 8 1 2-6-1-13-5-11m-162 3c-2 2-2 2-1 6l1 4h11V94h-5l-6 2m167 91c0 2-1 3-2 1-2-2-5-2-6 1l-1 2-2-3c-3-3-4-3-4 1 1 2 0 3-1 4-3 2-3 3 0 2 3-2 5-1 3 0l-2 3c1 1 0 2-1 2-6 1-2 17 3 17s6-2 5-7v-6l4-1 14-2c2 0 0-7-2-10-1-2-3-2-4-2-2 0-3-1-3-2-1-2-1-2-1 0\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/3725ce2ac53789957ff83556bc0368b6/f2fbe/1*xNwbQ2Ec0xoq_DMPbxR5yw.webp 200w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/e227a/1*xNwbQ2Ec0xoq_DMPbxR5yw.webp 400w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/0cbce/1*xNwbQ2Ec0xoq_DMPbxR5yw.webp 800w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/6bc95/1*xNwbQ2Ec0xoq_DMPbxR5yw.webp 1200w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/a1c21/1*xNwbQ2Ec0xoq_DMPbxR5yw.webp 1280w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/3725ce2ac53789957ff83556bc0368b6/9ec3c/1*xNwbQ2Ec0xoq_DMPbxR5yw.png 200w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/c7805/1*xNwbQ2Ec0xoq_DMPbxR5yw.png 400w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/8ff1e/1*xNwbQ2Ec0xoq_DMPbxR5yw.png 800w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/6ff5e/1*xNwbQ2Ec0xoq_DMPbxR5yw.png 1200w,
/blogs/static/3725ce2ac53789957ff83556bc0368b6/0309e/1*xNwbQ2Ec0xoq_DMPbxR5yw.png 1280w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/3725ce2ac53789957ff83556bc0368b6/8ff1e/1*xNwbQ2Ec0xoq_DMPbxR5yw.png&quot;
          alt=&quot;Nervous laugh&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作为一个刚毕业的计算机科学学生，在课堂上学到的东西和你在真实世界看到的东西会存在&lt;strong&gt;断层&lt;/strong&gt;。各种循环操作：&lt;code class=&quot;language-text&quot;&gt;for, while, do while&lt;/code&gt; 不在话下。你可以不费吹灰之力写一个基于命令行的井字棋(Tic-Tac-Toe)游戏. 你还可以在 X86 上直接写汇编代码!&lt;/p&gt;
&lt;p&gt;但是, 你对于 Facebook, YouTube 或者 Reddit(美国最知名的论坛) 是怎么工作的完全没有头绪. 你甚至连怎么开始都不知道. 因为你只知道一门 Python 语言, 当你 Google &lt;em&gt;哪些公司用 Python&lt;/em&gt; 的时候, 你发现一些人说的: &lt;em&gt;“Reddit…use python for their backend.”&lt;/em&gt; Backend(后端)? 这他妈是什么?&lt;/p&gt;
&lt;p&gt;这就是在用命令行写井字棋游戏和构建一个真实的应用程序中, 存在的巨大的空缺, 而且没人会告诉你该怎么填补这个空缺. 即使你已经学会了如何像计算机一样思考, 你还是不知道如何将你学会的东西, 用来构建一个你想构建的东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有主动才能让你成为你想成为的人. 不会总是有老师或者教授, 将他的模板和样例给你, 而你只需要填补这些空白. 也不总是有一个课程会教你 “下一步你该学什么”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;takeaway-1&quot;&gt;&lt;a href=&quot;#takeaway-1&quot; aria-label=&quot;takeaway 1 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Takeaway #1:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;没有人比你更能影响你自己&lt;/strong&gt;.
你想学什么取决于你, 而不是有人拿着勺子一点一点的喂着你下一步该学什么, 应该自主学习, &lt;a href=&quot;https://danluu.com/learning-to-program/&quot;&gt;Dan Luu 称这个为 meta-skill&lt;/a&gt;, 这也是你在决定成为一个软件工程师之后最重要的技能之一.&lt;/p&gt;
&lt;p&gt;幸运的是, Google 可以帮助我们! 当你搜索 &lt;em&gt;How to build a website using python&lt;/em&gt;, 你找到了这个—&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/&quot;&gt;一个精巧的小型 Web 框架&lt;/a&gt;, 于是你打算一探究竟. 即使你还不知道什么是框架(framework). 你尝试去阅读初学者文档, 但是不知道什么是 &lt;strong&gt;database abstraction layer(数据库抽象层)&lt;/strong&gt;, 于是你跳过这个直接找到了&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/installation/&quot;&gt;安装那一步&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;最后, 你发现了那些可以自己操作的步骤 🎉! 你复制这些命令到你的终端中(terminal). 这里出现了叫做 &lt;code class=&quot;language-text&quot;&gt;pip&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;virtualenv&lt;/code&gt; 的东东, 管它呢, 先复制. 你花了几分钟观察到了输入这些后会发生什么, 你也终于对你的机器是怎么工作的有了一个大概的认识.&lt;/p&gt;
&lt;h2 id=&quot;takeaway-2&quot;&gt;&lt;a href=&quot;#takeaway-2&quot; aria-label=&quot;takeaway 2 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;takeaway #2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;我们通过理解学习, 而不是无脑的跟着教程.&lt;/strong&gt; 当碰到你完全不理解的东西的时候, 尝试去学习而不是放弃, 这样你将会发现这些看上去不可能完成任务是一个能让你快速成长的绝佳机会—只不过你可能要花很长时间解决它罢了 🌚&lt;/p&gt;
&lt;p&gt;Okay, 现在看上去 &lt;code class=&quot;language-text&quot;&gt;pip&lt;/code&gt; 好像是一个用来安装 &lt;code class=&quot;language-text&quot;&gt;packages(包)&lt;/code&gt; 的工具, 这样你就可以 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;(Python 通过这条语句导入外部函数) 它们. &lt;code class=&quot;language-text&quot;&gt;virtualenv&lt;/code&gt; 看上去好像是一个关联你安装好的包和指定项目的方式. 你现在除了 &lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;mkdir&lt;/code&gt; 外, 其他的命令行你一个都看不懂, 但是至少不再是&lt;strong&gt;一无所知&lt;/strong&gt;. 到了去往&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/quickstart/&quot;&gt;快速指导&lt;/a&gt;的时间了.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/0a68018bffc8ae99d678c36d6c218803/95139/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 65.30014641288433%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;261\&apos;%3e%3cpath d=\&apos;M0 131v130h94a422 422 0 0 0 101-4v-3l3-6c5-6 10-13 10-16l2-2 1-3c0-2 0-2-2-1-5 1-3-2 2-5 6-4 9-4 4 0-4 3-4 5 0 2l11-4-4 5c-4 4-7 8-5 8l6-6c1-2 1-2 1 0s1 1 2-2c1-5 2-6 4-3v1l1 2c3 2 3 2 2 3v2c2 1 3 3 0 3l1 2 2 3v4c-1 0-2 1-1 2l-1 2v4l1 2v5l2 3c0 2 1 2 10 2l10-1-4-10-6-19c-5-14-9-21-12-24-7-5-14-16-14-21l-1-2-1-2 4 3 5 6 2 2 1-2c1-2 2-2 3-2h4c1-2 1-2-6-4-2-1-8-10-8-11h-2l-3-1h-1l-4 2c-3 2-4 2-10 1l-6-1c-1 0 3 3 7 4s4 2 4 5c1 3 0 4-1 4-2 0-2 0-1 2v1l-1 1c1 4 0 6-2 6v1l2 1h1c2-1 5 0 5 1h1c1-2 1-2 1 0l-1 2-1 1c1 2-3 2-23 2l-25 1-18 7a1334 1334 0 0 0-68 25c-2-1-25-59-23-61l5-3h5c1 2 2 1 11-2a6535 6535 0 0 1 56-23c0-2 1-3 5-4l5-3-20-36c-1-1-2-1-7 1l-6 2V84l2-27h18a7505 7505 0 0 0 40 1c1 0 3 0 4 2l2 1 1 1 1 1c2-2 4 1 4 8v12l1-3 1-3V65l3 1 4 2c4 0 7 1 7 3 1 3 6 2 7-1s1-3-1-3c-1 0-2 0-1-1h-2l-3-1-2-2h-3c-2-1-9-10-8-11l1-6c-2-7-2-20-1-21 2-2 5 2 5 7v4l4-2c3-2 5-2 7-1 3 1 3 1-1 1-8 0-11 3-11 12l2 8v3l1 1 1-1h2v1c-2 0-1 1 2 2l5 3 6-6 6-6v-7c1-7 0-13-2-12v9c0 5 0 7-1 6l-1-3c-2 0-3-4-4-17V16l4-3c6-6 11-1 10 9l3 19-2 8-2 8 63 1h19l2 5 3 4-4-9c-3-6-4-8-3-9 2-1-2-2-11-4-10-2-9 0-5-23s3-21 9-20l5-1c1-1-38-1-147-1H0v131M352 1a328 328 0 0 1-24 2l5 1c1 1-3 2-6 2h-2c1 3 42 1 58-3 5-1 4-2-3-2h-28m-89 6l-6 16a2637 2637 0 0 0-9 23l2-2 1-1v-1c-2 0 0-2 3-2 2 0 2 0 0-1l-2-2 1-2h2l2-1c-1-1 0-3 1-4v-2c-1-1 4-11 5-11l1-2c-1-1-1-1 0 0l1-1c-1-1 0-2 1-3V9l-1-2h-2m81 11c-4 0-5 1-3 2v1h-4v3l1-1 2-1c2 0 1 2-2 3-2 0-3 1-2 2h11l10-1-4-1c-3 0-3 0-2-1s0-1-3-1h-5l2-1 4-1 6-2h5l-4 1-3 1h3c5 0 8 2 3 2-3 0-3 0-1 1h2l3 1 4 2c2 0 3 1 1 2-1 1 0 1 2 1h2l-4 1h-2l24-1c1-1 0-1-2-1-3 0-3 0-2-1 3-2 1-3-5-3h-4l3-1c3 0 4 0 3-1v-1l2 1 1 1c2-2-2-3-11-4-10 0-14-1-5-1l5-1h-31m-2 14c-4 0-4 2-1 2 2 0 2 0 1 1-2 0-2 0 0 4 5 8 5 8-6 14-10 4-11 5-9 6a528 528 0 0 0 1 23v9h-6l-12-4c-8-4-10-5-10-2l-2 1-5 3-5 4-2 4-1 3c-2 0-2 1 1 4l2 5c0 1 1 3 5 6l1 3 1 1h1c-1 1 0 1 1 1l4 1 4 2 3 1c0 1 2 0 6-4 6-6 7-6 7-3l1-1 2-3c3-2 3 1 2 42l-1 44v6h-9l-58 1 6 3 38 21c1 1-1 4-3 8l-8 15-4 8h56a425 425 0 0 0 55-2c2 1 2 1 1-2v-2l1-5v-3h-9l-10 1-2 1v-1l-4-1c-5 0-6-2-1-2h5l-5-1c-4-1-5-2-3-4l-3-1c-3 0-4-1-3-2h3l7-2c8 0 8-1 0-1l-5-1 4-2 7-1c3-1 3-1-4-1s-7 0-2-1l6-1v-1l1 1 1-1 4-1 7-2h1v5l-1 2-1 3-1 1c3 0 6 3 4 4-1 1-1 1 1 1h3v-12l-1-14v-3l1-17c0-15 0-17-2-17v-1c2 0 2-1 2-8v-8h-5l-5-1c-1-2-1-2 1-2l1 1c-1 1 1 1 3 1h5v-36l-3 1c-2 0-3 0-2-1l-3-1h-3c0-2 2-4 7-4 5-1 5-4 0-4l-3-1h3c3 0 4 0 4-2l-1-2h-4c-2 0-2 0 1-1l4-1V74l-1-31v-1c2 0 1-4-1-4l-4-1c-2-2-9-3-8-1l-2 1-3-1h-17l8-1 7-1-18 1h-10l-4-1 4-1c1-1-5-2-9-1m-41 56c0 1 2 4 5 6 4 4 6 7 3 6h-1l2 1c4 1 5 4 5 9v2l1-3v-2l2 2 3 1v1h3l2-1h1l1-9v-8h-3l-20-5c-4-2-4-2-4 0m-199 31c-4 1-4 2-2 2l2 1h1c2-2 5-1 6 1s-11 7-13 5v-5l1-1h-3l1 1c1 1 1 1-1 1h-5c-2 1-2 1 0 1s3 1 3 2l2 2c1 1 3 2 3 4 2 3 2 3-1 4l-3 2c0 1-1 2-3 2-4 0-4-1-7-4l-2-4-3 3c-3 2-5 3-5 1l-4-1-5-1c-2-2-2 0 0 3l2 4 2 1c1 1 1 1-1 2-5 1-7 1-3-1s0-1-6 1l-5 3 5 7 5 6-3 2c-7 3-10 4-7 4h4l-1 1c-2-1-3 0-1 2s5 1 5-2l2-1c5 1 7 0 6-1l2-2c1-1 2-1 1-2l-3 1c-2 1-3 0-3-2s1-2 3-2c1 1 2 0 2-1h-2c-2 0-2 0-2-3 0-2 0-3-2-3h-3c-1-1 3-4 5-4h4c3 2 2 4-1 4-2 0-2 0-1 1v3l1 1h4c2 0 2 0 1-1l-1-2c1 0 6 4 5 5l2 1 1 1v1c2 0 1-2-2-6-2-2-3-3-2-4v-1c-2 0-2 0-1-2v-1c-2 1-4-2-2-3s8 3 5 5v1c2 0 4-1 3-2h1l4-1c1-1 2-1 3 1l2 3-1-3c0-3 0-3 6-5 1 0 2 0 1-1l-1-2 1-1 1 2 1 1 1-1 1-1 1 1 1 2 2 1-1-2c-1-1 0-2 2-3l3-1-4 1c-3 0-3 0-5-4-4-6-4-5 3-8s7-2 10 4l5 8 2 3v-3l-1-3c-2 0-1-2 1-4 2-1 2-1 0-4l-2-2h4l1-1c3 0 4-2 3-4h-1l-3 1-2 2-3 1h-3c-2 2-3 0-1-2l2-3-2 1c-2 3-3 2-3 0l1-2v-1h-4c0-2 0-2-6 0m268 33c-1 1 0 1 1 1 3 0-1 3-6 4-3 1-5 2-5 4v3c-2 1-1 4 1 5l4 2 2 1c-3-4 0-16 4-15h1l4-3c2-1 3-1 2-2h-8m-237 2l-4 2-1 1h-3l-5 2-2 2 3 1h2l-3 1-2 1-3 1-3 1c0 1-1 2-2 1-2 0-2 0 1-2l4-1c1 0 3-3 2-4l-4 1-7 4-5 2h-2l-3 1-2 2c-4 0-10 3-10 4h-4l-4 2-3 1c-1 1-1 1 1 2 2 0 2 0 1 1h-3c0-2-4-2-5-1 0 1-1 2-2 1-2 0-4 1-3 3l1 3 1 3 1 1 3 10 4 9c0 2 2 3 4 1l3-2 9-3 1-1h4a558 558 0 0 1 52-21h2c2 0 5-3 3-4l-4 1c-1 1-2 1-2-1-1-2-1-2 2-2l2-2-4-9v-2c0-2 0-2-2-3l-1-1v-4c-2-4-2-4-8-2M23 199l-12 8c-1 1-1 1 1 4l2 3c0 2 17 24 19 27l3 2 12-9 13-9-4-6-12-16-10-12-12 8m351 2l2 2 1 5c0 3 1 5 3 5h3l1 2h1l2-1c1 0 1-3-1-5-2-1-3-1-2 1l-1 1-4-1-1-2 8-1h8l-3-3c-2-2-2-2-3-1h-1c-1-2-7-2-8-1h-3c-1-2-2-2-2-1M25 217c-2 3-2 6 1 8 4 4 10 1 10-4 0-7-7-9-11-4m178 37l-3 3c-1-1-3 2-2 3l13 1c8 0 13 0 12-1l-9-5-9-5-2 4\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/0a68018bffc8ae99d678c36d6c218803/f2fbe/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.webp 200w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/e227a/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.webp 400w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/0cbce/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.webp 800w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/6bc95/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.webp 1200w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/b38df/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.webp 1366w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/0a68018bffc8ae99d678c36d6c218803/9ec3c/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.png 200w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/c7805/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.png 400w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/8ff1e/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.png 800w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/6ff5e/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.png 1200w,
/blogs/static/0a68018bffc8ae99d678c36d6c218803/95139/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.png 1366w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/0a68018bffc8ae99d678c36d6c218803/8ff1e/41FC0083-5066-4AAE-8BFE-EC3432EF6AC8.png&quot;
          alt=&quot;Just follow along and try to keep up.&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你跟着教程, 运行你的程序, 感觉当你的浏览器第一次出现了 &lt;strong&gt;Hello, World&lt;/strong&gt; 的时候, 你的心中会涌入一种爽到吸大麻的. 你对自己说, 这就我想要的哈哈! 滚吧, 傻逼命令行! 这确实是一小步, 但那是你第一次让浏览器听你的话, 这才是历史性的一刻.&lt;/p&gt;
&lt;p&gt;你继续, 又出现了一大堆你不理解的概念. Routes(路由)? HTTP? GET? POST? 什么是 rendering template(渲染模板)? 这些概念听上去好像有那么一点点印象, 但是你不确定到底是什么意思, 所以你停止你手头的工作去搜一下它们是什么. 就像你刚学会 &lt;code class=&quot;language-text&quot;&gt;pip&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;virtualenv&lt;/code&gt; 一样, 渐渐的你开始对你的程序怎么运行有了一个模糊的概念.&lt;/p&gt;
&lt;h2 id=&quot;takeaway-3&quot;&gt;&lt;a href=&quot;#takeaway-3&quot; aria-label=&quot;takeaway 3 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Takeaway #3&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;学习不断地练习.&lt;/strong&gt; 就像任何其他的技能, 它们是需要打磨的, 熟能生巧. 抓住每一个学习的机会. 记住: success begets success.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让学习成为一种习惯, 你的求知欲望应该和你的年龄身体一起成长&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以用模板来显示内容, 和其他的 HTML 和 CSS 页面一样, 只不过它们是动态的. 你可以通过定义不同的路由来控制在不同的 URL 下该显示什么. 你甚至可以用你自己的程序来抓取其他网站上的内容!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注: 当然现在是通过前端来渲染模板了, 后端仅在要求性能的时候服务器渲染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随着你渐渐地变得更加轻松, 你开始对独立学习有一种控制感和自豪感. 这可能是你在完成课堂任务的时候从未体验过的(不敢想象国外的教育 🙂). 你开始飘起来, 谁还需要学校, ╭(╯^╰)╮?&lt;/p&gt;
&lt;p&gt;随着你获得自信, 这个指导开始看上去有点…基础了. 确实, 毕竟, 这只是一个 quick start… “我可以做更酷 😎 的事情”, 你想着.&lt;/p&gt;
&lt;p&gt;于是你开始自己搞定这些. 你想之前做的一样, 用 &lt;code class=&quot;language-text&quot;&gt;pip&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;virtualenv&lt;/code&gt; 设置你的项目, 因为那是你仅仅知道的方式. 你知道如何设置模板; 你知道如何设置路由, HTTP 请求, 什么是 GET 什么是 POST. 你可能开始尝试使用第三方 API, 并且开始阅读更多的文档. 你并不是什么都懂, 但是你正在学习. 一点一点的.&lt;/p&gt;
&lt;p&gt;最后, 你终于构建了你自己的第一个独立的项目 🎉. 不是那个已经有很多年轻的开发者跟着教程走的项目, 也不是很多学生在课堂上做的项目. 而是一个, 真实的, 可以感知到的, &lt;em&gt;honest-to-goodness&lt;/em&gt; 的程序, 在你构建之前, 它从未存在过. &lt;strong&gt;这是一中超凡的感觉!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/a987b/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 41.66666666666667%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;167\&apos;%3e%3cpath d=\&apos;M0 17v18l3-1c10-1 14 7 5 10-4 1-4 1-1 1l5 3c0 1-4 1-10-1H0v120h131a1317 1317 0 0 0 154-2c5-3 6-4 1-4l-3-2 1-1 3-1 2-2c2 0 2 0 1-1v-3l-2-3c-1-1-1-1 1-1s2 0 1-1c-2-1-4-3-3-5 0-1 4-1 9 1l4 2-3 1-4 1c-2 1 1 3 4 3 2 0 4 3 2 5-1 1-1 1 1 2 3 1 9 7 7 8v2l47 1h47v-61c0-39-1-50-1-31v29h-7l-8-1h-1c0 1-7 1-15-2a26 26 0 0 0-13 0v5c1 0 1 4-1 8v4l-1 1-1-4v-3l-2 3c-2 4-6 5-11 2-2-1-2-1-4 2s-3 4-1 4l1-1h2c2 3 5 2 6 0 2-3 3-3 3 0-1 3-7 7-10 5-1-1-1-1-1 1l4 3c4 2 5 1 4-2 0-2 2-3 4-2l1 2h-1l-2 1 1 1 1 3c-1 2 0 4 1 5 5 4-2 1-18-6-24-12-35-16-36-16l-1 4c-1 3-3 4-6 2h-3c-4 5-6 5-11 1l-6-3-2 1 1 1-1 1-2 1-1 1-7 1c-4 2-8 3-9 2h-2v3l-1 3c0 2-1 1-3-1l-2-4c-1-3-3-4-3-1l-1 2-1-4-1-4-1 1c1 2-3 3-4 2v-4l-1-3c-1 0-2-1-2-3 0-3-1-4-5-4l-5-2-3 1h-2c-1-3-5-2-7 0-1 3 0 8 1 6h1v2l1 3 1 2 1 2-8 20c-1 2-11-16-11-20l-3-5c-4-3-5-6-3-6v-2l-2-3-1-2-3-5-5-5-2-1h2v-1c-1-3 2-2 5 1l3 2 3-2 3-2-2-1c-2 0-3-1-3-2 0-2 7-4 8-3l2 1c1 1 1 1-1 1h-2l2 2 3 1 1 2c-1 1 0 2 1 3v4h2l2-1c2 1 2-5 0-6l-1-2c0-2-2 0-2 2s0 2-1 0c-2-9-5-13-7-14h-4c-1 2-3-7-2-9v-2l-1 1c-1 1-1 0-1-3 1-5-1-8-3-4l-1 1h-2l-3-2c-1-3-4-4-6-2-1 1-1 1-1-1l-1-4-1-2c0-1-2-1-6 1l-1-2-2-3c-1-2-1-2 1-4s3-2 5-1c1 2 2 2 2-2l1-5c1 0-1-3-5-6l-6-5v-5c0-7-1-10-2-4l-1 5v-5c0-4 0-5-2-5s-2 1-2 4 0 3-1 2l-2-3-2-4-2-3-2-2c-2 0-2 0-2-4l1-4h-6c-6 0-7 0-7 2h-1c0-2-4-2-60-2H0v17m61 16c-2 5-2 6 3 6s8 2 6 4c-1 2-5 2-7 0-1-2-5-2-5-1 0 6 13 9 17 3 3-4-2-10-8-10-1 0-2 0-1-1h5c7 1 7-2 0-4l-6-2-4 5m18 2c-3 4-3 11 0 14 4 4 14 2 14-4 0-2-5-6-7-6-3 0-4-2-1-3l3 1c3 3 6 2 4-1s-9-4-13-1m-63 5c-3 3-2 8 0 10 6 3 13 0 10-5v-2c3 0 2-2 0-3-3-3-8-2-10 0m94 3c-6 4-7 8-2 8 2 0 3 1 4 3s4 3 4 1c0-3 3-2 5 1 3 3 8 3 10 0 3-3 1-7-3-8-4-2-4-3 0-3 5 1 6-1 3-2-6-2-8-2-9 1-2 4-1 6 3 6l4 2c0 3-3 4-5 2l-3-2c-3 0-4-3-4-7 1-6-1-7-7-2m-80 0c-1 4 0 5 3 4l3 1c2 3-2 4-5 2-2-2-3-2-3-1 0 4 7 6 11 4l2-1c0 4 9 5 11 3 1-3 1-9-1-10h-8c-1 2 1 3 3 2h3c1 1 1 1-1 2-2 0-3 1 0 3v2l-4-1-2-2-2-3-4-3-2-1h7c0-1 0-2-5-3-4-1-4-1-6 2m179 4c-1 1-1 1 2 1s4 1 2 2h-2c-1-1-1-1-2 1l1 2 1 3c-2 1-4 0-3-3 0-1 0-2-1-1l-2-2c-1-2-1-2-3-1-2 2-1 5 3 8l3 4 1 1 6-2 4-2c0-2-2-5-3-4l-1-1 1-1v-3c0-3-4-4-7-2m9 3l1 1 1 2c-1 4 0 5 3 5s2 2-3 2c-7 2-12 4-11 6l1 4c1 5 3 7 6 6l2-2 3-3c4 0 4 0 4-5l1-4 4 5c4 6 6 7 8 2 2-2 2-2 0-5-4-6-7-9-9-8l-2-2c-1-1-2-2-3-1l-1-2-2-2-3 1M67 71l-5 5c-2 4-2 4-2 14 1 11 1 10 2 10v-4c0-4 2-8 5-9 3-2 6-8 6-10l-3-2c-2 0-2-1-1-3 2-1 1-2-2-1m110 5l-2 4c0 2-1 2-4 1-4-1-13 0-14 2v1l2-1h1c0 2 2 3 2 1h1l3 1h1c0 1 4 2 5 0h5l2-4v-4l-1-3-1 2m-14 23c-4 2-3 3 4 17l6 14-2 3c-2 5-2 5 0 5l2 1c0 2 2 1 3-1 0-2 1-1 4 6 4 7 8 11 7 6v-1l2-1h-1l-1-2c2-4 2-5 0-2-3 4-3 4-8-8-4-6-5-9-4-11l-1-2c-1 1-2-1-4-4-3-5-3-6-1-7 2-3 2-4-1-2-2 2-2 2-4-2-1-4-1-4 1-5l3-2c2 0 1-2-1-3l-4 1m24 4c-2 2-2 4 0 4 1 1 1 1-1 1-3 0-2 2 2 2 3 1 3 1 3 5 0 2 1 4 3 5 1 1 1 1-1 1h-2c-1 1 0 1 1 1l3 2h1l2-1c1 0 1-2-1-6v-3l-3-3c-2-2-3-3-2-4 1 0 1-1-1-2v-3l-1-1-3 2\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/f2fbe/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.webp 200w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/e227a/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.webp 400w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/0cbce/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.webp 800w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/6bc95/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.webp 1200w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/ded3f/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.webp 1600w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/34ef4/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.webp 1920w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/9ec3c/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png 200w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/c7805/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png 400w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/8ff1e/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png 800w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/6ff5e/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png 1200w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/2f950/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png 1600w,
/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/a987b/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png 1920w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/c16ff7fb3d74162cf7ee97cd9ce8ca0f/8ff1e/5498D1B1-A326-4044-9362-F2B1BA3A7BAE.png&quot;
          alt=&quot;You are a master builder.&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以接下来呢? 现在你做好了一个应用, 怎样才能让每个人都能用到它? 到底什么是 &lt;code class=&quot;language-text&quot;&gt;back-end&lt;/code&gt;, 什么是 &lt;code class=&quot;language-text&quot;&gt;front-end&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;这是一个很好的机会，用来培养学习的渴望: 总是有更多的东西.
有点像一个十分棒的电视节目, 你从来都觉得看都不够爽, 更重要的是: &lt;strong&gt;它从来不会结束!&lt;/strong&gt; 显然, 除了不断地学习就没有其他东西能像这样了. 软件开放的每一个分支, 都是一个需要深入的全新的世界, 而且你学的更多, 就会有更多的世界为你开放.&lt;/p&gt;
&lt;p&gt;你应该意识到, 没有一个所谓的权威的方式来让你成为一个 “real” 开发者. 也没有足够的时间去精通每一个方面. 每个人成功的道路和方式都是不同的. &lt;strong&gt;你如何修出一条到达你想到达的地方, 那完全取决于你自己.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;这就是我第一次踏入软件开发世界的故事. 如果你还想看我第一次到底做了什么, &lt;a href=&quot;https://github.com/thetimothyp/Where2Eat&quot;&gt;你可以查看这个.&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Element 和 Component 的区别]]></title><description><![CDATA[本文的出现离不开 Dan 的一篇卓越的 blog。
 原文章 一句话概括就是，  是   的返回值.
Element 其实就是一个纯对象，这个对象定义了一些对于 React 来说很重要的属性.
比如   这些的。举个实际的例子 上面的 type 就是这个 Element…]]></description><link>https://github.com/thoamsy/blogs.git/react-component-and-element/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/react-component-and-element/</guid><pubDate>Sun, 14 Jan 2018 12:12:00 GMT</pubDate><content:encoded>&lt;p&gt;本文的出现离不开 Dan 的一篇卓越的 blog。
&lt;a href=&quot;https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一句话概括就是，&lt;code class=&quot;language-text&quot;&gt;Element&lt;/code&gt; 是 &lt;code class=&quot;language-text&quot;&gt;Component&lt;/code&gt; 的返回值.
Element 其实就是一个纯对象，这个对象定义了一些对于 React 来说很重要的属性.
比如 &lt;code class=&quot;language-text&quot;&gt;type，children，props，key，type&lt;/code&gt; 这些的。举个实际的例子&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	$$&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;react&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	ref&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;button button-blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;OK!&apos;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的 type 就是这个 Element 的核心之一。React 通过判断 type 是字符串还是函数来决定如何构造并 &lt;code class=&quot;language-text&quot;&gt;mount&lt;/code&gt; 这个 Element。如果是字符串就说明是普通 DOM，称为 &lt;code class=&quot;language-text&quot;&gt;DOM Component&lt;/code&gt;，如果是 &lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt; 就是自己定义的，称为 &lt;code class=&quot;language-text&quot;&gt;CompositeComponent&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;创建组件的常用方法有两种，一种是纯函数组件，或者说 &lt;code class=&quot;language-text&quot;&gt;stateless Component&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; text &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; background&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; color &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这种方式创建, 它的返回值就是定义了一个 Element。直接使用 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Button {...props} /&amp;gt;&lt;/code&gt; 就能得到我们定义的 Element。不过这仅仅是因为 JSX 给了我们一种语法糖，如果没有 JSX 的话，应该类似于&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; style&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; background&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; color &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而这个函数的作用也仅仅只是生成一个&lt;strong&gt;对象而已&lt;/strong&gt;，就像最上面那个对象一样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		style&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; background&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; color &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		children&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			…
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是 Element 的真面目了。所以可以看到，JSX 也好，&lt;code class=&quot;language-text&quot;&gt;createElement&lt;/code&gt; 也好，不过是提供一种抽象帮我们不要写这个无聊的对象定义，要知道，如果再多几个 children 的话，整个对象定义应该就有几十行(当然，这个对象还会有其他作用，这里不展开)&lt;/p&gt;
&lt;p&gt;同样的，如果换成 &lt;code class=&quot;language-text&quot;&gt;Stateful Component&lt;/code&gt; 的话，其实模式差不多。只不过，它们需要一个 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 方法，并且拥有一个被称为 &lt;code class=&quot;language-text&quot;&gt;instance&lt;/code&gt; 的变量。render 的目的就是定义一个 Element，而 instance 就是 在 render 中使用的 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;所以，一个 Element 出现的步骤此时是，&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; instance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// type 就是该组件的 type&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// render 不就是 React.Component.prototype 的方法吗&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;综上所述，我们最常写的是 Component，Component 分为三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;host（常见 DOM 节点）&lt;/li&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;host 类型，React 会根据对应 type，生成真正的 DOM node，并将它所带的 props 写入 node 的 &lt;code class=&quot;language-text&quot;&gt;attribute&lt;/code&gt; 中，而对 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; 继续递归，直到碰到没有 children 的 host Element 为止。&lt;/p&gt;
&lt;p&gt;Function 的返回值是 Element, class 的 render 函数的返回值是 Element&lt;/p&gt;
&lt;p&gt;不过这里还有一个问题，function 和 class 的 &lt;code class=&quot;language-text&quot;&gt;typeof&lt;/code&gt; 都是 &lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt;，这两个是怎么判断的呢？因为 class 定义的组件，继承于 &lt;code class=&quot;language-text&quot;&gt;React.Component&lt;/code&gt;，它拥有一个特定属性，只需要检测是否拥有这个属性就能确定是 class 还是 function。&lt;/p&gt;
&lt;h2 id=&quot;一个常见问题&quot;&gt;&lt;a href=&quot;#%E4%B8%80%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&quot; aria-label=&quot;一个常见问题 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;一个常见问题&lt;/h2&gt;
&lt;p&gt;假设有下面的两个变量&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Wow&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个的区别是什么呢？刚开始很容易写出这样的代码&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
	);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是如果真这样写的话，铁定是会报错的。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/9515e6ae68bc85573af4f70969701083/8b41d/96FFC213-7B8B-46A4-817B-2F13D2342247.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 11.829268292682926%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;47\&apos;/%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/9515e6ae68bc85573af4f70969701083/f2fbe/96FFC213-7B8B-46A4-817B-2F13D2342247.webp 200w,
/blogs/static/9515e6ae68bc85573af4f70969701083/e227a/96FFC213-7B8B-46A4-817B-2F13D2342247.webp 400w,
/blogs/static/9515e6ae68bc85573af4f70969701083/0cbce/96FFC213-7B8B-46A4-817B-2F13D2342247.webp 800w,
/blogs/static/9515e6ae68bc85573af4f70969701083/6bc95/96FFC213-7B8B-46A4-817B-2F13D2342247.webp 1200w,
/blogs/static/9515e6ae68bc85573af4f70969701083/ded3f/96FFC213-7B8B-46A4-817B-2F13D2342247.webp 1600w,
/blogs/static/9515e6ae68bc85573af4f70969701083/f9f5c/96FFC213-7B8B-46A4-817B-2F13D2342247.webp 1640w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/9515e6ae68bc85573af4f70969701083/9ec3c/96FFC213-7B8B-46A4-817B-2F13D2342247.png 200w,
/blogs/static/9515e6ae68bc85573af4f70969701083/c7805/96FFC213-7B8B-46A4-817B-2F13D2342247.png 400w,
/blogs/static/9515e6ae68bc85573af4f70969701083/8ff1e/96FFC213-7B8B-46A4-817B-2F13D2342247.png 800w,
/blogs/static/9515e6ae68bc85573af4f70969701083/6ff5e/96FFC213-7B8B-46A4-817B-2F13D2342247.png 1200w,
/blogs/static/9515e6ae68bc85573af4f70969701083/2f950/96FFC213-7B8B-46A4-817B-2F13D2342247.png 1600w,
/blogs/static/9515e6ae68bc85573af4f70969701083/8b41d/96FFC213-7B8B-46A4-817B-2F13D2342247.png 1640w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/9515e6ae68bc85573af4f70969701083/8ff1e/96FFC213-7B8B-46A4-817B-2F13D2342247.png&quot;
          alt=&quot;96FFC213 7B8B 46A4 817B 2F13D2342247&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
于是我又发现可以这样写&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么为什么上面一种可以下面不可呢？&lt;/p&gt;
&lt;p&gt;首先，分析一下上面报错的原因，根据上面说的，我们知道，&lt;code class=&quot;language-text&quot;&gt;&amp;lt;E /&amp;gt;&lt;/code&gt; 就是一个语法糖，也就是 &lt;code class=&quot;language-text&quot;&gt;React.createElement(type, props, children)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 type 就是 E。那么，根据我们的定义 E 也是一个 &lt;code class=&quot;language-text&quot;&gt;React.createElement(&amp;#39;p&amp;#39;, {}, &amp;#39;123&amp;#39;)&lt;/code&gt; 这样的表达式，其实就是一个对象。显然这个时候 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;E/&amp;gt;&lt;/code&gt; 得到的值，其实是一个对象！！ 而 React 内部是通过 type 属于 string 来确定这是 host Element，type 属于 function/class 来判断这是一个组件。因为此时 type 是一个对象，自然就会报错。&lt;/p&gt;
&lt;p&gt;而，&lt;code class=&quot;language-text&quot;&gt;{E}&lt;/code&gt; 为什么可以呢？还记得我们最常在 &lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt; 中写什么吗？&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;names&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里表达式最后就是一个 &lt;code class=&quot;language-text&quot;&gt;Array of Element&lt;/code&gt;，显然这样是合法。所以，总结过来可以发现一个规律，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;A /&amp;gt;&lt;/code&gt; 整个表达式是一个 Element，而 A 是一个 Component， Component 要么是 function（class 也是 function），要么是纯 DOM&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[反转字符串]]></title><description><![CDATA[这个问题可能非常老，写过代码的都知道使用 但是，需要注意的是，因为 JS 默认使用的是 UCS-2 来编码的，对于中文支持也貌似没问题。可是到了 Unicode 环境下，大量的 emoji，就会出问题咯。
 
就像上面显示的这样。那改怎么解决呢？在 ES…]]></description><link>https://github.com/thoamsy/blogs.git/反转字符串/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/反转字符串/</guid><pubDate>Fri, 12 Jan 2018 23:33:00 GMT</pubDate><content:encoded>&lt;p&gt;这个问题可能非常老，写过代码的都知道使用&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;str
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，需要注意的是，因为 JS 默认使用的是 UCS-2 来编码的，对于中文支持也貌似没问题。可是到了 Unicode 环境下，大量的 emoji，就会出问题咯。
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/4d3f1/A20289F2-4515-4E5E-9C91-1BF74DF84328.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 10.35294117647059%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;41\&apos;%3e%3cpath d=\&apos;M0 20v21h401V0H220A1280 1280 0 0 0 33 2l-1-2-1 2c-1 2-3 3-5 0-2-1-5-2-14-2H0v20m140-9c-3 2-2 6 0 8 4 4 10 1 10-4s-7-8-10-4\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/f2fbe/A20289F2-4515-4E5E-9C91-1BF74DF84328.webp 200w,
/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/e227a/A20289F2-4515-4E5E-9C91-1BF74DF84328.webp 400w,
/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/0cbce/A20289F2-4515-4E5E-9C91-1BF74DF84328.webp 800w,
/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/76d90/A20289F2-4515-4E5E-9C91-1BF74DF84328.webp 850w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/9ec3c/A20289F2-4515-4E5E-9C91-1BF74DF84328.png 200w,
/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/c7805/A20289F2-4515-4E5E-9C91-1BF74DF84328.png 400w,
/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/8ff1e/A20289F2-4515-4E5E-9C91-1BF74DF84328.png 800w,
/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/4d3f1/A20289F2-4515-4E5E-9C91-1BF74DF84328.png 850w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/51b4d8cf4e13a6267e5cf72a02662488/8ff1e/A20289F2-4515-4E5E-9C91-1BF74DF84328.png&quot;
          alt=&quot;A20289F2 4515 4E5E 9C91 1BF74DF84328&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
就像上面显示的这样。那改怎么解决呢？在 ES6 之前，可能需要通过对 Unicode 内部编码的了解来特别规定某个范围改做什么。但是 ES6 支持了 &lt;code class=&quot;language-text&quot;&gt;codePoint&lt;/code&gt;，我们就不要这种复杂的方式了！
&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/9e57d/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 12.520064205457466%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;50\&apos;%3e%3cpath d=\&apos;M0 15l1 16v2l-1 9v8h7l8-1h5l191 1h190V0H250A4325 4325 0 0 0 38 1c0-1-2-1-4 1h-8c-2-2-4-2-6 0h-7c-1-2-3-2-7-2H0v15\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/f2fbe/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.webp 200w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/e227a/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.webp 400w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/0cbce/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.webp 800w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/6bc95/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.webp 1200w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/40d4c/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.webp 1246w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/9ec3c/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.png 200w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/c7805/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.png 400w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/8ff1e/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.png 800w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/6ff5e/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.png 1200w,
/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/9e57d/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.png 1246w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/d6f147eaaf32b6c07bc00e9b8b362ce8/8ff1e/3C5A8FC8-2D99-4F4E-907C-89276B8A33BF.png&quot;
          alt=&quot;3C5A8FC8 2D99 4F4E 907C 89276B8A33BF&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单粗暴。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Parcel 📦 和 React ⚛️ 的使用]]></title><description><![CDATA[Parcel 这种工具虽然号称零配置, 但是在 React 相关开关的时候还需要一些必要的配置才能让整个代码真的跑起来. 特别是如果需要  Hot Reloader  的时候. 如果使用  create-react-app…]]></description><link>https://github.com/thoamsy/blogs.git/parcel/Parcel 📦 和 React ⚛️ 的使用/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/parcel/Parcel 📦 和 React ⚛️ 的使用/</guid><pubDate>Sun, 07 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Parcel 这种工具虽然号称零配置, 但是在 React 相关开关的时候还需要一些必要的配置才能让整个代码真的跑起来. 特别是如果需要 &lt;strong&gt;Hot Reloader&lt;/strong&gt; 的时候. 如果使用 &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;create-react-app&lt;/a&gt; 确实很方便, 这也是入门和新项目首选. 但是呢, 想上面提到的 &lt;code class=&quot;language-text&quot;&gt;hot reloader&lt;/code&gt; 默认是不支持的, 除非自己先 &lt;code class=&quot;language-text&quot;&gt;yarn eject&lt;/code&gt; &lt;strong&gt;弹射&lt;/strong&gt; 出去, 再手动配置 webpack 文件才行! 这个虽然文档上也有详细的记载, 但是感觉就没有那份纯粹性了.
所以使用 parcel 自己手动来配置的话, 更有一种成就感.&lt;/p&gt;
&lt;p&gt;Parcel 基本教程在之前的文章 [[Parcel 的使用]] 中有简单的介绍, 下面直接进入使用环节.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;babel-的基本配置&quot;&gt;&lt;a href=&quot;#babel-%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE&quot; aria-label=&quot;babel 的基本配置 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Babel 的基本配置&lt;/h2&gt;
&lt;h3 id=&quot;一些背景介绍&quot;&gt;&lt;a href=&quot;#%E4%B8%80%E4%BA%9B%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D&quot; aria-label=&quot;一些背景介绍 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;一些背景介绍&lt;/h3&gt;
&lt;p&gt;我们知道, React 和 Babel 是互相离不开的, 首先 &lt;code class=&quot;language-text&quot;&gt;JSX&lt;/code&gt; 需要 Babel 来转译, 比如&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;creataElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了这个, React 对新语法的依赖也蛮大的, 比如 &lt;code class=&quot;language-text&quot;&gt;Object Spread&lt;/code&gt; 语法, 这个在最新的浏览器和 Node 环境已经支持了, 但是还没有完全成为标准, 应该会在今年的 ES9 成为标准, 所以我们还是要依赖 Babel.
还有 React 组件中大量的 &lt;code class=&quot;language-text&quot;&gt;this.setState&lt;/code&gt;, 在 JS 中 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 很容易丢失, 所以我们需要依赖箭头函数, 但是在 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 大量使用箭头函数又不是一个好习惯, 一是每次 render 都会生成新的函数, 这又导致依赖这个函数作为 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; 的组件又一次被渲染.
一个妥协的方法是在 &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt; 中&lt;strong&gt;不厌其烦&lt;/strong&gt;的写 &lt;code class=&quot;language-text&quot;&gt;this.foo = this.foo.bind(this)&lt;/code&gt;
先解释一下这样可行的原因, 在 &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt; 中, 我们定义一个函数比如&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个 foo 其实是属于 &lt;code class=&quot;language-text&quot;&gt;A.prototype&lt;/code&gt; 的, 如果转译成 ES5 语法, 大概类似于&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	writeable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	configurable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	enumerable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以说, 等号右边的 &lt;code class=&quot;language-text&quot;&gt;this.foo&lt;/code&gt; 其实引用的是原型的 foo, 这个时候再赋值给 &lt;code class=&quot;language-text&quot;&gt;this.foo&lt;/code&gt; 其实是没毛病的, 因为这个时候才是赋给 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 自己.&lt;/p&gt;
&lt;p&gt;但是, 如果要我们写这个无聊的代码几百次的话, 就再也不想写了. 于是乎有一种新的语法, 英文似乎叫做 &lt;code class=&quot;language-text&quot;&gt;Class Properties&lt;/code&gt;, 支持直接使用 class 语法定义属性, 而不在属于 prototype. 这样就可以写出&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;的语法. 于是我们不仅干掉了, 无聊的 &lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt;, 还干掉了整个 &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;, 多酷!!!
还有一种语法, &lt;code class=&quot;language-text&quot;&gt;::&lt;/code&gt;, 这里不介绍.&lt;/p&gt;
&lt;h3 id=&quot;babelrc&quot;&gt;&lt;a href=&quot;#babelrc&quot; aria-label=&quot;babelrc permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;babelrc&lt;/h3&gt;
&lt;p&gt;配置 babel 依赖于一个叫做 &lt;code class=&quot;language-text&quot;&gt;.babelrc&lt;/code&gt;文件, 在 VS Code 中, 如果安装了&lt;strong&gt;文件图标主题&lt;/strong&gt;的话, 一旦创建, 会有一个特定的 logo 图标来告诉我们, 没有拼错.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/6e66289750658579d27318a94e357528/1bae2/F82820D6-9363-4A17-B637-C84FE7E037CE.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 350px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 34.85714285714286%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;139\&apos;%3e%3cpath d=\&apos;M0 70v69h401V0H0v70m111-16c-8 4-22 18-26 25-4 8-4 11-2 15 2 5 8 5 17 1 13-5 15-25 3-24-4 1-7 2-7 5h4c3-1 6 0 6 3 0 4-4 9-9 11-20 10-6-19 15-32l5-4v-1c1-1 0-1-1-1l-5 2m51 25c0 13 0 15 2 15l1-2h2c5 4 12 2 14-3 4-12-6-23-14-15-2 1-2 1-2-5l-1-6c-2 0-2 2-2 16m50 0c0 13 0 15 2 15l1-1 1-2 2 2c2 2 8 1 11-2 4-3 4-13 0-17-4-3-9-3-12-1-2 2-2 2-2-4l-1-6c-2 0-2 2-2 16m50 0c0 14 0 15 2 15s2-1 2-15c0-15 0-16-2-16s-2 1-2 16m-70-7c-2 1-5 4-4 5l4-1c5-2 8-1 9 2 0 3 0 3-3 3-4 0-9 2-10 3-1 2-1 7 1 8 1 2 9 3 10 1l2-1 1 1c-1 1 0 1 1 1 2 0 2-1 2-8 0-13-4-17-13-14m51 0c-6 3-8 13-3 19 2 3 3 3 7 3 5 0 10-3 8-5h-3c-4 4-11 1-11-3 0-2 1-2 8-2h8l-1-3c-1-8-6-12-13-9m36 1h-3l-2-1-1 11c0 10 0 11 2 11s2-1 2-8c0-10 1-11 6-11l2-2c0-2-3-3-6 0m15 0c-6 3-8 13-2 18 3 4 10 4 14 0 3-3 1-6-2-2-5 5-12 1-12-6s7-11 11-6c3 2 5 2 4-1-1-2-6-5-8-5l-5 2m-126 3c-2 1-3 6-2 9 2 9 12 8 12-2 0-6-5-10-10-7m49 1c-4 5-1 14 5 14 4 0 6-3 6-8 0-7-6-11-11-6\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/6e66289750658579d27318a94e357528/f2fbe/F82820D6-9363-4A17-B637-C84FE7E037CE.webp 200w,
/blogs/static/6e66289750658579d27318a94e357528/aa324/F82820D6-9363-4A17-B637-C84FE7E037CE.webp 350w&quot;
          sizes=&quot;(max-width: 350px) 100vw, 350px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/6e66289750658579d27318a94e357528/9ec3c/F82820D6-9363-4A17-B637-C84FE7E037CE.png 200w,
/blogs/static/6e66289750658579d27318a94e357528/1bae2/F82820D6-9363-4A17-B637-C84FE7E037CE.png 350w&quot;
          sizes=&quot;(max-width: 350px) 100vw, 350px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/6e66289750658579d27318a94e357528/1bae2/F82820D6-9363-4A17-B637-C84FE7E037CE.png&quot;
          alt=&quot;F82820D6 9363 4A17 B637 C84FE7E037CE&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;
配置 react 的方式, 其实十分简单. 首先需要转译 JSX, 但是 JSX 的转移又依赖于 es2015, 所以我们两个都需要转译. 我并没有多长 babel 使用经验, 反正现在有了 &lt;code class=&quot;language-text&quot;&gt;presets&lt;/code&gt;, 而且淘汰了 ES2015, ES2016 这些 presets, 统一使用 &lt;code class=&quot;language-text&quot;&gt;env&lt;/code&gt; preset, 所以 babel 的配置变成了下面这样&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果有影响的话, 其实还有一个 &lt;code class=&quot;language-text&quot;&gt;babel-preset-react-app&lt;/code&gt;, 它和上面的 react 的区别就是: react-app 是使用在 &lt;code class=&quot;language-text&quot;&gt;create-react-app&lt;/code&gt;中的配置, 相比 react 会有一些加成, 下面会讲到.&lt;/p&gt;
&lt;p&gt;OK, 其实有了这两个就能写 react 了. 自己写好必要的组件, 和之前一样使用 parcel 就能启动. 但是, 我们还不能使用刚刚提到的那些新语法. 甚至连 React 大量依赖的 &lt;code class=&quot;language-text&quot;&gt;{...obj}&lt;/code&gt; 也不行. 这个时候就还需要安装新的 preset: &lt;code class=&quot;language-text&quot;&gt;stage-2 stage-3&lt;/code&gt;
于是乎, 为了安装这些, 我们需要运行&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; -D babel-preset-env babel-preset-react babel-preset-stage-2 babel-preset-stage-3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那这样就能开心的写 React 代码了吗 🧐 还不行, 我目前也搞不清楚为什么, 写 &lt;code class=&quot;language-text&quot;&gt;async await&lt;/code&gt;话, 还是会报错, 尽管这个主流浏览器已经都支持了. 所以, 我在 Google 了一番后, 发现还需要安装一个 babel plugin.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; -D babel-plugin-transform-runtime&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而且这个 runtime 的配置蛮复杂的, 这里不详细介绍了, 大概是这样.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;transform-runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;polyfill&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;helpers&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 这段代码紧跟 babelrc 中的 presets 之后另起一行.&lt;/p&gt;
&lt;p&gt;当完全了这些之后我们就可以没有任何问题的写 React ⚛️ 了 😎😎&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;热加载&quot;&gt;&lt;a href=&quot;#%E7%83%AD%E5%8A%A0%E8%BD%BD&quot; aria-label=&quot;热加载 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;热加载&lt;/h2&gt;
&lt;p&gt;当我确定我要使用热加载的时候, 是因为我看了 Dan 的视频, 以及他说的一段话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to encourage you to actually spend time working on developer tools because before you can optimize your app, you should optimize your workflow so you have more time to spend working on your app. Because once enough frustration is gone, your programming actually feels fun again just like it used to do when the tools were simple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最重要的意思就是, 花点时间研究 🔧 能为我们省下更多的时间提高自己. 于是乎, 我就花了一点时间, 嗯, 也不是一点, 三个小时吧. 终于搞明白, 怎么在 parcel 中使用了. 因为和官方文档有点区别, parcel 的文档介绍的又十分简陋, 再加上 parcel 缓存的问题, 所以被坑了很久. 不过终于还是搞定了. 下面总结一下热加载的配置.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot;&gt;react-hot-loader&lt;/a&gt; 由 &lt;em&gt;Dan gaearon&lt;/em&gt; 开发并开源, 对, 就是 redux 的作者, 是一个特别帅的英国佬. 当然这不是我们讨论的重点, 目前使用的是 V3 版本, V4 在配置上有非常大的提升, 但是因为 parcel 不兼容这个. 所以我们还是使用主流的配置.&lt;/p&gt;
&lt;p&gt;文档该说的都说了, 下面只针对在 parcel 上该怎么用来解释.
还是安装它&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; -D react-hot-loader&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后在 &lt;code class=&quot;language-text&quot;&gt;babelrc&lt;/code&gt; 中的 plugins 中配置. 最终的版本为:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;stage-2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;stage-3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;transform-runtime&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;polyfill&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;helpers&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;react-hot-loader/babel&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还没完, 接下来只要在 &lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt; 做一些小操作, 就可以开始了.
&lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt; 一般作为入口点, 换句话话, 这里应该是你整个项目配置的地方, 也是 &lt;code class=&quot;language-text&quot;&gt;ReactDOM.render&lt;/code&gt;调用的地方, 同时也是你的 html 文件, 应该引用的 JS 文件.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./App&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AppContainer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-hot-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-hot-loader/patch&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AppContainer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Component &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;AppContainer&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是代码的必备成分, &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt; 就是你所有代码的合成的组件, render 函数无非就是一个小小的包装. 而 &lt;code class=&quot;language-text&quot;&gt;AppContainer&lt;/code&gt; 就是整个热加载的&lt;strong&gt;能量源泉&lt;/strong&gt;. 而 &lt;code class=&quot;language-text&quot;&gt;module.hot.accept&lt;/code&gt; 里的回调, 就是整个源泉的能量使用者.
和文档中不一样的是, 文档中 &lt;code class=&quot;language-text&quot;&gt;accept&lt;/code&gt; 接受两个参数, 第二个才是回调. 也是我一直被坑的地方, 可能是因为 parcel 针对这个做了某些小小的优化吧.&lt;/p&gt;
&lt;p&gt;这些都写好了, 就可以开始&lt;strong&gt;热加载&lt;/strong&gt;之旅了!
那怎么知道自己的热加载是否成功了呢? 之前提到过, 热加载的前提是不用刷新界面, 因为刷新的话就会丢失所有的状态咯. 所以成功的关键就是&lt;strong&gt;状态没有丢失&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;不过这句话不是那么的明显 🙂, 其实比较的明显的检测方法就是:
有一个 input 和任意的 label. 如果我们 input 中填写了某些信息, 再去 label 中修改, input 中的数据没有丢失的话, 就说明热加载成功了. 这真的很重要, 在写表单类似的程序的时候, 我们需要不断的输入然后刷新, 光光这个时间就不知道被浪费了多少.&lt;/p&gt;
&lt;p&gt;补充：这个热加载似乎会引入一个 bug&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无法在 &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; 函数中找到 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;
我不太清楚这是什么原因，在不需要重度依赖 async 的情况下，还是可以接受的。另外，估计 v4 版本已经解决了这个问题吧。感谢开源让生活更美好, 也让我们知道牛逼的程序员到处都是.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[UUID]]></title><description><![CDATA[花了一个晚上看了一下 UUID 的实现源码. 发现 UUID 有 5 个版本, 其中的特点分别为:
V1: 以 机子的网卡和时间戳 以及一些其他的东西作为因子来生成一个唯一的标识符
V2: 没有提及
V3: 为了方便同样的标识符生成同样的 uuid, 用 MD5 来 hash…]]></description><link>https://github.com/thoamsy/blogs.git/uuid/UUID/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/uuid/UUID/</guid><pubDate>Fri, 05 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;花了一个晚上看了一下 UUID 的实现源码. 发现 UUID 有 5 个版本, 其中的特点分别为:
V1: 以&lt;strong&gt;机子的网卡和时间戳&lt;/strong&gt;以及一些其他的东西作为因子来生成一个唯一的标识符
V2: 没有提及
V3: 为了方便同样的标识符生成同样的 uuid, 用 MD5 来 hash 标识符和命名空间
V4: 生成一个 128 位的随机数来作为唯一标识符
V5: 和 V3 相似, 不过使用 sha-1 算法, 让标识符更难被预测.&lt;/p&gt;
&lt;p&gt;如果我们仅仅只是为了生成一个唯一的标识符, 就用 V1 和 V4. 但是 V1 其实容易被预测, 所以现在已经不怎么用了, 更多的用 V4 的. 关于到底使用哪个, 可以看 &lt;a href=&quot;https://stackoverflow.com/questions/20342058/which-uuid-version-to-use&quot;&gt;stackoverflow&lt;/a&gt; 的一个帖子.
那么, UUID 的特点主要是分成:
&lt;code class=&quot;language-text&quot;&gt;8-4-4-4-12&lt;/code&gt; 的 16 进制表示来展现的, 对应的字节应该是 16(8+4+4+4+12 &gt;&gt; 1) 个. 当然最后会转化成字符串的话, 就变成 16 * 2 + 4(四个短横) 个了.
其中, 第三部分的第一个字符用来表示算法的版本号, 所以 v4 的版本是 4. 而第四部分的第一位用来表示变种, 我没太搞懂这是什么鬼, 但是可能的取值只能为 &lt;code class=&quot;language-text&quot;&gt;9 0 a b&lt;/code&gt;, 这可以通过 &lt;code class=&quot;language-text&quot;&gt;bit &amp;amp; 0x3f | 0x80&lt;/code&gt; 来做到的.&lt;/p&gt;
&lt;p&gt;我只看了 4 和 5 两个版本的实现, 除去 &lt;code class=&quot;language-text&quot;&gt;sha-1&lt;/code&gt; 和 随机数生成器算法的话, 还是蛮简单的.😎&lt;/p&gt;
&lt;h2 id=&quot;v4&quot;&gt;&lt;a href=&quot;#v4&quot; aria-label=&quot;v4 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;V4&lt;/h2&gt;
&lt;p&gt;V4 就是要求生成一个 128 位的伪随机数. 但是因为有 6 个 位会被强制使用(版本 4 位, 变种 2 位), 就剩下 122 位. 不过光是 122 位, 也就是 &lt;code class=&quot;language-text&quot;&gt;2 ^ 122&lt;/code&gt; 次方, 再根据&lt;strong&gt;生日悖论&lt;/strong&gt;, 我们大概知道, 这个世界上有 50% 的几率发生碰撞的概率大概是多少. 反正就是很小. 但是, 这就要求随机数代码的高质量了, 显然这个是交给数学家去实现的咯, 而 nodejs 也内置了相应的代码.
所以说, V4 版本的实现就是, 使用 nodejs 生成一个 128 位的随机数. 再给固定的位置设置那 6 个 bit, 最后转成我们需要的字符串形式就可以咯!
那么在 nodejs 这个平台上又会出现哪些问题呢?
首先, 它的随机数发生器生成的是一个 Buffer 对象, 但是它还是能和数组一样取下标, 并不妨碍我们的正常使用.
接下来就是 &lt;em&gt;特定位设置&lt;/em&gt;, 代码如下&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 6 就是第 7 个字节&lt;/span&gt;
rnds&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rnds&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x0f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x40&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 同理第九个字节&lt;/span&gt;
rnds&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rnds&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来就是将整个 Buffer 转成我们需要的字符串咯! 不过, 就和今天写颜色的代码碰到的问题一样, 对于小于 16 的数, 如果我们直接用 &lt;code class=&quot;language-text&quot;&gt;toString&lt;/code&gt; 的话, 是不会自动补 0 的! 所以我们只能自己手动撸代码来保证 0 的出现. 显然, 只能使用字符串来填充这个 0 呢.
这个库的实现很暴力, 但是也很巧妙&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; byteToHex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  byteToHex&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过强制让数变成 3 位的十六进制, 这样就保证 0 时存在的, 然后不取高位, 真的棒!
最后一步, 就是根据随机数里的值, 对应到这个 byteToHex 中来, 并在合适的位置插入 -, 整个 UUID 就生成咯!
另外值得一提的是, 其实浏览器也支持一个 &lt;code class=&quot;language-text&quot;&gt;crypto&lt;/code&gt; 的包了, 虽然只有一个函数, 叫做 &lt;code class=&quot;language-text&quot;&gt;getRandomValues&lt;/code&gt;, 这个函数接受一个 &lt;code class=&quot;language-text&quot;&gt;TypedArray&lt;/code&gt; 数组, 并且没有返回值, 属于&lt;strong&gt;mutable&lt;/strong&gt;. 我们需要多大的尺寸, 多大的范围, 就传递相应的进去就行咯.&lt;/p&gt;
&lt;p&gt;这样的话, 似乎我也能自己写一个浏览器能用的 V4 版本的 UUID 咯 😎&lt;/p&gt;
&lt;h2 id=&quot;v5&quot;&gt;&lt;a href=&quot;#v5&quot; aria-label=&quot;v5 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;V5&lt;/h2&gt;
&lt;p&gt;V5 要求必须有两个参数提供, &lt;code class=&quot;language-text&quot;&gt;name, namespace&lt;/code&gt;. name 就是你想生成 uuid 的值, 而 namespace 则是一个 16 进制表示的, 16 个字节字符串.
比如，我们相对我的名字进行解码，就可以 &lt;code class=&quot;language-text&quot;&gt;v5(&amp;#39;YangKui&amp;#39;, &amp;#39;thisisanamespace&amp;#39;)&lt;/code&gt;;
不过为了方便, 我们干脆用 V4 版本来生成. 但是，单纯的 UUID 是 36 个字节，所以需要先转成 bytes 形式。 可以使用正则表达式来替换.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bytes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
uuid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;/[a-zA-Z0-9]{2}/g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; bytes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，我们还需要对 name 进行编码, 我们可以这样实现:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;stringToBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unescape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;encodeURLComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// UTF8 escapse&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Uint8Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一行的目的是生成一个都小于 255 的 UTF-8 编码, 像下面这样。&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/cb0e531a417dd01a2c6a222ff45b732a/0572a/A38A178D-6DAC-4F8E-9EEC-001450B372AC.png&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 344px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 12.790697674418606%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;51\&apos;%3e%3cpath d=\&apos;M0 26v25h401V0H0v26m139 5c-2 3-2 6-1 8 1 4 4 5 6 2 2-2 6-4 6-2s2 4 4 3l1-4c0-3-1-4-2-3l-2-1c1-2-3-4-4-2-2 2-2 2-3 0s-3-3-5-1M35 37c0 5 2 6 4 4l1-1c0 3 2 2 3-1 0-2 0-2 2 1s5 4 7 2l-2-1-3-1c-1-2 0-2 3-2s3 0 2-3-6-3-7 0l-1 3v-3c0-2-2-3-2 0 0 2-2 4-2 2h-2c-1 1-1 1-1-1-1-5-3-4-2 1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/cb0e531a417dd01a2c6a222ff45b732a/f2fbe/A38A178D-6DAC-4F8E-9EEC-001450B372AC.webp 200w,
/blogs/static/cb0e531a417dd01a2c6a222ff45b732a/41a03/A38A178D-6DAC-4F8E-9EEC-001450B372AC.webp 344w&quot;
          sizes=&quot;(max-width: 344px) 100vw, 344px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/cb0e531a417dd01a2c6a222ff45b732a/9ec3c/A38A178D-6DAC-4F8E-9EEC-001450B372AC.png 200w,
/blogs/static/cb0e531a417dd01a2c6a222ff45b732a/0572a/A38A178D-6DAC-4F8E-9EEC-001450B372AC.png 344w&quot;
          sizes=&quot;(max-width: 344px) 100vw, 344px&quot;
          type=&quot;image/png&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/cb0e531a417dd01a2c6a222ff45b732a/0572a/A38A178D-6DAC-4F8E-9EEC-001450B372AC.png&quot;
          alt=&quot;A38A178D 6DAC 4F8E 9EEC 001450B372AC&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后, 获得了 name 和 namespace 的编码值后, 只需要对 &lt;code class=&quot;language-text&quot;&gt;namespace.concat(name)&lt;/code&gt; 调用 sha1, 就成了我们需要的 uuid 值， 然后和 v4 一样设置版本号和变种信息.
至于 sha1 实现原理, 我不太明白, 不过 nodejs 提供了代码. 在它的 &lt;code class=&quot;language-text&quot;&gt;crypto&lt;/code&gt; 模块中, 可以这样使用:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;crypto
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createHash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;sha1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 bytes 就是我们要 hash 的部分. 所以为什么能提供一样的 UUID? 因为 name 和 namespace 都一样, 所以生成的就是一样的啦!
不过, 我在看了 SHA-1 的源码后, 发现它本身就会对传进来的数据做同样的操作来保证都是 Uint8 类型, 所以说上面的 &lt;code class=&quot;language-text&quot;&gt;stringToBytes&lt;/code&gt; 其实是可以去掉的.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Base64 编码的简单尝试]]></title><description><![CDATA[这几天不务正业, 在看 HTTP 以及 express 的服务端应用. 关于认证就有很多技巧. 什么基本认证, 记号认证, Passport 认证. 虽然其它认证都是通过 md5 或者 UUID…]]></description><link>https://github.com/thoamsy/blogs.git/base64/Base64 编码的简单尝试/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/base64/Base64 编码的简单尝试/</guid><pubDate>Wed, 03 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;这几天不务正业, 在看 HTTP 以及 express 的服务端应用. 关于认证就有很多技巧. 什么基本认证, 记号认证, Passport 认证. 虽然其它认证都是通过 md5 或者 UUID 来实现一种不可逆且唯一的识别码. 换句话说, 我也不会实现这些东西.
不过, Base64 虽然作为最基本的操作, 安全性基本没有(因为是对称的),所以可以作为一个很好的练练手的代码.&lt;/p&gt;
&lt;h2 id=&quot;base64&quot;&gt;&lt;a href=&quot;#base64&quot; aria-label=&quot;base64 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Base64&lt;/h2&gt;
&lt;p&gt;Base64 的基本思路就是, &lt;em&gt;3/4&lt;/em&gt;. 每三个字节为一组, 将 24 bits 分为 4 份, 每份 6bits. 然后在一个大小为 64 的索引表中找到对应的字符.
针对不能整除 3 的情况, 就将补 0. 之后这些 0 使用 = 来填充. 但是在实现中, 索引表中的第 0 个是 A, 所以如果我们要提前填充的话, 就要去掉多余的字符. 但是在 JS 中, 如果数组不存在某个下标, 会返回 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;, 而对 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; 进行操作会得到 0. 所以, 我们就不需要提前填充.&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#%E5%AE%9E%E7%8E%B0&quot; aria-label=&quot;实现 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;实现&lt;/h2&gt;
&lt;p&gt;作为一个合格的程序员, 当然不能傻逼到自己去一个个写索引表, &lt;em&gt;其实复制粘贴很快!&lt;/em&gt; 所以我就用 map 函数来生成这些. 代码很简单&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;temp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; idx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x41&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; idx
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;idx &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x61&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;idx &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;52&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x30&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;52&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;62&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;47&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来就是关于 3 / 4 的具体操作咯. 其实很好理解, 每 6 个一份, 通过位操作就能将每个部分分离出来.
当然, 因为 JS 中的数字都是 4 个字节起步的, 所以有点浪费内存, 应该使用 &lt;code class=&quot;language-text&quot;&gt;Uint8Array&lt;/code&gt; 来减少内存的消耗.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; first &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; two &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; three &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; four &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x3f&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;two&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;three&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;four&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码很简单, 就像上面一样. 不过需要注意的就是优先级问题. 位移动操作在大多数语言中, 优先级都是高于其它的位操作, 低于 + - 运算. 除了 Swift. 所以这里的 () 主要还是避免歧义.&lt;/p&gt;
&lt;p&gt;好了, 轮子都找好了, 剩下的就是修车咯!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 将 data 转化成 Uint8Array 转成能接受的值&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; transfer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; base64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; startPoint

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startPoint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; startPoint &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; startPoint &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;threeToFour&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transfer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startPoint&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; startPoint &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 因为 threeFour 会假设传入的就是 3 个字节, 但是如果不是 3 个的话, 就会出现问题.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 比如 data[2] 就会是 undefined. 对 undefined 进行位操作会被当成 0, 所以多出来的字母肯定会有一个 0.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 再根据 Base64 的规则, 加上相应的等号&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startPoint &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 说明 % 3 余 2, 简单的算一下就知道咯.&lt;/span&gt;
    base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;=&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startPoint &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;==&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; base64&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是那个循环. 所以我们知道要分辨能不能整除 3. 但是, 仔细想一下, 我用 3, 4, 5 作为 🌰 的话, 就能看出来.
3 的时候, 从 0 开始, 最后跳出循环的 startPoint 就等于 3. 所以没有任何需要另外处理的情况.
4 的时候, 就会在 6 结束, 这个时候 6 - 4 等于 2, 所以需要补两个字节. 但是因为我的 &lt;code class=&quot;language-text&quot;&gt;threeToFour&lt;/code&gt; 函数没有专门处理这种情况, 最后总会返回 4 个字符, 所以我们需要将多出来的字节替换成 =. 当然, 你也可以使用 splice 做到一次完成这种操作.
5 的时候和上面相似.&lt;/p&gt;
&lt;p&gt;最后这就是整个代码的实现咯. 不得不说, 对于那种需要频繁增加减少的操作, 我还是喜欢用数组, 然后 &lt;code class=&quot;language-text&quot;&gt;join&lt;/code&gt; 起来. 不过, 浏览器对于 += 运算符应该是做了大量的优化的, 所以到底哪个性能高, 我还真的不确定……&lt;/p&gt;
&lt;p&gt;**Update: ** 现代浏览器针对 &lt;code class=&quot;language-text&quot;&gt;+=&lt;/code&gt; 有客观的优化，虽然还有一些细节上的区分，不过基本上不超过几百万字节的话，+= 是更快的。但是因为这里还需要修改最后的字符串，需要再复制一下，这个可能会带来不必要的性能损耗。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot; aria-label=&quot;总结 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;总结&lt;/h3&gt;
&lt;p&gt;这种题目整个做出来, 对于自己的思维还是很有锻炼的. 虽然, 不可能一次就能编对, 特别是那个位操作的一段很容易出现问题, 这个时候一定要保持冷静才行.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[作为个人博客的第一篇文章, 没有太多的意义, 就当为自己终于开通了博客做一个喝彩 🎉🎈
在一年左右的前端学习时间中, 能构建出一个属于自己的博客, 也算是十分满足了.
感谢   和   成为我的前端老师, 另外一个前端老师就是 MDN. 好了, 一段代码开始我的博客之旅.]]></description><link>https://github.com/thoamsy/blogs.git/hello-world/</link><guid isPermaLink="false">https://github.com/thoamsy/blogs.git/hello-world/</guid><pubDate>Sun, 31 Dec 2017 13:13:18 GMT</pubDate><content:encoded>&lt;p&gt;作为个人博客的第一篇文章, 没有太多的意义, 就当为自己终于开通了博客做一个喝彩 🎉🎈
在一年左右的前端学习时间中, 能构建出一个属于自己的博客, 也算是十分满足了.
感谢 &lt;code class=&quot;language-text&quot;&gt;GitHub&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;Google&lt;/code&gt; 成为我的前端老师, 另外一个前端老师就是 MDN.&lt;/p&gt;
&lt;p&gt;&lt;a
    class=&quot;gatsby-resp-image-link&quot;
    href=&quot;/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/1f853/cat.jpg&quot;
    style=&quot;display: block&quot;
    target=&quot;_blank&quot;
    rel=&quot;noopener&quot;
  &gt;
    &lt;span
    class=&quot;gatsby-resp-image-wrapper&quot;
    style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;&quot;
  &gt;
    &lt;span
      class=&quot;gatsby-resp-image-background-image&quot;
      style=&quot;padding-bottom: 100%; position: relative; bottom: 0; left: 0; background-image: url(&apos;data:image/svg+xml,%3csvg xmlns=\&apos;http://www.w3.org/2000/svg\&apos; width=\&apos;400\&apos; height=\&apos;400\&apos;%3e%3cpath d=\&apos;M0 200v200h62v-13a466 466 0 0 1 10-87 220 220 0 0 1 6-36l5-21c4-17 4-17 2-16h-6c-5 0-6 0-6-2l-1-4v-13l10-1c12-2 13-3 2-2-7 0-7 0-6-1v-12c1-1 9 1 9 3 0 1 1 2 5 2 3 1 3 1 7-10a104 104 0 0 1 12-29 132 132 0 0 1 51-50 145 145 0 0 1 196 54 170 170 0 0 1 11 27v3a22678 22678 0 0 0 19 74c4 16 5 25 4 27l1 3c2 1 3 4 1 4l1 12 1 5 3 27 1 28 1-172V0h-31v8c2 0 3 16 2 17l-1 2c1 3-2 3-7 1-7-3-6-1-8-11l-3-13-1-4H164l-4 7c-8 14-11 29-9 41 1 6 1 6-1 9l-3 4c0 2-6 5-9 5-2 0-2 0-1 1 2 2 1 4-4 5-4 1-5 2-9 10-10 23-10 24-13 34l-1 4H97l-5 1h-3l1 7c0 8 0 7 5 7 4 1 5 1 5-1l2 1 4 1 1 2-1 2H89l-15 1-1-7c0-6 0-7 2-8l1-2c-2 0-3-3-2-6v-10c-2-14-2-35 0-36 2 0 2-4-1-5V25l1 4 1 4v-5l-1-5-1-12-1-11c-2 0-2 2-2 11l-1 15a1817 1817 0 0 0-3 62v3c-1 0-2-1-2-3-1-4-3-9-6-13l-2-4-3-8c-2-3-3-7-2-8l-1-1c-2 0-3-2-1-2v-2l-1-2h-2v-5c-2-3-2-6 0-4 1 1 2-1 2-7 0-9-2-10-2-1l-1 6V0H0v200M92 13v7c1 2 2 1 2-2-1-3 1-3 3-2v3c-1 2 0 3 7 3s7 1 7-6c0-8 0-8-12-8h-7v5m5 32v14h6c8 0 8 0 8-8v-5l-7-1h-7M44 70c-2 8-2 49-1 49l2-24a1793 1793 0 0 1-1-25m176 1c-14 1-15 2-15 4s0 2 1 1h32l1-3v-3h-6l-13 1M98 84c0 3 1 8 2 7l2 2c1 2 2 3 5 3s4-1 4-8l-1-5-6-1c-5 0-6 0-6 2m92 62c-9 1-15 3-25 8s-10 6 0 2a105 105 0 0 1 67-1l5 2c17 7 33 22 45 41 3 5 4 7 2 7l-1-1c0-2-8-12-12-17l-5-6a93 93 0 0 0-36-22c-8-3-23-6-28-6-2 1-2 1 1 1 4 0 12 5 14 10l4 2c4 0 5 2 5 10a3713 3713 0 0 0 1 20v22h-2l-1-2-1-2c-2-1-12 0-14 1l-6 1c-6-1-11 0-12 2v5c1 0 1 2-1 5l-2 7c0 2-1 1-1-2v-5l1-5c1-4 1-4-2-4-4 1-8 4-8 6l-1 1v10l-1 4-1-7c0-7 0-8-2-8-3 0-3 2-2 5 2 3 2 13 0 17l-3 1-3-1-3-1c0-1-6-1-10 1a8067 8067 0 0 1-9 4c-1 1 0 1 2 1l2 2c0 6 8 11 15 10 4 0 6 1 5 5 0 2 0 3 2 3s2-1 2-8l-2-10c0-3 1-2 5 2l3 2c0-2 1-2 3 0l3 1 3 2c2 1 4 1 5-1 1-3 2-2 2 2l-1 3v4c2 3 5 5 5 2l2-7 4 1c5 2 16-3 16-8 0-2 8-1 10 1 2 4-1 8-6 8l-3 2-2 1-1 3 1 3 1 1-1 1-2-1-1-1-1 2v1c-3 0-4 3-2 5s2 2 1 3c-1 2-6 0-6-2l1-1h1c1-1 0-1-1-1l-2 1-4 1c-3 0-2 2 2 3 3 0 9 3 8 4l-4-1h-15l7 1 9 2 3 2h-1l-25-2c-5 0-5 0 1-7 5-5 6-6 4-8v-4c0-5-2-6-3-2-2 4-5 6-8 5l-4-1h-2c-4 5-4 5-2 7 3 2 6 8 5 9v2l-1 2h-4c-2 1-2 1-1-1h-11l4-1c4 0 4-1-4-2s-10-2-6-3c2-1 2-1 0-1-6 0-2-3 4-3l3-1-2-1-2-1h-7l1-1v-6c1-2 1-2-2-1l-3 1 1-2v-4h2l1-2v-2h-5l1-1c2-1-5-2-7-2-4 1-3-6 0-8 4-2 3-3-1-2-5 0-6-3-3-7l2-7c-1-5 5-20 11-29 10-15 26-26 45-31l7-3-3-5c-3-4-8-10-10-10-7-1-17 0-21 1l-8 2h-3c0 1-1 2-2 1v1c1 1 1 1-2 4l-5 3c-1 0-1-1 1-2l2-3-11 7c0 1 1 1 3-1h4l-2 2-8 6c-6 5-7 6-4 1 3-4-1-2-6 4-7 8-9 11-12 17l-3 5a121 121 0 0 0 37 157l2 1 1 1c-1 1 0 1 1 1l6 4 6 4 9 4c4 2 9 4 13 4l9 2c6 2 38 1 38-1l3-1c5 0 12-2 18-5l9-3 2-2 3-3 3-2 4-1 5-4c1-3 2-4 4-5 4 0 5-2 5-5l1-2 3-2 4-5 4-5c0-2 2-4 3-4l1-4 2-4c1 0 5-7 6-12 0-3 1-4 2-4 2 0 2 0 1-2-1-1 0-4 2-10a138 138 0 0 0-3-84c-10-26-30-48-54-61-10-5-13-6-19-3l-1-1c0-1-1-2-3-2l-6-2c-3-3-31-3-41-1m13 77c1 1 1 1-1 1l-2 1-1 1-2 1c-3 0-5 6-5 13s0 8 4 6c2-1 3-2 3-7 0-7 0-7 1-6l1-1 1-2c1-1 1-1 1 1l-2 9c0 5 0 5 2 5l2 1h3c2-2 5-3 5-1l-2 1 3 1c3 1 6 2 7 1 1 0 5 4 4 5s1 1 3 1c4 0 9-2 9-5 1-7 1-7-3-8l-6-1-2-1-1-2v-1l1-2-2 1-1 1c0-2-5-4-6-2-1 1-1 1 1 1s2 0 1 1c-2 0-3 2-1 2l-1 2c-2 1-2 1-4-1l-2-2 2-1c2-1 3-4 1-4s-2-1-2-4 0-4-4-5h-5m-90 90l5 6c20 27 46 40 75 39 20-1 21-4 1-4-17 0-33-4-39-11l-3-1-8-3-8-6-3-3-2-2-12-12-1-1v-1h-3c0-2-2-3-2-1\&apos; fill=\&apos;%23d3d3d3\&apos; fill-rule=\&apos;evenodd\&apos;/%3e%3c/svg%3e&apos;); background-size: cover; display: block;&quot;
    &gt;&lt;/span&gt;
    &lt;picture&gt;
        &lt;source
          data-srcset=&quot;/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/f2fbe/cat.webp 200w,
/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/e227a/cat.webp 400w,
/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/0cbce/cat.webp 800w,
/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/86447/cat.webp 1024w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/webp&quot;
        /&gt;
        &lt;source
          srcset=&quot;/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/f544b/cat.jpg 200w,
/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/41689/cat.jpg 400w,
/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/a296c/cat.jpg 800w,
/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/1f853/cat.jpg 1024w&quot;
          sizes=&quot;(max-width: 800px) 100vw, 800px&quot;
          type=&quot;image/jpeg&quot;
        /&gt;
        &lt;img
          class=&quot;gatsby-resp-image-image lazyload&quot;
          style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;&quot;
          data-src=&quot;/blogs/static/9f92b715ad1221ab5238e7533c1c47a7/a296c/cat.jpg&quot;
          alt=&quot;cat&quot;
          title=&quot;&quot;
        /&gt;
      &lt;/picture&gt;
  &lt;/span&gt;
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好了, 一段代码开始我的博客之旅.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;🐶🐱🐭🐹🐰🐻🐼🐨🐯🦁🐮🐷🐸🐵&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workAndLearning&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>