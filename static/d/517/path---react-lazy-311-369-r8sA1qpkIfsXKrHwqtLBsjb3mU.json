{"data":{"site":{"siteMetadata":{"title":"jj","author":"Yang Kui"}},"markdownRemark":{"id":"0f92a326-3dba-5f9b-85d5-79857a1f1462","html":"<p>实现 <code class=\"language-text\">React Lazy</code> 其实是内部维护是一个新的对象，拥有四种状态，分别对应 Promise：</p>\n<ol>\n<li>Pending</li>\n<li>Resolved</li>\n<li>Rejected</li>\n<li>Default</li>\n</ol>\n<p>可以简单的通过源码来分析</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> readLazyComponentType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>thenable<span class=\"token punctuation\">:</span> Thenable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> thenable<span class=\"token punctuation\">.</span>_reactStatus<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Resolved<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">const</span> Component<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> thenable<span class=\"token punctuation\">.</span>_reactResult<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> Component<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Rejected<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">throw</span> thenable<span class=\"token punctuation\">.</span>_reactResult<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Pending<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">throw</span> thenable<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      thenable<span class=\"token punctuation\">.</span>_reactStatus <span class=\"token operator\">=</span> Pending<span class=\"token punctuation\">;</span>\n      thenable<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">resolvedValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thenable<span class=\"token punctuation\">.</span>_reactStatus <span class=\"token operator\">===</span> Pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            thenable<span class=\"token punctuation\">.</span>_reactStatus <span class=\"token operator\">=</span> Resolved<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> resolvedValue <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> resolvedValue <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// If the `default` property is not empty, assume it's the result</span>\n              <span class=\"token comment\">// of an async import() and use that. Otherwise, use the</span>\n              <span class=\"token comment\">// resolved value itself.</span>\n              <span class=\"token keyword\">const</span> defaultExport <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>resolvedValue<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n              resolvedValue <span class=\"token operator\">=</span> defaultExport <span class=\"token operator\">?</span><span class=\"token operator\">?</span> resolvedValue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              resolvedValue <span class=\"token operator\">=</span> resolvedValue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            thenable<span class=\"token punctuation\">.</span>_reactResult <span class=\"token operator\">=</span> resolvedValue<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thenable<span class=\"token punctuation\">.</span>_reactStatus <span class=\"token operator\">===</span> Pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            thenable<span class=\"token punctuation\">.</span>_reactStatus <span class=\"token operator\">=</span> Rejected<span class=\"token punctuation\">;</span>\n            thenable<span class=\"token punctuation\">.</span>_reactResult <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">throw</span> thenable<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>需要注意这里的在 Pending 和 default 状态下为什么都是 throw。因为 React 为了实现 Suspense，是通过 throw 一个 Promise 后，在 React 的 commit Work 中有一个 <code class=\"language-text\">try catch</code> 操作来处理它，并进入 Suspense 的流程。</p>\n<p>同样的，在一个 React 中使用到了 Lazy Component 的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">case</span> ClassComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> failedUnitOfWork<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLegacyContextProvider</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">popLegacyContext</span><span class=\"token punctuation\">(</span>failedUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">case</span> ClassComponentLazy<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> <span class=\"token function\">getResultFromResolvedThenable</span><span class=\"token punctuation\">(</span>failedUnitOfWork<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLegacyContextProvider</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">popLegacyContext</span><span class=\"token punctuation\">(</span>failedUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，Component 和 Class Component 的区别就是 type 的读取方式不一样。而 <code class=\"language-text\">getResultFromResolvedThenable</code> 就是读取这个参数的 <code class=\"language-text\">_reactResult</code> 对象。</p>\n<p>而 <code class=\"language-text\">getResultFromResolvedThenable</code> 其实实现十分简单。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getResultFromResolvedThenable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">thenable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> thenable<span class=\"token punctuation\">.</span>_reactResult<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，<code class=\"language-text\">React.lazy</code> 也很符合我们的预期。它会维护 <code class=\"language-text\">_reactResult</code> 以维护最终的 <strong>type(Component)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> lazy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">ctor</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Thenable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> thenable <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thenable <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Lazily create thenable by wrapping in an extra thenable.</span>\n        thenable <span class=\"token operator\">=</span> <span class=\"token function\">ctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> thenable<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// React uses these fields to store the result.</span>\n    _reactStatus<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    _reactResult<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过设置 <code class=\"language-text\">status</code> 为 <em>-1</em>，使 React 在开始 <em>read</em> 这个 Lazy Component 的时候，才开始运行 <code class=\"language-text\">ctor</code>，在正常场景下 <code class=\"language-text\">ctor</code> 是一个类似于 <code class=\"language-text\">() =&gt; import(&#39;./src&#39;)</code> 的返回 Promise 的函数。所以 React 原生实现 lazy load 的原因是：Suspense 配合一个内部定义的 <code class=\"language-text\">Thenable</code> 对象，同时让 Work 支持 catch Promise。</p>","frontmatter":{"title":"React Lazy 的实现原理","spoiler":"简单讨论一下 React.lazy 内部实现","date":"2018/12/23"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-lazy/","previous":{"fields":{"slug":"/browser/"},"frontmatter":{"title":"Inside look at modern web browser（翻译）","spoiler":"谷歌搬砖"}},"next":{"fields":{"slug":"/react-trap/"},"frontmatter":{"title":"一些 React 中的刁钻问题","spoiler":"收集一些不为人所知的，React 的细节问题。帮助自己理顺 React 内部深层的逻辑"}}}}