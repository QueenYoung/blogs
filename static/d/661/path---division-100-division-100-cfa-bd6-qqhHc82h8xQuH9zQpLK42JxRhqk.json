{"data":{"site":{"siteMetadata":{"title":"😏","author":"Yang Kui"}},"markdownRemark":{"id":"9d56bcc4-0be9-5cd4-b328-50e5af11bf44","html":"<h2 id=\"背景\"><a href=\"#%E8%83%8C%E6%99%AF\" aria-label=\"背景 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>背景</h2>\n<p>现公司是做电商的，电商就免不了和价格打交道。为了防止进度丢失，方便加减运行的问题，业界通用的方式是使用整数来表示。最小单位为分，123 就表示 “1 元 2 毛 3 分” 或者 ”1.23” 元，这个不需要过多介绍。</p>\n<p>但是它们返回给前端用来展示的价格，也是这个 123，而不是转化成 1.23。需要前端再自己做一个转化逻辑。说要前端做这个的原因是防止进度丢失</p>\n<p>所以矛盾就出在这里。如果进度会丢失的话，那么 Java 和 JS 是没差别的。它们都采用 IEEE 754 来表示浮点数，价格的 Int 类型和 JS 的 SIM 也类似。那么这个无非就是把转化价格的逻辑从后端交给前端。然后前端又要下载一个类似 BigNumber 的库来处理这些问题。</p>\n<h2 id=\"真相\"><a href=\"#%E7%9C%9F%E7%9B%B8\" aria-label=\"真相 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>真相</h2>\n<p>这就是历史原因。那么有没有考虑过，整数除以 100 真的会丢失精度吗？我测试了十几个数不会。所以我打算写一个程序来证明一下。</p>\n<p>如果我将 <code class=\"language-text\">double(a / 100)</code> 的过程转化成 <code class=\"language-text\">int(a / 100) + int(a % 100) / 100</code>，接着判断这两个数是否相等是不是就可以了？(这里不考虑 JS，而是考虑 C 语言的情况。a / 100 得到的是整数）</p>\n<p>这里看上去有点脱裤子放屁，因为 <code class=\"language-text\">a / 100</code> 是整数，一个整数模 100，也还是整数。而我们又不能证明 <code class=\"language-text\">int(a % 100) / 100</code> 不会丢失精度，回到了最开始的问题上。</p>\n<p>不过换个角度想，JS 中支持将 “1.23” 这种字符串转化成数字。所以上面的式子改成 <code class=\"language-text\">Number(a / 100 + &quot;.&quot; + String(a % 100))</code> 是不是就能达到类似的效果了？</p>\n<p>所以我写出下面代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//生成 00 01 02 03 04 一直到 99</span>\n<span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=></span>\n  <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2 ** 31 - 1 我的计算机算不动，不过 2 ** 25 意思也到了。</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">25</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token number\">100</span> <span class=\"token operator\">!==</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>points<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobar'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后 <code class=\"language-text\">foobar</code> 从来没有被打印出来过。</p>\n<p>不过在第 7 行还是要解释下，我们在等式左右两边都用到了 <code class=\"language-text\">i / 100</code>，看上去很迷惑。当你要知道，确实它的意义是不同的。左边是直接得到浮点数，右边在 ~~ 的作用下会转化成整数。我们肯定不会出现 <code class=\"language-text\">int(101.0 / 100) == 0</code> 的情况，也不会出现 <code class=\"language-text\">int(199.0 / 100) == 2</code> 的情况。</p>\n<p>所以这是否可以证明一个整数除以一个 100，永远不会丢失精度呢？我相信是的。\n那如果这个数不再是 100，而是其他的呢，比如 123？这个时候精度很有可能丢失，因为类似于循环小数这种肯定是无法正确表示的。</p>","frontmatter":{"title":"为什么要除以 100?","spoiler":"一个整数除以 100 得到的浮点数，是否会丢失进度","date":"2019/02/20"}}},"pageContext":{"slug":"/division100/division100/","previous":{"fields":{"slug":"/react-as-a-runtime/"},"frontmatter":{"title":"React as a UI Runtime","spoiler":"An in-depth description of the React programming model."}},"next":{"fields":{"slug":"/solve-fresh-of-loading/"},"frontmatter":{"title":"解决 loading 闪烁的问题","spoiler":"无条件 loading 是有代价的"}}}}