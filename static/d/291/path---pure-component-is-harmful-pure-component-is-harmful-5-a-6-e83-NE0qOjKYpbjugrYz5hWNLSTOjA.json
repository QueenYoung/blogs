{"data":{"site":{"siteMetadata":{"title":"😏","author":"Yang Kui"}},"markdownRemark":{"id":"c3ac67fe-48d1-58b8-806d-3ed1863c62f2","html":"<p>这篇文章有点标题党, 其实主要要强调的是 <strong>到处使用 PureComponent 是不对的</strong>.</p>\n<h2 id=\"和-component-的区别\"><a href=\"#%E5%92%8C-component-%E7%9A%84%E5%8C%BA%E5%88%AB\" aria-label=\"和 component 的区别 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>和 Component 的区别</h2>\n<p>其实, <code class=\"language-text\">PureComponent &amp; Component</code> 的区别不大, <code class=\"language-text\">PureComponent</code> 自己实现了 <code class=\"language-text\">shouldComponentUpdate</code> 方法, 大概的实现类似于</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">shadowEquals</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">shadowEquals</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在有一个能组件, 能在不需要更新的时候, 自动帮我们做出这个判断, 不是很好嘛?\n先想象一个很常见的场景. 比如下面的界面</p>\n<p><a\n    class=\"gatsby-resp-image-link\"\n    href=\"/blogs/static/ea81edfa33b834ffe435293adf8025ba/1e6a7/88C8D2C2-A934-41FF-BAAE-830CB990718A.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-wrapper\"\n    style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 800px;\"\n  >\n    <span\n      class=\"gatsby-resp-image-background-image\"\n      style=\"padding-bottom: 48.74696847210995%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'400\\' height=\\'195\\'%3e%3cpath d=\\'M8 9c0 2 0 3 2 3 3 0 6-2 6-3 0-2 2-2 3 1 0 3 2 3 2 0l2-2 2 2c0 3 2 3 2 0 1-3 3-4 3-2l2 4c0 2 2 0 2-4l1-3H8v4m88 24v21l104 1c118 0 105 1 105-11 0-13 13-12-105-12L96 33m1 2v10l1 8h204V34H200L97 35m70 75v33h66V76h-66v34m19 46c-1 3-1 3 1 2l3 1c1 1 3 1 4-1 2-1 2-1 2 1h5l2-1h2c1 1 1 1 2-1h2c0 3 5 3 5-1 0-2 0-2-2-1l-2-1h-3l-2 1h-2l-1-2-1 1-1 1h-5c0-1-2-1-3 1-2 1-2 1-2-1-1-3-2-3-4 1M47 168l-1 14v13h99v-13l-1-14c-2-1-96-2-97 0m104 0l-1 14v13h99v-27l-49-1-49 1m105 0l-1 14v13h99v-27l-49-1-49 1m-201 9v14l8 1h7v-16h-7l-8 1\\' fill=\\'%23d3d3d3\\' fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n    ></span>\n    <picture>\n        <source\n          data-srcset=\"/blogs/static/ea81edfa33b834ffe435293adf8025ba/f2fbe/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 200w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/e227a/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 400w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/0cbce/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 800w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/6bc95/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 1200w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/ded3f/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 1600w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/aaced/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 2400w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/7855d/88C8D2C2-A934-41FF-BAAE-830CB990718A.webp 2474w\"\n          sizes=\"(max-width: 800px) 100vw, 800px\"\n          type=\"image/webp\"\n        />\n        <source\n          srcset=\"/blogs/static/ea81edfa33b834ffe435293adf8025ba/9ec3c/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 200w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/c7805/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 400w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/8ff1e/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 800w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/6ff5e/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 1200w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/2f950/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 1600w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/2fb56/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 2400w,\n/blogs/static/ea81edfa33b834ffe435293adf8025ba/1e6a7/88C8D2C2-A934-41FF-BAAE-830CB990718A.png 2474w\"\n          sizes=\"(max-width: 800px) 100vw, 800px\"\n          type=\"image/png\"\n        />\n        <img\n          class=\"gatsby-resp-image-image lazyload\"\n          style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;\"\n          data-src=\"/blogs/static/ea81edfa33b834ffe435293adf8025ba/8ff1e/88C8D2C2-A934-41FF-BAAE-830CB990718A.png\"\n          alt=\"88C8D2C2 A934 41FF BAAE 830CB990718A\"\n          title=\"\"\n        />\n      </picture>\n  </span>\n  </a></p>\n<p>假设上面的搜索框和下面的内容是<strong>同胞组件</strong>, 理想情况下, 每一次修改输入框的值都会调用 <code class=\"language-text\">setState</code>, 也就会导致整个页面重新渲染. 对于下面庞大的组件来说, 显然是很浪费的.\n如果让下面的组件继承 PureComponent 的话, 很大程度的解决了这个问题.</p>\n<h2 id=\"shadowequals-不是免费的\"><a href=\"#shadowequals-%E4%B8%8D%E6%98%AF%E5%85%8D%E8%B4%B9%E7%9A%84\" aria-label=\"shadowequals 不是免费的 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shadowEquals 不是免费的</h2>\n<p>这仅仅只是 PureComponent 美好的一面，我们在享受这种美好的时候，很容易被忽略的它的副作用：<strong>每一次 setState 所有的组件都会进行一次 shadowEquals。</strong>\n换句话说，在期望它更新的时候，这些计算都是不可避免的。我做了一个 <a href=\"https://codesandbox.io/s/v6y1m1yjk7\">demo</a>，仅仅一个组件，它的 props 是一个有 3000 个字段的对象, 并且保证真正需要更新的 prop 会在最后才被比较到，将 shadowEquals 的优化完全抵销。</p>\n<p>可以看到，通过 <code class=\"language-text\">componentDidUpdate</code> 每次更新花在 shadowEquals 的时间, 在我的 16 年 13 寸 MacBook Pro 上平均每次需要花费 1.5ms. 当我尝试降低速度四倍的时候, 你猜怎么着? 平均花费的时间达到了 7ms. 可能你会觉得 7ms 似乎也不是多恐怖, 而且我这里是故意捏造了一个 3000 字段的对象.\n不过, 在现实情况中, 大量的组件在一次 <em>reconciliation</em> 后, 发生 re-render, 它们的 props 和 state 的字段长度之和应该有 3000 的数量级.</p>\n<p>再考虑下动画, 要达到 60FPS. 至少要求每一帧能在 17ms 之内运行完毕, 那么仅仅一个 <code class=\"language-text\">showComponentUpdate</code> 方法就会占据 7ms 的时间, 剩下的解析代码, 生成 V-DOM, DOM 的一系列更新操作要在 10ms 之内完成的话, 实在太难. 所以很容易出现动画掉帧的情况.</p>\n<p>这里还有几个佐证: Reactjs 团队的成员建议不要大量使用 PureComponent 的警告 ⚠️.\n这个 <a href=\"https://news.ycombinator.com/item?id=14418576\">hacknew</a> 的帖子的作者, 发表了大致的观点:</p>\n<blockquote>\n<p>不要到处使用 PureComponent, 如果我们建议这种行为的话, 为什么不让这是默认选项呢?\n那么 15.3 推出 PureComponent 的原因到底是什么呢?</p>\n</blockquote>\n<p><a href=\"https://twitter.com/dan_abramov\">Dan Abramov</a> 在 Github 中解释了这个原因</p>\n<blockquote>\n<p>We added a base class because we wanted an official way of marking component as compatible with shadow equality checks, with using mixins.</p>\n</blockquote>\n<p>下面是这段话的完整截图. 这段话具体出自哪个 issue 我并不清楚, 这个截图其实是由 Dan 在 Twitter 中发出来的. 这个<a href=\"https://twitter.com/dan_abramov/status/759383530120110080\">推</a>发布于 2016 年 6 月底</p>\n<p><a\n    class=\"gatsby-resp-image-link\"\n    href=\"/blogs/static/faad0289183eae0293db5dd94a588c91/a66cd/ConfSkDXEAAleG5.jpg-large.jpg\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-wrapper\"\n    style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 750px;\"\n  >\n    <span\n      class=\"gatsby-resp-image-background-image\"\n      style=\"padding-bottom: 177.86666666666667%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'400\\' height=\\'711\\'%3e%3cpath d=\\'M378 6h-10v10h12c6 0 11 0 10-1-2 0-3-2-2-7 0-3 3-1 3 3s0 4 2 3c1-2 2-5 0-5l-1-1c0-2-3-4-3-3l-11 1M33 75c0 5 1 7 4 6l1 1c0 1-1 2-3 2h-2v10l1 10h33V71l-17-1H34l-1 5\\' fill=\\'%23d3d3d3\\' fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n    ></span>\n    <picture>\n        <source\n          data-srcset=\"/blogs/static/faad0289183eae0293db5dd94a588c91/f2fbe/ConfSkDXEAAleG5.jpg-large.webp 200w,\n/blogs/static/faad0289183eae0293db5dd94a588c91/e227a/ConfSkDXEAAleG5.jpg-large.webp 400w,\n/blogs/static/faad0289183eae0293db5dd94a588c91/41df4/ConfSkDXEAAleG5.jpg-large.webp 750w\"\n          sizes=\"(max-width: 750px) 100vw, 750px\"\n          type=\"image/webp\"\n        />\n        <source\n          srcset=\"/blogs/static/faad0289183eae0293db5dd94a588c91/f544b/ConfSkDXEAAleG5.jpg-large.jpg 200w,\n/blogs/static/faad0289183eae0293db5dd94a588c91/41689/ConfSkDXEAAleG5.jpg-large.jpg 400w,\n/blogs/static/faad0289183eae0293db5dd94a588c91/a66cd/ConfSkDXEAAleG5.jpg-large.jpg 750w\"\n          sizes=\"(max-width: 750px) 100vw, 750px\"\n          type=\"image/jpeg\"\n        />\n        <img\n          class=\"gatsby-resp-image-image lazyload\"\n          style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;box-shadow:inset 0px 0px 0px 400px white;\"\n          data-src=\"/blogs/static/faad0289183eae0293db5dd94a588c91/a66cd/ConfSkDXEAAleG5.jpg-large.jpg\"\n          alt=\"ConfSkDXEAAleG5 jpg large\"\n          title=\"\"\n        />\n      </picture>\n  </span>\n  </a></p>\n<p>接着在 2017 年 1 月, Dan 又发了<a href=\"https://twitter.com/dan_abramov/status/820668074223353858\">一条</a> 来强调这个观点. 所以, 可以确定的是, <strong>任何地方都是用 PureComponent 被认为是有害的.</strong></p>\n<h2 id=\"降低可读性\"><a href=\"#%E9%99%8D%E4%BD%8E%E5%8F%AF%E8%AF%BB%E6%80%A7\" aria-label=\"降低可读性 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>降低可读性</h2>\n<p>接下来, 还有一个问题. 比如平时有一个组件 <code class=\"language-text\">Button</code>, 我们想给它加一个 <code class=\"language-text\">style</code> prop, 如果仅仅只是加一个 <code class=\"language-text\">margin</code> 的话, 我们可能会这样写</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This is a Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这没有问题, 对于一个小小的需求, 这里用这种写法其实在性能上问题不大, 虽然 style 在每次 render 的时候都是一个新的对象, 但是其实没我们想象的那么糟糕. 因为在普通的 Component, 如果没有特殊处理 <code class=\"language-text\">shouldComponentUpdate</code> 的话, 这个组件肯定是会重新被 render, 生成一个 VDOM 的, 在 VDOM 转化为 DOM 的过程中, 因为 style 的内容没有变化, 所以最后不会更新 DOM, 这个操作的损耗并不大.\n但是如果 Button 是 PureComponent 的话, 那么这样写的话每次都会带来一次无用的 <code class=\"language-text\">shadowEquals</code>. 所以要写成</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> marginTop<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This is a PureComponent</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样的话, 确实会有一些好处. 因为 style 作为 props 没有变化, <code class=\"language-text\">shouldComponentUpdate</code> 会返回 false, 连 render 都不会发生, 在性能上<strong>可能</strong>会有点提升. 可是每一次这种小小的变化, 都需要想一个名字, 作为一个常量真的不痛苦吗?</p>\n<p>这个例子可能还不够突出, 思考一下现在正火的 <code class=\"language-text\">render props</code>, 本来一个普通的 Component, 可以写成</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span>Link\n\trender<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>但是如果 Link 是 PureComponent 的话, 要改成</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token operator\">...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>render<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>如果是这样真的更好吗? 我们为什么要把一个 render 放在离 Link 那么远的地方? 这对于理解代码显然是不够的, 这让一个本来应该直观的 render 变得不那么直观.\n在 React 文档的 <a href=\"https://reactjs.org/docs/render-props.html#caveats\">render props</a> 一章有对应的介绍.</p>\n<h2 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-label=\"结论 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h2>\n<p>所以该在什么时候使用 PureComponent 呢? 一个通用的建议是: 在一个 List 有关或者 Form 相关的组件外部包一个 PureComponent, 这样可以起到不错的效果. 如果使用了 <code class=\"language-text\">recompose</code> 的话, 可以很容易完成这个任务 <code class=\"language-text\">pure(&lt;MyListComponent /&gt;)</code></p>","frontmatter":{"title":"PureComponent Considered Harmful","spoiler":"不要让所有的组件都是 PureComponent 或者 memo","date":"2018/05/21"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/PureComponent is harmful/PureComponent is harmful/","previous":{"fields":{"slug":"/lodash-fp/"},"frontmatter":{"title":"使用 lodash/fp","spoiler":"感受 fp 的强大"}},"next":{"fields":{"slug":"/vscode/"},"frontmatter":{"title":"使用 VSCode 搭建一个很爽的前端环境","spoiler":null}}}}