webpackJsonp([0x8d02644b8bf0],{488:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Yangkui's Blog",author:"Yang Kui"}},markdownRemark:{id:"/Users/yk/Documents/blog/src/pages/react-component-and-element/index.md absPath of file >>> MarkdownRemark",html:'<p><a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html">原文章</a></p>\n<p>一句话概括就是，<code>Element</code> 是 <code>Component</code> 的子集，<code>Element</code> 是 <code>Component</code> 的返回值.\nElement 其实就是一个纯对象，找个对象定义了一些对于 React 来说很重要的属性，比如 <code>type，children，props，key，type</code> 这些的。比如</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'button\'</span><span class="token punctuation">,</span>\n  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    className<span class="token punctuation">:</span> <span class="token string">\'button button-blue\'</span><span class="token punctuation">,</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span>\n      props<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        children<span class="token punctuation">:</span> <span class="token string">\'OK!\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>上面的 type 就是这个 element 的核心之一。React 通过判断 type 是字符串还是函数来决定如何 <code>mount</code> 这个 element。如果是字符串就说明是普通 DOM，称为 <code>DOM Element</code>，如果是 <code>function</code> 就是自己定义的，称为为 <code>Component Element</code>。\n所以换句话说，用户自己写出来的组件的才算的上是一个 <code>Component</code>。</p>\n<p>创建组件的常用方法有两种，一种是纯函数组件，或者说 <code>Stateless Component</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">,</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n\t<span class="token operator">&lt;</span>button style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span> color<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>通过这种方式创建的话，使用 <code>Button(props)</code> 就能得到我们定义的 element。不过这仅仅是因为 JSX 给了我们一种语法糖，如果没有 JSX 的话，应该类似于</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>style<span class="token punctuation">:</span> <span class="token punctuation">{</span>background<span class="token punctuation">:</span> color<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>而这个函数的作用也仅仅只是生成一个<strong>对象而已</strong>，就像最上面那个对象一样：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">{</span>\n\ttype<span class="token punctuation">:</span> <span class="token string">\'button\'</span><span class="token punctuation">,</span>\n\tprops<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\tstyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>background<span class="token punctuation">:</span> color<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tchildren<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\t\t…\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>这就是 Element 的真面目了。所以可以看到，JSX 也好，<code>createElement</code> 也好，不过是提供一种抽象帮我们不要写这个无聊的对象定义，要知道，如果再多几个 children 的话，整个对象定义应该就有几十行！</p>\n<p>同样的，如果换成 <code>Stateful Component</code> 的话，其实模式差不多，只不过，它们需要一个 <code>render</code> 方法，并且拥有一个被称为 <code>instance</code> 的变量。render 的目的其实也就是定义一个 element，而 instance 就是 <code>this</code> 了。</p>\n<p>所以，一个 Element 出现的步骤此时是，</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// type 就是该组件的 type</span>\n<span class="token keyword">const</span> element <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// render 不就是 Component.prototype 的方法吗</span>\n</code></pre>\n      </div>\n<p>综上所述，我们自己写的是 Component，Element 是 Component 的返回值，可以分为三类</p>\n<ol>\n<li>host（浏览器自带的）</li>\n<li>function</li>\n<li>\n<p>class\nhost 类型，React 会根据对应 type，生成真正的 <strong>DOM node</strong>，并将它所带的 <code>props</code> 写入 node 的 <code>attribute</code> 中，接着对 <code>children</code> 递归这些操作。\n比如 </p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Banner</span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p>就需要对它的 children 继续处理。\nFunction 的返回值就是 element\nclass 的 render 函数的返回值就是 element。\n当然 element 中又可以包括 Component，这个过程也是递归的，不停的重复，直到碰到没有子节点的 host 为止。</p>\n</li>\n</ol>',frontmatter:{title:"Element 和 Component 的区别",date:"2018/01/14"}}},pathContext:{slug:"/react-component-and-element/"}}}});
//# sourceMappingURL=path---react-component-and-element-3386f9c34e45ade3408f.js.map